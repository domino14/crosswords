version: 2.1
orbs:
  slack: circleci/slack@3.4.2
jobs:
  build_api_srv:
    environment:
      LEXICON_PATH: /opt/lexica/
      LETTER_DISTRIBUTION_PATH: /opt/liwords/data/letterdistributions/
      TEST_DB_HOST: localhost
      REDIS_URL: redis://localhost:6379
    docker:
      - image: golang:alpine
      - image: circleci/postgres:12.3
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: liwords_test
          POSTGRES_PASSWORD: pass
      - image: circleci/redis:alpine

    working_directory: /opt/liwords
    steps:
      - checkout
      - run:
          name: Install build-base (for tests) and bash (for slack notifier)
          command: apk update && apk upgrade && apk add bash build-base curl

      - run: mv /opt/liwords/data/lexica $LEXICON_PATH
      - run: cd cmd/liwords-api && go build
      # Tests must not be run in parallel; postgres issues happen otherwise.
      - run: go test -p 1 ./...
      - slack/status: &slack-webhook-setting
          webhook: "${SLACK_WEBHOOK}"
          success_message: ":tada: A $CIRCLE_JOB job has succeeded! (Branch: $CIRCLE_BRANCH)"
          failure_message: ":red_circle: A $CIRCLE_JOB job has failed! (Branch: $CIRCLE_BRANCH)"

  deploy_api_docker:
    machine: true
    steps:
      - checkout
      - run: echo $GHCR_TOKEN | docker login ghcr.io -u domino14 --password-stdin
      - run: >
          docker build --build-arg BUILD_HASH=${CIRCLE_SHA1}
          --build-arg BUILD_DATE=$(date -Iseconds -u)
          -t ghcr.io/domino14/liwords-api:${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM} .
      - run: docker push ghcr.io/domino14/liwords-api:${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
      - slack/status: *slack-webhook-setting

  build_fe:
    working_directory: /opt/liwords
    docker:
      - image: node:14-alpine3.10
    steps:
      - checkout
      - run: apk add bash curl
      - run: cd liwords-ui && npm ci
      - run: cd liwords-ui && npm run test
      - run: cd liwords-ui && npm run build
      - persist_to_workspace:
          root: liwords-ui
          paths:
            - build
      - slack/status: *slack-webhook-setting

  deploy_fe:
    docker:
      - image: amazon/aws-cli
    steps:
      # vim-common for xxd ugh
      - run: yum install -y tar gzip md5sum
      - attach_workspace:
          at: /tmp/liwords-ui
      - run: >
          UI_HASH=$(find /tmp/liwords-ui/build -type f -exec md5sum {} \; | sort -k 2 | md5sum | head -c 32) &&
          echo $UI_HASH &&
          sed -i "s:unknown:${UI_HASH}:" /tmp/liwords-ui/build/config.js &&
          curl -X POST -H "Content-Type: application/json" -H "X-Api-Key: ${ADMIN_WOOGLES_API_KEY}" https://woogles.io/twirp/config_service.ConfigService/SetFEHash -d "{\"hash\": \"${UI_HASH}\"}"
      - run: >
          md5=`md5sum /tmp/liwords-ui/build/wasm/macondo.wasm | awk '{ print $1 }'` &&
          sed -i "s:macondo.wasm:macondo.${md5}.wasm:" /tmp/liwords-ui/build/config.js &&
          mv /tmp/liwords-ui/build/wasm/macondo.wasm /tmp/liwords-ui/build/wasm/macondo.${md5}.wasm

      # cache everything except index.html, config files, and macondo executables
      - run: >
          cd /tmp/liwords-ui/build &&
          aws s3 sync --cache-control 'max-age=3024000'
          --exclude index.html --exclude config.js --exclude wasm/macondo.js --exclude 'wasm/*.wasm'
          . s3://woogles.io
      # no-cache everything except the wasm file
      - run: >
          cd /tmp/liwords-ui/build &&
          aws s3 sync --cache-control 'no-cache' --exclude 'wasm/*.wasm' . s3://woogles.io
      # cache the wasm file separately. We can't put it in the first sync call above
      # because we require the content-type to be set properly.
      - run: >
          cd /tmp/liwords-ui/build &&
          aws s3 sync --cache-control 'max-age=3024000' --exclude '*' --include 'wasm/*.wasm'
          --content-type 'application/wasm' . s3://woogles.io
      - slack/status: *slack-webhook-setting

workflows:
  version: 2
  build_app:
    jobs:
      - build_api_srv
      - build_fe
      - deploy_api_docker:
          context:
            - woogles-deploy
          requires:
            - build_api_srv
          filters:
            branches:
              only:
                - master

      - deploy_fe:
          requires:
            - build_fe
          filters:
            branches:
              only:
                - master
