// Definitions for pairing messages

// @generated by protoc-gen-es v1.10.0
// @generated from file proto/ipc/pair.proto (package ipc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum ipc.PairMethod
 */
export declare enum PairMethod {
  /**
   * @generated from enum value: COP = 0;
   */
  COP = 0,
}

/**
 * @generated from enum ipc.PairError
 */
export declare enum PairError {
  /**
   * @generated from enum value: SUCCESS = 0;
   */
  SUCCESS = 0,

  /**
   * @generated from enum value: PLAYER_COUNT_INSUFFICIENT = 1;
   */
  PLAYER_COUNT_INSUFFICIENT = 1,

  /**
   * @generated from enum value: ROUND_COUNT_INSUFFICIENT = 2;
   */
  ROUND_COUNT_INSUFFICIENT = 2,

  /**
   * @generated from enum value: PLAYER_COUNT_TOO_LARGE = 3;
   */
  PLAYER_COUNT_TOO_LARGE = 3,

  /**
   * @generated from enum value: PLAYER_NAME_COUNT_INSUFFICIENT = 4;
   */
  PLAYER_NAME_COUNT_INSUFFICIENT = 4,

  /**
   * @generated from enum value: PLAYER_NAME_EMPTY = 5;
   */
  PLAYER_NAME_EMPTY = 5,

  /**
   * @generated from enum value: MORE_PAIRINGS_THAN_ROUNDS = 6;
   */
  MORE_PAIRINGS_THAN_ROUNDS = 6,

  /**
   * @generated from enum value: ALL_ROUNDS_PAIRED = 7;
   */
  ALL_ROUNDS_PAIRED = 7,

  /**
   * @generated from enum value: INVALID_ROUND_PAIRINGS_COUNT = 8;
   */
  INVALID_ROUND_PAIRINGS_COUNT = 8,

  /**
   * @generated from enum value: PLAYER_INDEX_OUT_OF_BOUNDS = 9;
   */
  PLAYER_INDEX_OUT_OF_BOUNDS = 9,

  /**
   * @generated from enum value: UNPAIRED_PLAYER = 10;
   */
  UNPAIRED_PLAYER = 10,

  /**
   * @generated from enum value: INVALID_PAIRING = 11;
   */
  INVALID_PAIRING = 11,

  /**
   * @generated from enum value: MORE_RESULTS_THAN_ROUNDS = 12;
   */
  MORE_RESULTS_THAN_ROUNDS = 12,

  /**
   * @generated from enum value: MORE_RESULTS_THAN_PAIRINGS = 13;
   */
  MORE_RESULTS_THAN_PAIRINGS = 13,

  /**
   * @generated from enum value: INVALID_ROUND_RESULTS_COUNT = 14;
   */
  INVALID_ROUND_RESULTS_COUNT = 14,

  /**
   * @generated from enum value: MORE_CLASSES_THAN_PLAYERS = 15;
   */
  MORE_CLASSES_THAN_PLAYERS = 15,

  /**
   * @generated from enum value: INVALID_CLASS = 16;
   */
  INVALID_CLASS = 16,

  /**
   * @generated from enum value: MISORDERED_CLASS = 17;
   */
  MISORDERED_CLASS = 17,

  /**
   * @generated from enum value: INVALID_CLASS_PRIZES_COUNT = 18;
   */
  INVALID_CLASS_PRIZES_COUNT = 18,

  /**
   * @generated from enum value: INVALID_CLASS_PRIZE = 19;
   */
  INVALID_CLASS_PRIZE = 19,

  /**
   * @generated from enum value: INVALID_GIBSON_SPREAD_COUNT = 20;
   */
  INVALID_GIBSON_SPREAD_COUNT = 20,

  /**
   * @generated from enum value: INVALID_GIBSON_SPREAD = 21;
   */
  INVALID_GIBSON_SPREAD = 21,

  /**
   * @generated from enum value: INVALID_CONTROL_LOSS_THRESHOLD = 22;
   */
  INVALID_CONTROL_LOSS_THRESHOLD = 22,

  /**
   * @generated from enum value: INVALID_HOPEFULNESS_THRESHOLD = 23;
   */
  INVALID_HOPEFULNESS_THRESHOLD = 23,

  /**
   * @generated from enum value: INVALID_DIVISION_SIMS = 24;
   */
  INVALID_DIVISION_SIMS = 24,

  /**
   * @generated from enum value: INVALID_CONTROL_LOSS_SIMS = 25;
   */
  INVALID_CONTROL_LOSS_SIMS = 25,

  /**
   * @generated from enum value: INVALID_PLACE_PRIZES = 26;
   */
  INVALID_PLACE_PRIZES = 26,

  /**
   * @generated from enum value: INVALID_REMOVED_PLAYER = 27;
   */
  INVALID_REMOVED_PLAYER = 27,

  /**
   * @generated from enum value: INVALID_VALID_PLAYER_COUNT = 28;
   */
  INVALID_VALID_PLAYER_COUNT = 28,

  /**
   * @generated from enum value: MIN_WEIGHT_MATCHING = 29;
   */
  MIN_WEIGHT_MATCHING = 29,

  /**
   * @generated from enum value: INVALID_PAIRINGS_LENGTH = 30;
   */
  INVALID_PAIRINGS_LENGTH = 30,

  /**
   * @generated from enum value: OVERCONSTRAINED = 31;
   */
  OVERCONSTRAINED = 31,

  /**
   * @generated from enum value: REQUEST_TO_JSON_FAILED = 32;
   */
  REQUEST_TO_JSON_FAILED = 32,
}

/**
 * @generated from message ipc.RoundPairings
 */
export declare class RoundPairings extends Message<RoundPairings> {
  /**
   * @generated from field: repeated int32 pairings = 1;
   */
  pairings: number[];

  constructor(data?: PartialMessage<RoundPairings>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ipc.RoundPairings";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoundPairings;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoundPairings;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoundPairings;

  static equals(a: RoundPairings | PlainMessage<RoundPairings> | undefined, b: RoundPairings | PlainMessage<RoundPairings> | undefined): boolean;
}

/**
 * @generated from message ipc.RoundResults
 */
export declare class RoundResults extends Message<RoundResults> {
  /**
   * @generated from field: repeated int32 results = 1;
   */
  results: number[];

  constructor(data?: PartialMessage<RoundResults>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ipc.RoundResults";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoundResults;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoundResults;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoundResults;

  static equals(a: RoundResults | PlainMessage<RoundResults> | undefined, b: RoundResults | PlainMessage<RoundResults> | undefined): boolean;
}

/**
 * @generated from message ipc.PairRequest
 */
export declare class PairRequest extends Message<PairRequest> {
  /**
   * @generated from field: ipc.PairMethod pair_method = 1;
   */
  pairMethod: PairMethod;

  /**
   * @generated from field: repeated string player_names = 2;
   */
  playerNames: string[];

  /**
   * @generated from field: repeated ipc.RoundPairings division_pairings = 3;
   */
  divisionPairings: RoundPairings[];

  /**
   * @generated from field: repeated ipc.RoundResults division_results = 4;
   */
  divisionResults: RoundResults[];

  /**
   * @generated from field: repeated int32 classes = 5;
   */
  classes: number[];

  /**
   * @generated from field: repeated int32 class_prizes = 6;
   */
  classPrizes: number[];

  /**
   * @generated from field: repeated int32 gibson_spreads = 7;
   */
  gibsonSpreads: number[];

  /**
   * @generated from field: double control_loss_threshold = 8;
   */
  controlLossThreshold: number;

  /**
   * @generated from field: double hopefulness_threshold = 9;
   */
  hopefulnessThreshold: number;

  /**
   * @generated from field: int32 all_players = 10;
   */
  allPlayers: number;

  /**
   * @generated from field: int32 valid_players = 11;
   */
  validPlayers: number;

  /**
   * @generated from field: int32 rounds = 12;
   */
  rounds: number;

  /**
   * @generated from field: int32 place_prizes = 13;
   */
  placePrizes: number;

  /**
   * @generated from field: int32 division_sims = 14;
   */
  divisionSims: number;

  /**
   * @generated from field: int32 control_loss_sims = 15;
   */
  controlLossSims: number;

  /**
   * @generated from field: bool use_control_loss = 16;
   */
  useControlLoss: boolean;

  /**
   * @generated from field: bool allow_repeat_byes = 17;
   */
  allowRepeatByes: boolean;

  /**
   * @generated from field: repeated int32 removed_players = 18;
   */
  removedPlayers: number[];

  /**
   * @generated from field: int32 seed = 19;
   */
  seed: number;

  constructor(data?: PartialMessage<PairRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ipc.PairRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PairRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PairRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PairRequest;

  static equals(a: PairRequest | PlainMessage<PairRequest> | undefined, b: PairRequest | PlainMessage<PairRequest> | undefined): boolean;
}

/**
 * @generated from message ipc.PairResponse
 */
export declare class PairResponse extends Message<PairResponse> {
  /**
   * @generated from field: ipc.PairError error_code = 1;
   */
  errorCode: PairError;

  /**
   * @generated from field: string error_message = 2;
   */
  errorMessage: string;

  /**
   * @generated from field: string log = 3;
   */
  log: string;

  /**
   * @generated from field: repeated int32 pairings = 4;
   */
  pairings: number[];

  constructor(data?: PartialMessage<PairResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ipc.PairResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PairResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PairResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PairResponse;

  static equals(a: PairResponse | PlainMessage<PairResponse> | undefined, b: PairResponse | PlainMessage<PairResponse> | undefined): boolean;
}

