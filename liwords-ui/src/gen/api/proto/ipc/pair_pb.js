// Definitions for pairing messages

// @generated by protoc-gen-es v1.10.0
// @generated from file proto/ipc/pair.proto (package ipc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum ipc.PairMethod
 */
export const PairMethod = /*@__PURE__*/ proto3.makeEnum(
  "ipc.PairMethod",
  [
    {no: 0, name: "COP"},
  ],
);

/**
 * @generated from enum ipc.PairError
 */
export const PairError = /*@__PURE__*/ proto3.makeEnum(
  "ipc.PairError",
  [
    {no: 0, name: "SUCCESS"},
    {no: 1, name: "PLAYER_COUNT_INSUFFICIENT"},
    {no: 2, name: "ROUND_COUNT_INSUFFICIENT"},
    {no: 3, name: "PLAYER_COUNT_TOO_LARGE"},
    {no: 4, name: "PLAYER_NAME_COUNT_INSUFFICIENT"},
    {no: 5, name: "PLAYER_NAME_EMPTY"},
    {no: 6, name: "MORE_PAIRINGS_THAN_ROUNDS"},
    {no: 7, name: "ALL_ROUNDS_PAIRED"},
    {no: 8, name: "INVALID_ROUND_PAIRINGS_COUNT"},
    {no: 9, name: "PLAYER_INDEX_OUT_OF_BOUNDS"},
    {no: 10, name: "UNPAIRED_PLAYER"},
    {no: 11, name: "INVALID_PAIRING"},
    {no: 12, name: "MORE_RESULTS_THAN_ROUNDS"},
    {no: 13, name: "MORE_RESULTS_THAN_PAIRINGS"},
    {no: 14, name: "INVALID_ROUND_RESULTS_COUNT"},
    {no: 15, name: "INVALID_PLAYER_CLASS_COUNT"},
    {no: 16, name: "INVALID_PLAYER_CLASS"},
    {no: 17, name: "INVALID_CLASS_PRIZE"},
    {no: 18, name: "INVALID_GIBSON_SPREAD"},
    {no: 19, name: "INVALID_CONTROL_LOSS_THRESHOLD"},
    {no: 20, name: "INVALID_HOPEFULNESS_THRESHOLD"},
    {no: 21, name: "INVALID_DIVISION_SIMS"},
    {no: 22, name: "INVALID_CONTROL_LOSS_SIMS"},
    {no: 23, name: "INVALID_PLACE_PRIZES"},
    {no: 24, name: "INVALID_REMOVED_PLAYER"},
    {no: 25, name: "INVALID_VALID_PLAYER_COUNT"},
    {no: 26, name: "MIN_WEIGHT_MATCHING"},
    {no: 27, name: "INVALID_PAIRINGS_LENGTH"},
    {no: 28, name: "OVERCONSTRAINED"},
    {no: 29, name: "REQUEST_TO_JSON_FAILED"},
    {no: 30, name: "TIMEOUT"},
  ],
);

/**
 * @generated from message ipc.RoundPairings
 */
export const RoundPairings = /*@__PURE__*/ proto3.makeMessageType(
  "ipc.RoundPairings",
  () => [
    { no: 1, name: "pairings", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ],
);

/**
 * @generated from message ipc.RoundResults
 */
export const RoundResults = /*@__PURE__*/ proto3.makeMessageType(
  "ipc.RoundResults",
  () => [
    { no: 1, name: "results", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ],
);

/**
 * @generated from message ipc.PairRequest
 */
export const PairRequest = /*@__PURE__*/ proto3.makeMessageType(
  "ipc.PairRequest",
  () => [
    { no: 1, name: "pair_method", kind: "enum", T: proto3.getEnumType(PairMethod) },
    { no: 2, name: "player_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "player_classes", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 4, name: "division_pairings", kind: "message", T: RoundPairings, repeated: true },
    { no: 5, name: "division_results", kind: "message", T: RoundResults, repeated: true },
    { no: 6, name: "class_prizes", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 7, name: "gibson_spread", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "control_loss_threshold", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "hopefulness_threshold", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 10, name: "all_players", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "valid_players", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "rounds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "place_prizes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "division_sims", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "control_loss_sims", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 16, name: "use_control_loss", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "allow_repeat_byes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "removed_players", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 19, name: "seed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message ipc.PairResponse
 */
export const PairResponse = /*@__PURE__*/ proto3.makeMessageType(
  "ipc.PairResponse",
  () => [
    { no: 1, name: "error_code", kind: "enum", T: proto3.getEnumType(PairError) },
    { no: 2, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pairings", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ],
);

