// @generated by protoc-gen-es v0.2.1
// @generated from file api/proto/ipc/tournament.proto (package ipc, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3, Timestamp} from "@bufbuild/protobuf";
import {GameEndReason, GameRequest} from "./omgwords_pb.js";

/**
 * @generated from enum ipc.TournamentGameResult
 */
export const TournamentGameResult = proto3.makeEnum(
  "ipc.TournamentGameResult",
  [
    {no: 0, name: "NO_RESULT"},
    {no: 1, name: "WIN"},
    {no: 2, name: "LOSS"},
    {no: 3, name: "DRAW"},
    {no: 4, name: "BYE"},
    {no: 5, name: "FORFEIT_WIN"},
    {no: 6, name: "FORFEIT_LOSS"},
    {no: 7, name: "ELIMINATED"},
    {no: 8, name: "VOID"},
  ],
);

/**
 * @generated from enum ipc.PairingMethod
 */
export const PairingMethod = proto3.makeEnum(
  "ipc.PairingMethod",
  [
    {no: 0, name: "RANDOM"},
    {no: 1, name: "ROUND_ROBIN"},
    {no: 2, name: "KING_OF_THE_HILL"},
    {no: 3, name: "ELIMINATION"},
    {no: 4, name: "FACTOR"},
    {no: 5, name: "INITIAL_FONTES"},
    {no: 6, name: "SWISS"},
    {no: 7, name: "QUICKPAIR"},
    {no: 8, name: "MANUAL"},
    {no: 9, name: "TEAM_ROUND_ROBIN"},
  ],
);

/**
 * @generated from enum ipc.FirstMethod
 */
export const FirstMethod = proto3.makeEnum(
  "ipc.FirstMethod",
  [
    {no: 0, name: "MANUAL_FIRST"},
    {no: 1, name: "RANDOM_FIRST"},
    {no: 2, name: "AUTOMATIC_FIRST"},
  ],
);

/**
 * New tournaments will use full tournament
 * messages (specifically, TournamentDivisionDataResponse et al).
 * This event is also used in the tournament_service's RecentGamesResponse,
 * which can be used to fetch information for the last games played in
 * a tournament.
 *
 * @generated from message ipc.TournamentGameEndedEvent
 */
export const TournamentGameEndedEvent = proto3.makeMessageType(
  "ipc.TournamentGameEndedEvent",
  () => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "players", kind: "message", T: TournamentGameEndedEvent_Player, repeated: true },
    { no: 3, name: "end_reason", kind: "enum", T: proto3.getEnumType(GameEndReason) },
    { no: 4, name: "time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "game_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * @generated from message ipc.TournamentGameEndedEvent.Player
 */
export const TournamentGameEndedEvent_Player = proto3.makeMessageType(
  "ipc.TournamentGameEndedEvent.Player",
  () => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "score", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "result", kind: "enum", T: proto3.getEnumType(TournamentGameResult) },
  ],
  {localName: "TournamentGameEndedEvent_Player"},
);

/**
 * This message makes the "Status Bar" show up and also tells the players
 * that the backend is now accepting "ready" messages for this round.
 *
 * @generated from message ipc.TournamentRoundStarted
 */
export const TournamentRoundStarted = proto3.makeMessageType(
  "ipc.TournamentRoundStarted",
  () => [
    { no: 1, name: "tournament_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "game_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "deadline", kind: "message", T: Timestamp },
  ],
);

/**
 * This can be sent from the user to the tournament or vice-versa.
 *
 * @generated from message ipc.ReadyForTournamentGame
 */
export const ReadyForTournamentGame = proto3.makeMessageType(
  "ipc.ReadyForTournamentGame",
  () => [
    { no: 1, name: "tournament_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "game_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "unready", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message ipc.TournamentPerson
 */
export const TournamentPerson = proto3.makeMessageType(
  "ipc.TournamentPerson",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rating", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "suspended", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message ipc.TournamentPersons
 */
export const TournamentPersons = proto3.makeMessageType(
  "ipc.TournamentPersons",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "persons", kind: "message", T: TournamentPerson, repeated: true },
  ],
);

/**
 * @generated from message ipc.RoundControl
 */
export const RoundControl = proto3.makeMessageType(
  "ipc.RoundControl",
  () => [
    { no: 1, name: "pairing_method", kind: "enum", T: proto3.getEnumType(PairingMethod) },
    { no: 2, name: "first_method", kind: "enum", T: proto3.getEnumType(FirstMethod) },
    { no: 3, name: "games_per_round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "factor", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "initial_fontes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "max_repeats", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "allow_over_max_repeats", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "repeat_relative_weight", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "win_difference_relative_weight", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * @generated from message ipc.DivisionControls
 */
export const DivisionControls = proto3.makeMessageType(
  "ipc.DivisionControls",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "game_request", kind: "message", T: GameRequest },
    { no: 4, name: "suspended_result", kind: "enum", T: proto3.getEnumType(TournamentGameResult) },
    { no: 5, name: "suspended_spread", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "auto_start", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "spread_cap", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "gibsonize", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "gibson_spread", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "minimum_placement", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "maximum_bye_placement", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * @generated from message ipc.TournamentGame
 */
export const TournamentGame = proto3.makeMessageType(
  "ipc.TournamentGame",
  () => [
    { no: 1, name: "scores", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 2, name: "results", kind: "enum", T: proto3.getEnumType(TournamentGameResult), repeated: true },
    { no: 3, name: "game_end_reason", kind: "enum", T: proto3.getEnumType(GameEndReason) },
    { no: 4, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message ipc.Pairing
 */
export const Pairing = proto3.makeMessageType(
  "ipc.Pairing",
  () => [
    { no: 1, name: "players", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 2, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "games", kind: "message", T: TournamentGame, repeated: true },
    { no: 4, name: "outcomes", kind: "enum", T: proto3.getEnumType(TournamentGameResult), repeated: true },
    { no: 5, name: "ready_states", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message ipc.PlayerStanding
 */
export const PlayerStanding = proto3.makeMessageType(
  "ipc.PlayerStanding",
  () => [
    { no: 1, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wins", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "losses", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "draws", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "spread", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "gibsonized", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message ipc.RoundStandings
 */
export const RoundStandings = proto3.makeMessageType(
  "ipc.RoundStandings",
  () => [
    { no: 1, name: "standings", kind: "message", T: PlayerStanding, repeated: true },
  ],
);

/**
 * @generated from message ipc.DivisionPairingsResponse
 */
export const DivisionPairingsResponse = proto3.makeMessageType(
  "ipc.DivisionPairingsResponse",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "division_pairings", kind: "message", T: Pairing, repeated: true },
    { no: 4, name: "division_standings", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: RoundStandings} },
  ],
);

/**
 * @generated from message ipc.DivisionPairingsDeletedResponse
 */
export const DivisionPairingsDeletedResponse = proto3.makeMessageType(
  "ipc.DivisionPairingsDeletedResponse",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * @generated from message ipc.PlayersAddedOrRemovedResponse
 */
export const PlayersAddedOrRemovedResponse = proto3.makeMessageType(
  "ipc.PlayersAddedOrRemovedResponse",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "players", kind: "message", T: TournamentPersons },
    { no: 4, name: "division_pairings", kind: "message", T: Pairing, repeated: true },
    { no: 5, name: "division_standings", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: RoundStandings} },
  ],
);

/**
 * @generated from message ipc.DivisionRoundControls
 */
export const DivisionRoundControls = proto3.makeMessageType(
  "ipc.DivisionRoundControls",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "round_controls", kind: "message", T: RoundControl, repeated: true },
    { no: 4, name: "division_pairings", kind: "message", T: Pairing, repeated: true },
    { no: 5, name: "division_standings", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: RoundStandings} },
  ],
);

/**
 * @generated from message ipc.DivisionControlsResponse
 */
export const DivisionControlsResponse = proto3.makeMessageType(
  "ipc.DivisionControlsResponse",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "division_controls", kind: "message", T: DivisionControls },
    { no: 4, name: "division_standings", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: RoundStandings} },
  ],
);

/**
 * @generated from message ipc.TournamentDivisionDataResponse
 */
export const TournamentDivisionDataResponse = proto3.makeMessageType(
  "ipc.TournamentDivisionDataResponse",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "players", kind: "message", T: TournamentPersons },
    { no: 4, name: "standings", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: RoundStandings} },
    { no: 5, name: "pairing_map", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Pairing} },
    { no: 6, name: "controls", kind: "message", T: DivisionControls },
    { no: 7, name: "round_controls", kind: "message", T: RoundControl, repeated: true },
    { no: 8, name: "current_round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * @generated from message ipc.FullTournamentDivisions
 */
export const FullTournamentDivisions = proto3.makeMessageType(
  "ipc.FullTournamentDivisions",
  () => [
    { no: 1, name: "divisions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: TournamentDivisionDataResponse} },
    { no: 2, name: "started", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message ipc.TournamentFinishedResponse
 */
export const TournamentFinishedResponse = proto3.makeMessageType(
  "ipc.TournamentFinishedResponse",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message ipc.TournamentDataResponse
 */
export const TournamentDataResponse = proto3.makeMessageType(
  "ipc.TournamentDataResponse",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "executive_director", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "directors", kind: "message", T: TournamentPersons },
    { no: 6, name: "is_started", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "start_time", kind: "message", T: Timestamp },
  ],
);

/**
 * @generated from message ipc.TournamentDivisionDeletedResponse
 */
export const TournamentDivisionDeletedResponse = proto3.makeMessageType(
  "ipc.TournamentDivisionDeletedResponse",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

