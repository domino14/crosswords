// source: api/proto/ipc/tournament.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var api_proto_ipc_omgwords_pb = require('../../../api/proto/ipc/omgwords_pb.js');
goog.object.extend(proto, api_proto_ipc_omgwords_pb);
goog.exportSymbol('proto.ipc.DivisionControls', null, global);
goog.exportSymbol('proto.ipc.DivisionControlsResponse', null, global);
goog.exportSymbol('proto.ipc.DivisionPairingsDeletedResponse', null, global);
goog.exportSymbol('proto.ipc.DivisionPairingsResponse', null, global);
goog.exportSymbol('proto.ipc.DivisionRoundControls', null, global);
goog.exportSymbol('proto.ipc.FirstMethod', null, global);
goog.exportSymbol('proto.ipc.FullTournamentDivisions', null, global);
goog.exportSymbol('proto.ipc.Pairing', null, global);
goog.exportSymbol('proto.ipc.PairingMethod', null, global);
goog.exportSymbol('proto.ipc.PlayerStanding', null, global);
goog.exportSymbol('proto.ipc.PlayersAddedOrRemovedResponse', null, global);
goog.exportSymbol('proto.ipc.ReadyForTournamentGame', null, global);
goog.exportSymbol('proto.ipc.RoundControl', null, global);
goog.exportSymbol('proto.ipc.RoundStandings', null, global);
goog.exportSymbol('proto.ipc.TournamentDataResponse', null, global);
goog.exportSymbol('proto.ipc.TournamentDivisionDataResponse', null, global);
goog.exportSymbol('proto.ipc.TournamentDivisionDeletedResponse', null, global);
goog.exportSymbol('proto.ipc.TournamentFinishedResponse', null, global);
goog.exportSymbol('proto.ipc.TournamentGame', null, global);
goog.exportSymbol('proto.ipc.TournamentGameEndedEvent', null, global);
goog.exportSymbol('proto.ipc.TournamentGameEndedEvent.Player', null, global);
goog.exportSymbol('proto.ipc.TournamentGameResult', null, global);
goog.exportSymbol('proto.ipc.TournamentPerson', null, global);
goog.exportSymbol('proto.ipc.TournamentPersons', null, global);
goog.exportSymbol('proto.ipc.TournamentRoundStarted', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.TournamentGameEndedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ipc.TournamentGameEndedEvent.repeatedFields_, null);
};
goog.inherits(proto.ipc.TournamentGameEndedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.TournamentGameEndedEvent.displayName = 'proto.ipc.TournamentGameEndedEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.TournamentGameEndedEvent.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.TournamentGameEndedEvent.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.TournamentGameEndedEvent.Player.displayName = 'proto.ipc.TournamentGameEndedEvent.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.TournamentRoundStarted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.TournamentRoundStarted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.TournamentRoundStarted.displayName = 'proto.ipc.TournamentRoundStarted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.ReadyForTournamentGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.ReadyForTournamentGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.ReadyForTournamentGame.displayName = 'proto.ipc.ReadyForTournamentGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.TournamentPerson = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.TournamentPerson, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.TournamentPerson.displayName = 'proto.ipc.TournamentPerson';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.TournamentPersons = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ipc.TournamentPersons.repeatedFields_, null);
};
goog.inherits(proto.ipc.TournamentPersons, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.TournamentPersons.displayName = 'proto.ipc.TournamentPersons';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.RoundControl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.RoundControl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.RoundControl.displayName = 'proto.ipc.RoundControl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.DivisionControls = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.DivisionControls, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.DivisionControls.displayName = 'proto.ipc.DivisionControls';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.TournamentGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ipc.TournamentGame.repeatedFields_, null);
};
goog.inherits(proto.ipc.TournamentGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.TournamentGame.displayName = 'proto.ipc.TournamentGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.Pairing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ipc.Pairing.repeatedFields_, null);
};
goog.inherits(proto.ipc.Pairing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.Pairing.displayName = 'proto.ipc.Pairing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.PlayerStanding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.PlayerStanding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.PlayerStanding.displayName = 'proto.ipc.PlayerStanding';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.RoundStandings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ipc.RoundStandings.repeatedFields_, null);
};
goog.inherits(proto.ipc.RoundStandings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.RoundStandings.displayName = 'proto.ipc.RoundStandings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.DivisionPairingsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ipc.DivisionPairingsResponse.repeatedFields_, null);
};
goog.inherits(proto.ipc.DivisionPairingsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.DivisionPairingsResponse.displayName = 'proto.ipc.DivisionPairingsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.DivisionPairingsDeletedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.DivisionPairingsDeletedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.DivisionPairingsDeletedResponse.displayName = 'proto.ipc.DivisionPairingsDeletedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.PlayersAddedOrRemovedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ipc.PlayersAddedOrRemovedResponse.repeatedFields_, null);
};
goog.inherits(proto.ipc.PlayersAddedOrRemovedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.PlayersAddedOrRemovedResponse.displayName = 'proto.ipc.PlayersAddedOrRemovedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.DivisionRoundControls = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ipc.DivisionRoundControls.repeatedFields_, null);
};
goog.inherits(proto.ipc.DivisionRoundControls, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.DivisionRoundControls.displayName = 'proto.ipc.DivisionRoundControls';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.DivisionControlsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.DivisionControlsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.DivisionControlsResponse.displayName = 'proto.ipc.DivisionControlsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.TournamentDivisionDataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ipc.TournamentDivisionDataResponse.repeatedFields_, null);
};
goog.inherits(proto.ipc.TournamentDivisionDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.TournamentDivisionDataResponse.displayName = 'proto.ipc.TournamentDivisionDataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.FullTournamentDivisions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.FullTournamentDivisions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.FullTournamentDivisions.displayName = 'proto.ipc.FullTournamentDivisions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.TournamentFinishedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.TournamentFinishedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.TournamentFinishedResponse.displayName = 'proto.ipc.TournamentFinishedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.TournamentDataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.TournamentDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.TournamentDataResponse.displayName = 'proto.ipc.TournamentDataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.TournamentDivisionDeletedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.TournamentDivisionDeletedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.TournamentDivisionDeletedResponse.displayName = 'proto.ipc.TournamentDivisionDeletedResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ipc.TournamentGameEndedEvent.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.TournamentGameEndedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.TournamentGameEndedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.TournamentGameEndedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentGameEndedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.ipc.TournamentGameEndedEvent.Player.toObject, includeInstance),
    endReason: jspb.Message.getFieldWithDefault(msg, 3, 0),
    time: jspb.Message.getFieldWithDefault(msg, 4, 0),
    round: jspb.Message.getFieldWithDefault(msg, 5, 0),
    division: jspb.Message.getFieldWithDefault(msg, 6, ""),
    gameIndex: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.TournamentGameEndedEvent}
 */
proto.ipc.TournamentGameEndedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.TournamentGameEndedEvent;
  return proto.ipc.TournamentGameEndedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.TournamentGameEndedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.TournamentGameEndedEvent}
 */
proto.ipc.TournamentGameEndedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = new proto.ipc.TournamentGameEndedEvent.Player;
      reader.readMessage(value,proto.ipc.TournamentGameEndedEvent.Player.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    case 3:
      var value = /** @type {!proto.ipc.GameEndReason} */ (reader.readEnum());
      msg.setEndReason(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.TournamentGameEndedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.TournamentGameEndedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.TournamentGameEndedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentGameEndedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ipc.TournamentGameEndedEvent.Player.serializeBinaryToWriter
    );
  }
  f = message.getEndReason();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGameIndex();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.TournamentGameEndedEvent.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.TournamentGameEndedEvent.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.TournamentGameEndedEvent.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentGameEndedEvent.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    score: jspb.Message.getFieldWithDefault(msg, 2, 0),
    result: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.TournamentGameEndedEvent.Player}
 */
proto.ipc.TournamentGameEndedEvent.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.TournamentGameEndedEvent.Player;
  return proto.ipc.TournamentGameEndedEvent.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.TournamentGameEndedEvent.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.TournamentGameEndedEvent.Player}
 */
proto.ipc.TournamentGameEndedEvent.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 3:
      var value = /** @type {!proto.ipc.TournamentGameResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.TournamentGameEndedEvent.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.TournamentGameEndedEvent.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.TournamentGameEndedEvent.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentGameEndedEvent.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.ipc.TournamentGameEndedEvent.Player.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentGameEndedEvent.Player} returns this
 */
proto.ipc.TournamentGameEndedEvent.Player.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 score = 2;
 * @return {number}
 */
proto.ipc.TournamentGameEndedEvent.Player.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.TournamentGameEndedEvent.Player} returns this
 */
proto.ipc.TournamentGameEndedEvent.Player.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TournamentGameResult result = 3;
 * @return {!proto.ipc.TournamentGameResult}
 */
proto.ipc.TournamentGameEndedEvent.Player.prototype.getResult = function() {
  return /** @type {!proto.ipc.TournamentGameResult} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ipc.TournamentGameResult} value
 * @return {!proto.ipc.TournamentGameEndedEvent.Player} returns this
 */
proto.ipc.TournamentGameEndedEvent.Player.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.ipc.TournamentGameEndedEvent.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentGameEndedEvent} returns this
 */
proto.ipc.TournamentGameEndedEvent.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Player players = 2;
 * @return {!Array<!proto.ipc.TournamentGameEndedEvent.Player>}
 */
proto.ipc.TournamentGameEndedEvent.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.ipc.TournamentGameEndedEvent.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ipc.TournamentGameEndedEvent.Player, 2));
};


/**
 * @param {!Array<!proto.ipc.TournamentGameEndedEvent.Player>} value
 * @return {!proto.ipc.TournamentGameEndedEvent} returns this
*/
proto.ipc.TournamentGameEndedEvent.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ipc.TournamentGameEndedEvent.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ipc.TournamentGameEndedEvent.Player}
 */
proto.ipc.TournamentGameEndedEvent.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ipc.TournamentGameEndedEvent.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.TournamentGameEndedEvent} returns this
 */
proto.ipc.TournamentGameEndedEvent.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};


/**
 * optional GameEndReason end_reason = 3;
 * @return {!proto.ipc.GameEndReason}
 */
proto.ipc.TournamentGameEndedEvent.prototype.getEndReason = function() {
  return /** @type {!proto.ipc.GameEndReason} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ipc.GameEndReason} value
 * @return {!proto.ipc.TournamentGameEndedEvent} returns this
 */
proto.ipc.TournamentGameEndedEvent.prototype.setEndReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int64 time = 4;
 * @return {number}
 */
proto.ipc.TournamentGameEndedEvent.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.TournamentGameEndedEvent} returns this
 */
proto.ipc.TournamentGameEndedEvent.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 round = 5;
 * @return {number}
 */
proto.ipc.TournamentGameEndedEvent.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.TournamentGameEndedEvent} returns this
 */
proto.ipc.TournamentGameEndedEvent.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string division = 6;
 * @return {string}
 */
proto.ipc.TournamentGameEndedEvent.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentGameEndedEvent} returns this
 */
proto.ipc.TournamentGameEndedEvent.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 game_index = 7;
 * @return {number}
 */
proto.ipc.TournamentGameEndedEvent.prototype.getGameIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.TournamentGameEndedEvent} returns this
 */
proto.ipc.TournamentGameEndedEvent.prototype.setGameIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.TournamentRoundStarted.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.TournamentRoundStarted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.TournamentRoundStarted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentRoundStarted.toObject = function(includeInstance, msg) {
  var f, obj = {
    tournamentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    gameIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    deadline: (f = msg.getDeadline()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.TournamentRoundStarted}
 */
proto.ipc.TournamentRoundStarted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.TournamentRoundStarted;
  return proto.ipc.TournamentRoundStarted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.TournamentRoundStarted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.TournamentRoundStarted}
 */
proto.ipc.TournamentRoundStarted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTournamentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameIndex(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDeadline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.TournamentRoundStarted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.TournamentRoundStarted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.TournamentRoundStarted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentRoundStarted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTournamentId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getGameIndex();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getDeadline();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string tournament_id = 1;
 * @return {string}
 */
proto.ipc.TournamentRoundStarted.prototype.getTournamentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentRoundStarted} returns this
 */
proto.ipc.TournamentRoundStarted.prototype.setTournamentId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.ipc.TournamentRoundStarted.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentRoundStarted} returns this
 */
proto.ipc.TournamentRoundStarted.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.ipc.TournamentRoundStarted.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.TournamentRoundStarted} returns this
 */
proto.ipc.TournamentRoundStarted.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 game_index = 4;
 * @return {number}
 */
proto.ipc.TournamentRoundStarted.prototype.getGameIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.TournamentRoundStarted} returns this
 */
proto.ipc.TournamentRoundStarted.prototype.setGameIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp deadline = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ipc.TournamentRoundStarted.prototype.getDeadline = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ipc.TournamentRoundStarted} returns this
*/
proto.ipc.TournamentRoundStarted.prototype.setDeadline = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.TournamentRoundStarted} returns this
 */
proto.ipc.TournamentRoundStarted.prototype.clearDeadline = function() {
  return this.setDeadline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.TournamentRoundStarted.prototype.hasDeadline = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.ReadyForTournamentGame.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.ReadyForTournamentGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.ReadyForTournamentGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.ReadyForTournamentGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    tournamentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    playerId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gameIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    unready: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.ReadyForTournamentGame}
 */
proto.ipc.ReadyForTournamentGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.ReadyForTournamentGame;
  return proto.ipc.ReadyForTournamentGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.ReadyForTournamentGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.ReadyForTournamentGame}
 */
proto.ipc.ReadyForTournamentGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTournamentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameIndex(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnready(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.ReadyForTournamentGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.ReadyForTournamentGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.ReadyForTournamentGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.ReadyForTournamentGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTournamentId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGameIndex();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getUnready();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string tournament_id = 1;
 * @return {string}
 */
proto.ipc.ReadyForTournamentGame.prototype.getTournamentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ReadyForTournamentGame} returns this
 */
proto.ipc.ReadyForTournamentGame.prototype.setTournamentId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.ipc.ReadyForTournamentGame.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ReadyForTournamentGame} returns this
 */
proto.ipc.ReadyForTournamentGame.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.ipc.ReadyForTournamentGame.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.ReadyForTournamentGame} returns this
 */
proto.ipc.ReadyForTournamentGame.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string player_id = 4;
 * @return {string}
 */
proto.ipc.ReadyForTournamentGame.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ReadyForTournamentGame} returns this
 */
proto.ipc.ReadyForTournamentGame.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 game_index = 5;
 * @return {number}
 */
proto.ipc.ReadyForTournamentGame.prototype.getGameIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.ReadyForTournamentGame} returns this
 */
proto.ipc.ReadyForTournamentGame.prototype.setGameIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool unready = 6;
 * @return {boolean}
 */
proto.ipc.ReadyForTournamentGame.prototype.getUnready = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ipc.ReadyForTournamentGame} returns this
 */
proto.ipc.ReadyForTournamentGame.prototype.setUnready = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.TournamentPerson.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.TournamentPerson.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.TournamentPerson} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentPerson.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rating: jspb.Message.getFieldWithDefault(msg, 2, 0),
    suspended: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.TournamentPerson}
 */
proto.ipc.TournamentPerson.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.TournamentPerson;
  return proto.ipc.TournamentPerson.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.TournamentPerson} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.TournamentPerson}
 */
proto.ipc.TournamentPerson.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRating(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuspended(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.TournamentPerson.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.TournamentPerson.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.TournamentPerson} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentPerson.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRating();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSuspended();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ipc.TournamentPerson.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentPerson} returns this
 */
proto.ipc.TournamentPerson.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 rating = 2;
 * @return {number}
 */
proto.ipc.TournamentPerson.prototype.getRating = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.TournamentPerson} returns this
 */
proto.ipc.TournamentPerson.prototype.setRating = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool suspended = 3;
 * @return {boolean}
 */
proto.ipc.TournamentPerson.prototype.getSuspended = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ipc.TournamentPerson} returns this
 */
proto.ipc.TournamentPerson.prototype.setSuspended = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ipc.TournamentPersons.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.TournamentPersons.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.TournamentPersons.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.TournamentPersons} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentPersons.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    personsList: jspb.Message.toObjectList(msg.getPersonsList(),
    proto.ipc.TournamentPerson.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.TournamentPersons}
 */
proto.ipc.TournamentPersons.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.TournamentPersons;
  return proto.ipc.TournamentPersons.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.TournamentPersons} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.TournamentPersons}
 */
proto.ipc.TournamentPersons.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = new proto.ipc.TournamentPerson;
      reader.readMessage(value,proto.ipc.TournamentPerson.deserializeBinaryFromReader);
      msg.addPersons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.TournamentPersons.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.TournamentPersons.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.TournamentPersons} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentPersons.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPersonsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ipc.TournamentPerson.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ipc.TournamentPersons.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentPersons} returns this
 */
proto.ipc.TournamentPersons.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.ipc.TournamentPersons.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentPersons} returns this
 */
proto.ipc.TournamentPersons.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated TournamentPerson persons = 3;
 * @return {!Array<!proto.ipc.TournamentPerson>}
 */
proto.ipc.TournamentPersons.prototype.getPersonsList = function() {
  return /** @type{!Array<!proto.ipc.TournamentPerson>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ipc.TournamentPerson, 3));
};


/**
 * @param {!Array<!proto.ipc.TournamentPerson>} value
 * @return {!proto.ipc.TournamentPersons} returns this
*/
proto.ipc.TournamentPersons.prototype.setPersonsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ipc.TournamentPerson=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ipc.TournamentPerson}
 */
proto.ipc.TournamentPersons.prototype.addPersons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ipc.TournamentPerson, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.TournamentPersons} returns this
 */
proto.ipc.TournamentPersons.prototype.clearPersonsList = function() {
  return this.setPersonsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.RoundControl.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.RoundControl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.RoundControl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.RoundControl.toObject = function(includeInstance, msg) {
  var f, obj = {
    pairingMethod: jspb.Message.getFieldWithDefault(msg, 1, 0),
    firstMethod: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gamesPerRound: jspb.Message.getFieldWithDefault(msg, 3, 0),
    round: jspb.Message.getFieldWithDefault(msg, 4, 0),
    factor: jspb.Message.getFieldWithDefault(msg, 5, 0),
    initialFontes: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxRepeats: jspb.Message.getFieldWithDefault(msg, 7, 0),
    allowOverMaxRepeats: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    repeatRelativeWeight: jspb.Message.getFieldWithDefault(msg, 9, 0),
    winDifferenceRelativeWeight: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.RoundControl}
 */
proto.ipc.RoundControl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.RoundControl;
  return proto.ipc.RoundControl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.RoundControl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.RoundControl}
 */
proto.ipc.RoundControl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ipc.PairingMethod} */ (reader.readEnum());
      msg.setPairingMethod(value);
      break;
    case 2:
      var value = /** @type {!proto.ipc.FirstMethod} */ (reader.readEnum());
      msg.setFirstMethod(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGamesPerRound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFactor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInitialFontes(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxRepeats(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowOverMaxRepeats(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRepeatRelativeWeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWinDifferenceRelativeWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.RoundControl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.RoundControl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.RoundControl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.RoundControl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPairingMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFirstMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getGamesPerRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFactor();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getInitialFontes();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getMaxRepeats();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAllowOverMaxRepeats();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getRepeatRelativeWeight();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getWinDifferenceRelativeWeight();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * optional PairingMethod pairing_method = 1;
 * @return {!proto.ipc.PairingMethod}
 */
proto.ipc.RoundControl.prototype.getPairingMethod = function() {
  return /** @type {!proto.ipc.PairingMethod} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ipc.PairingMethod} value
 * @return {!proto.ipc.RoundControl} returns this
 */
proto.ipc.RoundControl.prototype.setPairingMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional FirstMethod first_method = 2;
 * @return {!proto.ipc.FirstMethod}
 */
proto.ipc.RoundControl.prototype.getFirstMethod = function() {
  return /** @type {!proto.ipc.FirstMethod} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ipc.FirstMethod} value
 * @return {!proto.ipc.RoundControl} returns this
 */
proto.ipc.RoundControl.prototype.setFirstMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 games_per_round = 3;
 * @return {number}
 */
proto.ipc.RoundControl.prototype.getGamesPerRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.RoundControl} returns this
 */
proto.ipc.RoundControl.prototype.setGamesPerRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 round = 4;
 * @return {number}
 */
proto.ipc.RoundControl.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.RoundControl} returns this
 */
proto.ipc.RoundControl.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 factor = 5;
 * @return {number}
 */
proto.ipc.RoundControl.prototype.getFactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.RoundControl} returns this
 */
proto.ipc.RoundControl.prototype.setFactor = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 initial_fontes = 6;
 * @return {number}
 */
proto.ipc.RoundControl.prototype.getInitialFontes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.RoundControl} returns this
 */
proto.ipc.RoundControl.prototype.setInitialFontes = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 max_repeats = 7;
 * @return {number}
 */
proto.ipc.RoundControl.prototype.getMaxRepeats = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.RoundControl} returns this
 */
proto.ipc.RoundControl.prototype.setMaxRepeats = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool allow_over_max_repeats = 8;
 * @return {boolean}
 */
proto.ipc.RoundControl.prototype.getAllowOverMaxRepeats = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ipc.RoundControl} returns this
 */
proto.ipc.RoundControl.prototype.setAllowOverMaxRepeats = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional int32 repeat_relative_weight = 9;
 * @return {number}
 */
proto.ipc.RoundControl.prototype.getRepeatRelativeWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.RoundControl} returns this
 */
proto.ipc.RoundControl.prototype.setRepeatRelativeWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 win_difference_relative_weight = 10;
 * @return {number}
 */
proto.ipc.RoundControl.prototype.getWinDifferenceRelativeWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.RoundControl} returns this
 */
proto.ipc.RoundControl.prototype.setWinDifferenceRelativeWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.DivisionControls.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.DivisionControls.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.DivisionControls} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.DivisionControls.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gameRequest: (f = msg.getGameRequest()) && api_proto_ipc_omgwords_pb.GameRequest.toObject(includeInstance, f),
    suspendedResult: jspb.Message.getFieldWithDefault(msg, 4, 0),
    suspendedSpread: jspb.Message.getFieldWithDefault(msg, 5, 0),
    autoStart: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    spreadCap: jspb.Message.getFieldWithDefault(msg, 7, 0),
    gibsonize: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    gibsonSpread: jspb.Message.getFieldWithDefault(msg, 9, 0),
    minimumPlacement: jspb.Message.getFieldWithDefault(msg, 10, 0),
    maximumByePlacement: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.DivisionControls}
 */
proto.ipc.DivisionControls.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.DivisionControls;
  return proto.ipc.DivisionControls.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.DivisionControls} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.DivisionControls}
 */
proto.ipc.DivisionControls.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = new api_proto_ipc_omgwords_pb.GameRequest;
      reader.readMessage(value,api_proto_ipc_omgwords_pb.GameRequest.deserializeBinaryFromReader);
      msg.setGameRequest(value);
      break;
    case 4:
      var value = /** @type {!proto.ipc.TournamentGameResult} */ (reader.readEnum());
      msg.setSuspendedResult(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSuspendedSpread(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoStart(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpreadCap(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGibsonize(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGibsonSpread(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinimumPlacement(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaximumByePlacement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.DivisionControls.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.DivisionControls.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.DivisionControls} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.DivisionControls.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGameRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      api_proto_ipc_omgwords_pb.GameRequest.serializeBinaryToWriter
    );
  }
  f = message.getSuspendedResult();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getSuspendedSpread();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAutoStart();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getSpreadCap();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getGibsonize();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getGibsonSpread();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getMinimumPlacement();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getMaximumByePlacement();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ipc.DivisionControls.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.DivisionControls} returns this
 */
proto.ipc.DivisionControls.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.ipc.DivisionControls.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.DivisionControls} returns this
 */
proto.ipc.DivisionControls.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional GameRequest game_request = 3;
 * @return {?proto.ipc.GameRequest}
 */
proto.ipc.DivisionControls.prototype.getGameRequest = function() {
  return /** @type{?proto.ipc.GameRequest} */ (
    jspb.Message.getWrapperField(this, api_proto_ipc_omgwords_pb.GameRequest, 3));
};


/**
 * @param {?proto.ipc.GameRequest|undefined} value
 * @return {!proto.ipc.DivisionControls} returns this
*/
proto.ipc.DivisionControls.prototype.setGameRequest = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.DivisionControls} returns this
 */
proto.ipc.DivisionControls.prototype.clearGameRequest = function() {
  return this.setGameRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.DivisionControls.prototype.hasGameRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TournamentGameResult suspended_result = 4;
 * @return {!proto.ipc.TournamentGameResult}
 */
proto.ipc.DivisionControls.prototype.getSuspendedResult = function() {
  return /** @type {!proto.ipc.TournamentGameResult} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.ipc.TournamentGameResult} value
 * @return {!proto.ipc.DivisionControls} returns this
 */
proto.ipc.DivisionControls.prototype.setSuspendedResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 suspended_spread = 5;
 * @return {number}
 */
proto.ipc.DivisionControls.prototype.getSuspendedSpread = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.DivisionControls} returns this
 */
proto.ipc.DivisionControls.prototype.setSuspendedSpread = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool auto_start = 6;
 * @return {boolean}
 */
proto.ipc.DivisionControls.prototype.getAutoStart = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ipc.DivisionControls} returns this
 */
proto.ipc.DivisionControls.prototype.setAutoStart = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int32 spread_cap = 7;
 * @return {number}
 */
proto.ipc.DivisionControls.prototype.getSpreadCap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.DivisionControls} returns this
 */
proto.ipc.DivisionControls.prototype.setSpreadCap = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool gibsonize = 8;
 * @return {boolean}
 */
proto.ipc.DivisionControls.prototype.getGibsonize = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ipc.DivisionControls} returns this
 */
proto.ipc.DivisionControls.prototype.setGibsonize = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional int32 gibson_spread = 9;
 * @return {number}
 */
proto.ipc.DivisionControls.prototype.getGibsonSpread = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.DivisionControls} returns this
 */
proto.ipc.DivisionControls.prototype.setGibsonSpread = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 minimum_placement = 10;
 * @return {number}
 */
proto.ipc.DivisionControls.prototype.getMinimumPlacement = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.DivisionControls} returns this
 */
proto.ipc.DivisionControls.prototype.setMinimumPlacement = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 maximum_bye_placement = 11;
 * @return {number}
 */
proto.ipc.DivisionControls.prototype.getMaximumByePlacement = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.DivisionControls} returns this
 */
proto.ipc.DivisionControls.prototype.setMaximumByePlacement = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ipc.TournamentGame.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.TournamentGame.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.TournamentGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.TournamentGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    scoresList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    resultsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    gameEndReason: jspb.Message.getFieldWithDefault(msg, 3, 0),
    id: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.TournamentGame}
 */
proto.ipc.TournamentGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.TournamentGame;
  return proto.ipc.TournamentGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.TournamentGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.TournamentGame}
 */
proto.ipc.TournamentGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addScores(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<!proto.ipc.TournamentGameResult>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addResults(values[i]);
      }
      break;
    case 3:
      var value = /** @type {!proto.ipc.GameEndReason} */ (reader.readEnum());
      msg.setGameEndReason(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.TournamentGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.TournamentGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.TournamentGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScoresList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getGameEndReason();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated int32 scores = 1;
 * @return {!Array<number>}
 */
proto.ipc.TournamentGame.prototype.getScoresList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ipc.TournamentGame} returns this
 */
proto.ipc.TournamentGame.prototype.setScoresList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ipc.TournamentGame} returns this
 */
proto.ipc.TournamentGame.prototype.addScores = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.TournamentGame} returns this
 */
proto.ipc.TournamentGame.prototype.clearScoresList = function() {
  return this.setScoresList([]);
};


/**
 * repeated TournamentGameResult results = 2;
 * @return {!Array<!proto.ipc.TournamentGameResult>}
 */
proto.ipc.TournamentGame.prototype.getResultsList = function() {
  return /** @type {!Array<!proto.ipc.TournamentGameResult>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.ipc.TournamentGameResult>} value
 * @return {!proto.ipc.TournamentGame} returns this
 */
proto.ipc.TournamentGame.prototype.setResultsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.ipc.TournamentGameResult} value
 * @param {number=} opt_index
 * @return {!proto.ipc.TournamentGame} returns this
 */
proto.ipc.TournamentGame.prototype.addResults = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.TournamentGame} returns this
 */
proto.ipc.TournamentGame.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional GameEndReason game_end_reason = 3;
 * @return {!proto.ipc.GameEndReason}
 */
proto.ipc.TournamentGame.prototype.getGameEndReason = function() {
  return /** @type {!proto.ipc.GameEndReason} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ipc.GameEndReason} value
 * @return {!proto.ipc.TournamentGame} returns this
 */
proto.ipc.TournamentGame.prototype.setGameEndReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string id = 4;
 * @return {string}
 */
proto.ipc.TournamentGame.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentGame} returns this
 */
proto.ipc.TournamentGame.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ipc.Pairing.repeatedFields_ = [1,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.Pairing.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.Pairing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.Pairing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.Pairing.toObject = function(includeInstance, msg) {
  var f, obj = {
    playersList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    round: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gamesList: jspb.Message.toObjectList(msg.getGamesList(),
    proto.ipc.TournamentGame.toObject, includeInstance),
    outcomesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    readyStatesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.Pairing}
 */
proto.ipc.Pairing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.Pairing;
  return proto.ipc.Pairing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.Pairing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.Pairing}
 */
proto.ipc.Pairing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPlayers(values[i]);
      }
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 3:
      var value = new proto.ipc.TournamentGame;
      reader.readMessage(value,proto.ipc.TournamentGame.deserializeBinaryFromReader);
      msg.addGames(value);
      break;
    case 4:
      var values = /** @type {!Array<!proto.ipc.TournamentGameResult>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOutcomes(values[i]);
      }
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addReadyStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.Pairing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.Pairing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.Pairing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.Pairing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getGamesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ipc.TournamentGame.serializeBinaryToWriter
    );
  }
  f = message.getOutcomesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getReadyStatesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * repeated int32 players = 1;
 * @return {!Array<number>}
 */
proto.ipc.Pairing.prototype.getPlayersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ipc.Pairing} returns this
 */
proto.ipc.Pairing.prototype.setPlayersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ipc.Pairing} returns this
 */
proto.ipc.Pairing.prototype.addPlayers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.Pairing} returns this
 */
proto.ipc.Pairing.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};


/**
 * optional int32 round = 2;
 * @return {number}
 */
proto.ipc.Pairing.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.Pairing} returns this
 */
proto.ipc.Pairing.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated TournamentGame games = 3;
 * @return {!Array<!proto.ipc.TournamentGame>}
 */
proto.ipc.Pairing.prototype.getGamesList = function() {
  return /** @type{!Array<!proto.ipc.TournamentGame>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ipc.TournamentGame, 3));
};


/**
 * @param {!Array<!proto.ipc.TournamentGame>} value
 * @return {!proto.ipc.Pairing} returns this
*/
proto.ipc.Pairing.prototype.setGamesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ipc.TournamentGame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ipc.TournamentGame}
 */
proto.ipc.Pairing.prototype.addGames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ipc.TournamentGame, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.Pairing} returns this
 */
proto.ipc.Pairing.prototype.clearGamesList = function() {
  return this.setGamesList([]);
};


/**
 * repeated TournamentGameResult outcomes = 4;
 * @return {!Array<!proto.ipc.TournamentGameResult>}
 */
proto.ipc.Pairing.prototype.getOutcomesList = function() {
  return /** @type {!Array<!proto.ipc.TournamentGameResult>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<!proto.ipc.TournamentGameResult>} value
 * @return {!proto.ipc.Pairing} returns this
 */
proto.ipc.Pairing.prototype.setOutcomesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.ipc.TournamentGameResult} value
 * @param {number=} opt_index
 * @return {!proto.ipc.Pairing} returns this
 */
proto.ipc.Pairing.prototype.addOutcomes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.Pairing} returns this
 */
proto.ipc.Pairing.prototype.clearOutcomesList = function() {
  return this.setOutcomesList([]);
};


/**
 * repeated string ready_states = 5;
 * @return {!Array<string>}
 */
proto.ipc.Pairing.prototype.getReadyStatesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ipc.Pairing} returns this
 */
proto.ipc.Pairing.prototype.setReadyStatesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ipc.Pairing} returns this
 */
proto.ipc.Pairing.prototype.addReadyStates = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.Pairing} returns this
 */
proto.ipc.Pairing.prototype.clearReadyStatesList = function() {
  return this.setReadyStatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.PlayerStanding.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.PlayerStanding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.PlayerStanding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.PlayerStanding.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    wins: jspb.Message.getFieldWithDefault(msg, 2, 0),
    losses: jspb.Message.getFieldWithDefault(msg, 3, 0),
    draws: jspb.Message.getFieldWithDefault(msg, 4, 0),
    spread: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gibsonized: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.PlayerStanding}
 */
proto.ipc.PlayerStanding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.PlayerStanding;
  return proto.ipc.PlayerStanding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.PlayerStanding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.PlayerStanding}
 */
proto.ipc.PlayerStanding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWins(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLosses(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDraws(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpread(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGibsonized(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.PlayerStanding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.PlayerStanding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.PlayerStanding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.PlayerStanding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWins();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLosses();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDraws();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSpread();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getGibsonized();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.ipc.PlayerStanding.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.PlayerStanding} returns this
 */
proto.ipc.PlayerStanding.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 wins = 2;
 * @return {number}
 */
proto.ipc.PlayerStanding.prototype.getWins = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.PlayerStanding} returns this
 */
proto.ipc.PlayerStanding.prototype.setWins = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 losses = 3;
 * @return {number}
 */
proto.ipc.PlayerStanding.prototype.getLosses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.PlayerStanding} returns this
 */
proto.ipc.PlayerStanding.prototype.setLosses = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 draws = 4;
 * @return {number}
 */
proto.ipc.PlayerStanding.prototype.getDraws = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.PlayerStanding} returns this
 */
proto.ipc.PlayerStanding.prototype.setDraws = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 spread = 5;
 * @return {number}
 */
proto.ipc.PlayerStanding.prototype.getSpread = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.PlayerStanding} returns this
 */
proto.ipc.PlayerStanding.prototype.setSpread = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool gibsonized = 6;
 * @return {boolean}
 */
proto.ipc.PlayerStanding.prototype.getGibsonized = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ipc.PlayerStanding} returns this
 */
proto.ipc.PlayerStanding.prototype.setGibsonized = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ipc.RoundStandings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.RoundStandings.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.RoundStandings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.RoundStandings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.RoundStandings.toObject = function(includeInstance, msg) {
  var f, obj = {
    standingsList: jspb.Message.toObjectList(msg.getStandingsList(),
    proto.ipc.PlayerStanding.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.RoundStandings}
 */
proto.ipc.RoundStandings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.RoundStandings;
  return proto.ipc.RoundStandings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.RoundStandings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.RoundStandings}
 */
proto.ipc.RoundStandings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ipc.PlayerStanding;
      reader.readMessage(value,proto.ipc.PlayerStanding.deserializeBinaryFromReader);
      msg.addStandings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.RoundStandings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.RoundStandings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.RoundStandings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.RoundStandings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStandingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ipc.PlayerStanding.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlayerStanding standings = 1;
 * @return {!Array<!proto.ipc.PlayerStanding>}
 */
proto.ipc.RoundStandings.prototype.getStandingsList = function() {
  return /** @type{!Array<!proto.ipc.PlayerStanding>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ipc.PlayerStanding, 1));
};


/**
 * @param {!Array<!proto.ipc.PlayerStanding>} value
 * @return {!proto.ipc.RoundStandings} returns this
*/
proto.ipc.RoundStandings.prototype.setStandingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ipc.PlayerStanding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ipc.PlayerStanding}
 */
proto.ipc.RoundStandings.prototype.addStandings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ipc.PlayerStanding, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.RoundStandings} returns this
 */
proto.ipc.RoundStandings.prototype.clearStandingsList = function() {
  return this.setStandingsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ipc.DivisionPairingsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.DivisionPairingsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.DivisionPairingsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.DivisionPairingsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.DivisionPairingsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    divisionPairingsList: jspb.Message.toObjectList(msg.getDivisionPairingsList(),
    proto.ipc.Pairing.toObject, includeInstance),
    divisionStandingsMap: (f = msg.getDivisionStandingsMap()) ? f.toObject(includeInstance, proto.ipc.RoundStandings.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.DivisionPairingsResponse}
 */
proto.ipc.DivisionPairingsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.DivisionPairingsResponse;
  return proto.ipc.DivisionPairingsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.DivisionPairingsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.DivisionPairingsResponse}
 */
proto.ipc.DivisionPairingsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = new proto.ipc.Pairing;
      reader.readMessage(value,proto.ipc.Pairing.deserializeBinaryFromReader);
      msg.addDivisionPairings(value);
      break;
    case 4:
      var value = msg.getDivisionStandingsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.ipc.RoundStandings.deserializeBinaryFromReader, 0, new proto.ipc.RoundStandings());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.DivisionPairingsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.DivisionPairingsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.DivisionPairingsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.DivisionPairingsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDivisionPairingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ipc.Pairing.serializeBinaryToWriter
    );
  }
  f = message.getDivisionStandingsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.ipc.RoundStandings.serializeBinaryToWriter);
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ipc.DivisionPairingsResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.DivisionPairingsResponse} returns this
 */
proto.ipc.DivisionPairingsResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.ipc.DivisionPairingsResponse.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.DivisionPairingsResponse} returns this
 */
proto.ipc.DivisionPairingsResponse.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Pairing division_pairings = 3;
 * @return {!Array<!proto.ipc.Pairing>}
 */
proto.ipc.DivisionPairingsResponse.prototype.getDivisionPairingsList = function() {
  return /** @type{!Array<!proto.ipc.Pairing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ipc.Pairing, 3));
};


/**
 * @param {!Array<!proto.ipc.Pairing>} value
 * @return {!proto.ipc.DivisionPairingsResponse} returns this
*/
proto.ipc.DivisionPairingsResponse.prototype.setDivisionPairingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ipc.Pairing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ipc.Pairing}
 */
proto.ipc.DivisionPairingsResponse.prototype.addDivisionPairings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ipc.Pairing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.DivisionPairingsResponse} returns this
 */
proto.ipc.DivisionPairingsResponse.prototype.clearDivisionPairingsList = function() {
  return this.setDivisionPairingsList([]);
};


/**
 * map<int32, RoundStandings> division_standings = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ipc.RoundStandings>}
 */
proto.ipc.DivisionPairingsResponse.prototype.getDivisionStandingsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ipc.RoundStandings>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.ipc.RoundStandings));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ipc.DivisionPairingsResponse} returns this
 */
proto.ipc.DivisionPairingsResponse.prototype.clearDivisionStandingsMap = function() {
  this.getDivisionStandingsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.DivisionPairingsDeletedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.DivisionPairingsDeletedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.DivisionPairingsDeletedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.DivisionPairingsDeletedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.DivisionPairingsDeletedResponse}
 */
proto.ipc.DivisionPairingsDeletedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.DivisionPairingsDeletedResponse;
  return proto.ipc.DivisionPairingsDeletedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.DivisionPairingsDeletedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.DivisionPairingsDeletedResponse}
 */
proto.ipc.DivisionPairingsDeletedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.DivisionPairingsDeletedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.DivisionPairingsDeletedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.DivisionPairingsDeletedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.DivisionPairingsDeletedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ipc.DivisionPairingsDeletedResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.DivisionPairingsDeletedResponse} returns this
 */
proto.ipc.DivisionPairingsDeletedResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.ipc.DivisionPairingsDeletedResponse.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.DivisionPairingsDeletedResponse} returns this
 */
proto.ipc.DivisionPairingsDeletedResponse.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.ipc.DivisionPairingsDeletedResponse.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.DivisionPairingsDeletedResponse} returns this
 */
proto.ipc.DivisionPairingsDeletedResponse.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ipc.PlayersAddedOrRemovedResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.PlayersAddedOrRemovedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.PlayersAddedOrRemovedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.PlayersAddedOrRemovedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.PlayersAddedOrRemovedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    players: (f = msg.getPlayers()) && proto.ipc.TournamentPersons.toObject(includeInstance, f),
    divisionPairingsList: jspb.Message.toObjectList(msg.getDivisionPairingsList(),
    proto.ipc.Pairing.toObject, includeInstance),
    divisionStandingsMap: (f = msg.getDivisionStandingsMap()) ? f.toObject(includeInstance, proto.ipc.RoundStandings.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.PlayersAddedOrRemovedResponse}
 */
proto.ipc.PlayersAddedOrRemovedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.PlayersAddedOrRemovedResponse;
  return proto.ipc.PlayersAddedOrRemovedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.PlayersAddedOrRemovedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.PlayersAddedOrRemovedResponse}
 */
proto.ipc.PlayersAddedOrRemovedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = new proto.ipc.TournamentPersons;
      reader.readMessage(value,proto.ipc.TournamentPersons.deserializeBinaryFromReader);
      msg.setPlayers(value);
      break;
    case 4:
      var value = new proto.ipc.Pairing;
      reader.readMessage(value,proto.ipc.Pairing.deserializeBinaryFromReader);
      msg.addDivisionPairings(value);
      break;
    case 5:
      var value = msg.getDivisionStandingsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.ipc.RoundStandings.deserializeBinaryFromReader, 0, new proto.ipc.RoundStandings());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.PlayersAddedOrRemovedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.PlayersAddedOrRemovedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.PlayersAddedOrRemovedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.PlayersAddedOrRemovedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayers();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ipc.TournamentPersons.serializeBinaryToWriter
    );
  }
  f = message.getDivisionPairingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ipc.Pairing.serializeBinaryToWriter
    );
  }
  f = message.getDivisionStandingsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.ipc.RoundStandings.serializeBinaryToWriter);
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ipc.PlayersAddedOrRemovedResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.PlayersAddedOrRemovedResponse} returns this
 */
proto.ipc.PlayersAddedOrRemovedResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.ipc.PlayersAddedOrRemovedResponse.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.PlayersAddedOrRemovedResponse} returns this
 */
proto.ipc.PlayersAddedOrRemovedResponse.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TournamentPersons players = 3;
 * @return {?proto.ipc.TournamentPersons}
 */
proto.ipc.PlayersAddedOrRemovedResponse.prototype.getPlayers = function() {
  return /** @type{?proto.ipc.TournamentPersons} */ (
    jspb.Message.getWrapperField(this, proto.ipc.TournamentPersons, 3));
};


/**
 * @param {?proto.ipc.TournamentPersons|undefined} value
 * @return {!proto.ipc.PlayersAddedOrRemovedResponse} returns this
*/
proto.ipc.PlayersAddedOrRemovedResponse.prototype.setPlayers = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.PlayersAddedOrRemovedResponse} returns this
 */
proto.ipc.PlayersAddedOrRemovedResponse.prototype.clearPlayers = function() {
  return this.setPlayers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.PlayersAddedOrRemovedResponse.prototype.hasPlayers = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Pairing division_pairings = 4;
 * @return {!Array<!proto.ipc.Pairing>}
 */
proto.ipc.PlayersAddedOrRemovedResponse.prototype.getDivisionPairingsList = function() {
  return /** @type{!Array<!proto.ipc.Pairing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ipc.Pairing, 4));
};


/**
 * @param {!Array<!proto.ipc.Pairing>} value
 * @return {!proto.ipc.PlayersAddedOrRemovedResponse} returns this
*/
proto.ipc.PlayersAddedOrRemovedResponse.prototype.setDivisionPairingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ipc.Pairing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ipc.Pairing}
 */
proto.ipc.PlayersAddedOrRemovedResponse.prototype.addDivisionPairings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ipc.Pairing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.PlayersAddedOrRemovedResponse} returns this
 */
proto.ipc.PlayersAddedOrRemovedResponse.prototype.clearDivisionPairingsList = function() {
  return this.setDivisionPairingsList([]);
};


/**
 * map<int32, RoundStandings> division_standings = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ipc.RoundStandings>}
 */
proto.ipc.PlayersAddedOrRemovedResponse.prototype.getDivisionStandingsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ipc.RoundStandings>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.ipc.RoundStandings));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ipc.PlayersAddedOrRemovedResponse} returns this
 */
proto.ipc.PlayersAddedOrRemovedResponse.prototype.clearDivisionStandingsMap = function() {
  this.getDivisionStandingsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ipc.DivisionRoundControls.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.DivisionRoundControls.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.DivisionRoundControls.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.DivisionRoundControls} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.DivisionRoundControls.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    roundControlsList: jspb.Message.toObjectList(msg.getRoundControlsList(),
    proto.ipc.RoundControl.toObject, includeInstance),
    divisionPairingsList: jspb.Message.toObjectList(msg.getDivisionPairingsList(),
    proto.ipc.Pairing.toObject, includeInstance),
    divisionStandingsMap: (f = msg.getDivisionStandingsMap()) ? f.toObject(includeInstance, proto.ipc.RoundStandings.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.DivisionRoundControls}
 */
proto.ipc.DivisionRoundControls.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.DivisionRoundControls;
  return proto.ipc.DivisionRoundControls.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.DivisionRoundControls} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.DivisionRoundControls}
 */
proto.ipc.DivisionRoundControls.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = new proto.ipc.RoundControl;
      reader.readMessage(value,proto.ipc.RoundControl.deserializeBinaryFromReader);
      msg.addRoundControls(value);
      break;
    case 4:
      var value = new proto.ipc.Pairing;
      reader.readMessage(value,proto.ipc.Pairing.deserializeBinaryFromReader);
      msg.addDivisionPairings(value);
      break;
    case 5:
      var value = msg.getDivisionStandingsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.ipc.RoundStandings.deserializeBinaryFromReader, 0, new proto.ipc.RoundStandings());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.DivisionRoundControls.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.DivisionRoundControls.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.DivisionRoundControls} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.DivisionRoundControls.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoundControlsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ipc.RoundControl.serializeBinaryToWriter
    );
  }
  f = message.getDivisionPairingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ipc.Pairing.serializeBinaryToWriter
    );
  }
  f = message.getDivisionStandingsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.ipc.RoundStandings.serializeBinaryToWriter);
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ipc.DivisionRoundControls.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.DivisionRoundControls} returns this
 */
proto.ipc.DivisionRoundControls.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.ipc.DivisionRoundControls.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.DivisionRoundControls} returns this
 */
proto.ipc.DivisionRoundControls.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated RoundControl round_controls = 3;
 * @return {!Array<!proto.ipc.RoundControl>}
 */
proto.ipc.DivisionRoundControls.prototype.getRoundControlsList = function() {
  return /** @type{!Array<!proto.ipc.RoundControl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ipc.RoundControl, 3));
};


/**
 * @param {!Array<!proto.ipc.RoundControl>} value
 * @return {!proto.ipc.DivisionRoundControls} returns this
*/
proto.ipc.DivisionRoundControls.prototype.setRoundControlsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ipc.RoundControl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ipc.RoundControl}
 */
proto.ipc.DivisionRoundControls.prototype.addRoundControls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ipc.RoundControl, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.DivisionRoundControls} returns this
 */
proto.ipc.DivisionRoundControls.prototype.clearRoundControlsList = function() {
  return this.setRoundControlsList([]);
};


/**
 * repeated Pairing division_pairings = 4;
 * @return {!Array<!proto.ipc.Pairing>}
 */
proto.ipc.DivisionRoundControls.prototype.getDivisionPairingsList = function() {
  return /** @type{!Array<!proto.ipc.Pairing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ipc.Pairing, 4));
};


/**
 * @param {!Array<!proto.ipc.Pairing>} value
 * @return {!proto.ipc.DivisionRoundControls} returns this
*/
proto.ipc.DivisionRoundControls.prototype.setDivisionPairingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ipc.Pairing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ipc.Pairing}
 */
proto.ipc.DivisionRoundControls.prototype.addDivisionPairings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ipc.Pairing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.DivisionRoundControls} returns this
 */
proto.ipc.DivisionRoundControls.prototype.clearDivisionPairingsList = function() {
  return this.setDivisionPairingsList([]);
};


/**
 * map<int32, RoundStandings> division_standings = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ipc.RoundStandings>}
 */
proto.ipc.DivisionRoundControls.prototype.getDivisionStandingsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ipc.RoundStandings>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.ipc.RoundStandings));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ipc.DivisionRoundControls} returns this
 */
proto.ipc.DivisionRoundControls.prototype.clearDivisionStandingsMap = function() {
  this.getDivisionStandingsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.DivisionControlsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.DivisionControlsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.DivisionControlsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.DivisionControlsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    divisionControls: (f = msg.getDivisionControls()) && proto.ipc.DivisionControls.toObject(includeInstance, f),
    divisionStandingsMap: (f = msg.getDivisionStandingsMap()) ? f.toObject(includeInstance, proto.ipc.RoundStandings.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.DivisionControlsResponse}
 */
proto.ipc.DivisionControlsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.DivisionControlsResponse;
  return proto.ipc.DivisionControlsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.DivisionControlsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.DivisionControlsResponse}
 */
proto.ipc.DivisionControlsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = new proto.ipc.DivisionControls;
      reader.readMessage(value,proto.ipc.DivisionControls.deserializeBinaryFromReader);
      msg.setDivisionControls(value);
      break;
    case 4:
      var value = msg.getDivisionStandingsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.ipc.RoundStandings.deserializeBinaryFromReader, 0, new proto.ipc.RoundStandings());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.DivisionControlsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.DivisionControlsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.DivisionControlsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.DivisionControlsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDivisionControls();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ipc.DivisionControls.serializeBinaryToWriter
    );
  }
  f = message.getDivisionStandingsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.ipc.RoundStandings.serializeBinaryToWriter);
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ipc.DivisionControlsResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.DivisionControlsResponse} returns this
 */
proto.ipc.DivisionControlsResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.ipc.DivisionControlsResponse.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.DivisionControlsResponse} returns this
 */
proto.ipc.DivisionControlsResponse.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional DivisionControls division_controls = 3;
 * @return {?proto.ipc.DivisionControls}
 */
proto.ipc.DivisionControlsResponse.prototype.getDivisionControls = function() {
  return /** @type{?proto.ipc.DivisionControls} */ (
    jspb.Message.getWrapperField(this, proto.ipc.DivisionControls, 3));
};


/**
 * @param {?proto.ipc.DivisionControls|undefined} value
 * @return {!proto.ipc.DivisionControlsResponse} returns this
*/
proto.ipc.DivisionControlsResponse.prototype.setDivisionControls = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.DivisionControlsResponse} returns this
 */
proto.ipc.DivisionControlsResponse.prototype.clearDivisionControls = function() {
  return this.setDivisionControls(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.DivisionControlsResponse.prototype.hasDivisionControls = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<int32, RoundStandings> division_standings = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ipc.RoundStandings>}
 */
proto.ipc.DivisionControlsResponse.prototype.getDivisionStandingsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ipc.RoundStandings>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.ipc.RoundStandings));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ipc.DivisionControlsResponse} returns this
 */
proto.ipc.DivisionControlsResponse.prototype.clearDivisionStandingsMap = function() {
  this.getDivisionStandingsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ipc.TournamentDivisionDataResponse.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.TournamentDivisionDataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.TournamentDivisionDataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.TournamentDivisionDataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentDivisionDataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    players: (f = msg.getPlayers()) && proto.ipc.TournamentPersons.toObject(includeInstance, f),
    standingsMap: (f = msg.getStandingsMap()) ? f.toObject(includeInstance, proto.ipc.RoundStandings.toObject) : [],
    pairingMapMap: (f = msg.getPairingMapMap()) ? f.toObject(includeInstance, proto.ipc.Pairing.toObject) : [],
    controls: (f = msg.getControls()) && proto.ipc.DivisionControls.toObject(includeInstance, f),
    roundControlsList: jspb.Message.toObjectList(msg.getRoundControlsList(),
    proto.ipc.RoundControl.toObject, includeInstance),
    currentRound: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.TournamentDivisionDataResponse}
 */
proto.ipc.TournamentDivisionDataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.TournamentDivisionDataResponse;
  return proto.ipc.TournamentDivisionDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.TournamentDivisionDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.TournamentDivisionDataResponse}
 */
proto.ipc.TournamentDivisionDataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = new proto.ipc.TournamentPersons;
      reader.readMessage(value,proto.ipc.TournamentPersons.deserializeBinaryFromReader);
      msg.setPlayers(value);
      break;
    case 4:
      var value = msg.getStandingsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.ipc.RoundStandings.deserializeBinaryFromReader, 0, new proto.ipc.RoundStandings());
         });
      break;
    case 5:
      var value = msg.getPairingMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ipc.Pairing.deserializeBinaryFromReader, "", new proto.ipc.Pairing());
         });
      break;
    case 6:
      var value = new proto.ipc.DivisionControls;
      reader.readMessage(value,proto.ipc.DivisionControls.deserializeBinaryFromReader);
      msg.setControls(value);
      break;
    case 7:
      var value = new proto.ipc.RoundControl;
      reader.readMessage(value,proto.ipc.RoundControl.deserializeBinaryFromReader);
      msg.addRoundControls(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.TournamentDivisionDataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.TournamentDivisionDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.TournamentDivisionDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentDivisionDataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayers();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ipc.TournamentPersons.serializeBinaryToWriter
    );
  }
  f = message.getStandingsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.ipc.RoundStandings.serializeBinaryToWriter);
  }
  f = message.getPairingMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ipc.Pairing.serializeBinaryToWriter);
  }
  f = message.getControls();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ipc.DivisionControls.serializeBinaryToWriter
    );
  }
  f = message.getRoundControlsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.ipc.RoundControl.serializeBinaryToWriter
    );
  }
  f = message.getCurrentRound();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ipc.TournamentDivisionDataResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentDivisionDataResponse} returns this
 */
proto.ipc.TournamentDivisionDataResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.ipc.TournamentDivisionDataResponse.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentDivisionDataResponse} returns this
 */
proto.ipc.TournamentDivisionDataResponse.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TournamentPersons players = 3;
 * @return {?proto.ipc.TournamentPersons}
 */
proto.ipc.TournamentDivisionDataResponse.prototype.getPlayers = function() {
  return /** @type{?proto.ipc.TournamentPersons} */ (
    jspb.Message.getWrapperField(this, proto.ipc.TournamentPersons, 3));
};


/**
 * @param {?proto.ipc.TournamentPersons|undefined} value
 * @return {!proto.ipc.TournamentDivisionDataResponse} returns this
*/
proto.ipc.TournamentDivisionDataResponse.prototype.setPlayers = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.TournamentDivisionDataResponse} returns this
 */
proto.ipc.TournamentDivisionDataResponse.prototype.clearPlayers = function() {
  return this.setPlayers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.TournamentDivisionDataResponse.prototype.hasPlayers = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<int32, RoundStandings> standings = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ipc.RoundStandings>}
 */
proto.ipc.TournamentDivisionDataResponse.prototype.getStandingsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ipc.RoundStandings>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.ipc.RoundStandings));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ipc.TournamentDivisionDataResponse} returns this
 */
proto.ipc.TournamentDivisionDataResponse.prototype.clearStandingsMap = function() {
  this.getStandingsMap().clear();
  return this;};


/**
 * map<string, Pairing> pairing_map = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ipc.Pairing>}
 */
proto.ipc.TournamentDivisionDataResponse.prototype.getPairingMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ipc.Pairing>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.ipc.Pairing));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ipc.TournamentDivisionDataResponse} returns this
 */
proto.ipc.TournamentDivisionDataResponse.prototype.clearPairingMapMap = function() {
  this.getPairingMapMap().clear();
  return this;};


/**
 * optional DivisionControls controls = 6;
 * @return {?proto.ipc.DivisionControls}
 */
proto.ipc.TournamentDivisionDataResponse.prototype.getControls = function() {
  return /** @type{?proto.ipc.DivisionControls} */ (
    jspb.Message.getWrapperField(this, proto.ipc.DivisionControls, 6));
};


/**
 * @param {?proto.ipc.DivisionControls|undefined} value
 * @return {!proto.ipc.TournamentDivisionDataResponse} returns this
*/
proto.ipc.TournamentDivisionDataResponse.prototype.setControls = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.TournamentDivisionDataResponse} returns this
 */
proto.ipc.TournamentDivisionDataResponse.prototype.clearControls = function() {
  return this.setControls(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.TournamentDivisionDataResponse.prototype.hasControls = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated RoundControl round_controls = 7;
 * @return {!Array<!proto.ipc.RoundControl>}
 */
proto.ipc.TournamentDivisionDataResponse.prototype.getRoundControlsList = function() {
  return /** @type{!Array<!proto.ipc.RoundControl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ipc.RoundControl, 7));
};


/**
 * @param {!Array<!proto.ipc.RoundControl>} value
 * @return {!proto.ipc.TournamentDivisionDataResponse} returns this
*/
proto.ipc.TournamentDivisionDataResponse.prototype.setRoundControlsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ipc.RoundControl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ipc.RoundControl}
 */
proto.ipc.TournamentDivisionDataResponse.prototype.addRoundControls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ipc.RoundControl, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.TournamentDivisionDataResponse} returns this
 */
proto.ipc.TournamentDivisionDataResponse.prototype.clearRoundControlsList = function() {
  return this.setRoundControlsList([]);
};


/**
 * optional int32 current_round = 8;
 * @return {number}
 */
proto.ipc.TournamentDivisionDataResponse.prototype.getCurrentRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.TournamentDivisionDataResponse} returns this
 */
proto.ipc.TournamentDivisionDataResponse.prototype.setCurrentRound = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.FullTournamentDivisions.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.FullTournamentDivisions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.FullTournamentDivisions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.FullTournamentDivisions.toObject = function(includeInstance, msg) {
  var f, obj = {
    divisionsMap: (f = msg.getDivisionsMap()) ? f.toObject(includeInstance, proto.ipc.TournamentDivisionDataResponse.toObject) : [],
    started: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.FullTournamentDivisions}
 */
proto.ipc.FullTournamentDivisions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.FullTournamentDivisions;
  return proto.ipc.FullTournamentDivisions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.FullTournamentDivisions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.FullTournamentDivisions}
 */
proto.ipc.FullTournamentDivisions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getDivisionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ipc.TournamentDivisionDataResponse.deserializeBinaryFromReader, "", new proto.ipc.TournamentDivisionDataResponse());
         });
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStarted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.FullTournamentDivisions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.FullTournamentDivisions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.FullTournamentDivisions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.FullTournamentDivisions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDivisionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ipc.TournamentDivisionDataResponse.serializeBinaryToWriter);
  }
  f = message.getStarted();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * map<string, TournamentDivisionDataResponse> divisions = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ipc.TournamentDivisionDataResponse>}
 */
proto.ipc.FullTournamentDivisions.prototype.getDivisionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ipc.TournamentDivisionDataResponse>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.ipc.TournamentDivisionDataResponse));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ipc.FullTournamentDivisions} returns this
 */
proto.ipc.FullTournamentDivisions.prototype.clearDivisionsMap = function() {
  this.getDivisionsMap().clear();
  return this;};


/**
 * optional bool started = 2;
 * @return {boolean}
 */
proto.ipc.FullTournamentDivisions.prototype.getStarted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ipc.FullTournamentDivisions} returns this
 */
proto.ipc.FullTournamentDivisions.prototype.setStarted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.TournamentFinishedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.TournamentFinishedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.TournamentFinishedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentFinishedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.TournamentFinishedResponse}
 */
proto.ipc.TournamentFinishedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.TournamentFinishedResponse;
  return proto.ipc.TournamentFinishedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.TournamentFinishedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.TournamentFinishedResponse}
 */
proto.ipc.TournamentFinishedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.TournamentFinishedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.TournamentFinishedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.TournamentFinishedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentFinishedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ipc.TournamentFinishedResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentFinishedResponse} returns this
 */
proto.ipc.TournamentFinishedResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.TournamentDataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.TournamentDataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.TournamentDataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentDataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    executiveDirector: jspb.Message.getFieldWithDefault(msg, 4, ""),
    directors: (f = msg.getDirectors()) && proto.ipc.TournamentPersons.toObject(includeInstance, f),
    isStarted: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    startTime: (f = msg.getStartTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.TournamentDataResponse}
 */
proto.ipc.TournamentDataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.TournamentDataResponse;
  return proto.ipc.TournamentDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.TournamentDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.TournamentDataResponse}
 */
proto.ipc.TournamentDataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutiveDirector(value);
      break;
    case 5:
      var value = new proto.ipc.TournamentPersons;
      reader.readMessage(value,proto.ipc.TournamentPersons.deserializeBinaryFromReader);
      msg.setDirectors(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsStarted(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStartTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.TournamentDataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.TournamentDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.TournamentDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentDataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExecutiveDirector();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDirectors();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ipc.TournamentPersons.serializeBinaryToWriter
    );
  }
  f = message.getIsStarted();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getStartTime();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ipc.TournamentDataResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentDataResponse} returns this
 */
proto.ipc.TournamentDataResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ipc.TournamentDataResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentDataResponse} returns this
 */
proto.ipc.TournamentDataResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.ipc.TournamentDataResponse.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentDataResponse} returns this
 */
proto.ipc.TournamentDataResponse.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string executive_director = 4;
 * @return {string}
 */
proto.ipc.TournamentDataResponse.prototype.getExecutiveDirector = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentDataResponse} returns this
 */
proto.ipc.TournamentDataResponse.prototype.setExecutiveDirector = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional TournamentPersons directors = 5;
 * @return {?proto.ipc.TournamentPersons}
 */
proto.ipc.TournamentDataResponse.prototype.getDirectors = function() {
  return /** @type{?proto.ipc.TournamentPersons} */ (
    jspb.Message.getWrapperField(this, proto.ipc.TournamentPersons, 5));
};


/**
 * @param {?proto.ipc.TournamentPersons|undefined} value
 * @return {!proto.ipc.TournamentDataResponse} returns this
*/
proto.ipc.TournamentDataResponse.prototype.setDirectors = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.TournamentDataResponse} returns this
 */
proto.ipc.TournamentDataResponse.prototype.clearDirectors = function() {
  return this.setDirectors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.TournamentDataResponse.prototype.hasDirectors = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool is_started = 6;
 * @return {boolean}
 */
proto.ipc.TournamentDataResponse.prototype.getIsStarted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ipc.TournamentDataResponse} returns this
 */
proto.ipc.TournamentDataResponse.prototype.setIsStarted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional google.protobuf.Timestamp start_time = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ipc.TournamentDataResponse.prototype.getStartTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ipc.TournamentDataResponse} returns this
*/
proto.ipc.TournamentDataResponse.prototype.setStartTime = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.TournamentDataResponse} returns this
 */
proto.ipc.TournamentDataResponse.prototype.clearStartTime = function() {
  return this.setStartTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.TournamentDataResponse.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.TournamentDivisionDeletedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.TournamentDivisionDeletedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.TournamentDivisionDeletedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentDivisionDeletedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.TournamentDivisionDeletedResponse}
 */
proto.ipc.TournamentDivisionDeletedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.TournamentDivisionDeletedResponse;
  return proto.ipc.TournamentDivisionDeletedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.TournamentDivisionDeletedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.TournamentDivisionDeletedResponse}
 */
proto.ipc.TournamentDivisionDeletedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.TournamentDivisionDeletedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.TournamentDivisionDeletedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.TournamentDivisionDeletedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentDivisionDeletedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ipc.TournamentDivisionDeletedResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentDivisionDeletedResponse} returns this
 */
proto.ipc.TournamentDivisionDeletedResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.ipc.TournamentDivisionDeletedResponse.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentDivisionDeletedResponse} returns this
 */
proto.ipc.TournamentDivisionDeletedResponse.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.ipc.TournamentGameResult = {
  NO_RESULT: 0,
  WIN: 1,
  LOSS: 2,
  DRAW: 3,
  BYE: 4,
  FORFEIT_WIN: 5,
  FORFEIT_LOSS: 6,
  ELIMINATED: 7,
  VOID: 8
};

/**
 * @enum {number}
 */
proto.ipc.PairingMethod = {
  RANDOM: 0,
  ROUND_ROBIN: 1,
  KING_OF_THE_HILL: 2,
  ELIMINATION: 3,
  FACTOR: 4,
  INITIAL_FONTES: 5,
  SWISS: 6,
  QUICKPAIR: 7,
  MANUAL: 8,
  TEAM_ROUND_ROBIN: 9
};

/**
 * @enum {number}
 */
proto.ipc.FirstMethod = {
  MANUAL_FIRST: 0,
  RANDOM_FIRST: 1,
  AUTOMATIC_FIRST: 2
};

goog.object.extend(exports, proto.ipc);
