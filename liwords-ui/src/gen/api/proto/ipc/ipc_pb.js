// ipc is used for inter-process communication between the different
// services.
// This package will define many types that the different services should use,
// and should be roughly split up into different files by function.

// @generated by protoc-gen-es v0.2.1
// @generated from file api/proto/ipc/ipc.proto (package ipc, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";

/**
 * In order to make socket messages as small and simple as possible,
 * we should include the message type with the socket message.
 * Whenever we add a new client <-> server socket message type,
 * add it to this list.
 *
 * @generated from enum ipc.MessageType
 */
export const MessageType = proto3.makeEnum(
  "ipc.MessageType",
  [
    {no: 0, name: "SEEK_REQUEST"},
    {no: 1, name: "MATCH_REQUEST"},
    {no: 2, name: "SOUGHT_GAME_PROCESS_EVENT"},
    {no: 3, name: "CLIENT_GAMEPLAY_EVENT"},
    {no: 4, name: "SERVER_GAMEPLAY_EVENT"},
    {no: 5, name: "GAME_ENDED_EVENT"},
    {no: 6, name: "GAME_HISTORY_REFRESHER"},
    {no: 7, name: "ERROR_MESSAGE"},
    {no: 8, name: "NEW_GAME_EVENT"},
    {no: 9, name: "SERVER_CHALLENGE_RESULT_EVENT"},
    {no: 10, name: "SEEK_REQUESTS"},
    {no: 12, name: "ONGOING_GAME_EVENT"},
    {no: 13, name: "TIMED_OUT"},
    {no: 14, name: "ONGOING_GAMES"},
    {no: 15, name: "READY_FOR_TOURNAMENT_GAME"},
    {no: 16, name: "TOURNAMENT_ROUND_STARTED"},
    {no: 17, name: "GAME_DELETION"},
    {no: 18, name: "MATCH_REQUESTS"},
    {no: 19, name: "DECLINE_SEEK_REQUEST"},
    {no: 20, name: "CHAT_MESSAGE"},
    {no: 21, name: "CHAT_MESSAGE_DELETED"},
    {no: 22, name: "USER_PRESENCE"},
    {no: 23, name: "USER_PRESENCES"},
    {no: 24, name: "SERVER_MESSAGE"},
    {no: 25, name: "READY_FOR_GAME"},
    {no: 26, name: "LAG_MEASUREMENT"},
    {no: 27, name: "TOURNAMENT_GAME_ENDED_EVENT"},
    {no: 28, name: "TOURNAMENT_MESSAGE"},
    {no: 29, name: "REMATCH_STARTED"},
    {no: 30, name: "TOURNAMENT_DIVISION_MESSAGE"},
    {no: 31, name: "TOURNAMENT_DIVISION_DELETED_MESSAGE"},
    {no: 32, name: "TOURNAMENT_FULL_DIVISIONS_MESSAGE"},
    {no: 34, name: "TOURNAMENT_DIVISION_ROUND_CONTROLS_MESSAGE"},
    {no: 35, name: "TOURNAMENT_DIVISION_PAIRINGS_MESSAGE"},
    {no: 36, name: "TOURNAMENT_DIVISION_CONTROLS_MESSAGE"},
    {no: 37, name: "TOURNAMENT_DIVISION_PLAYER_CHANGE_MESSAGE"},
    {no: 38, name: "TOURNAMENT_FINISHED_MESSAGE"},
    {no: 39, name: "TOURNAMENT_DIVISION_PAIRINGS_DELETED_MESSAGE"},
    {no: 40, name: "PRESENCE_ENTRY"},
    {no: 41, name: "ACTIVE_GAME_ENTRY"},
    {no: 42, name: "GAME_META_EVENT"},
    {no: 43, name: "PROFILE_UPDATE_EVENT"},
  ],
);

/**
 * @generated from message ipc.RegisterRealmRequest
 */
export const RegisterRealmRequest = proto3.makeMessageType(
  "ipc.RegisterRealmRequest",
  () => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message ipc.RegisterRealmResponse
 */
export const RegisterRealmResponse = proto3.makeMessageType(
  "ipc.RegisterRealmResponse",
  () => [
    { no: 2, name: "realms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * InitRealmInfo is a request for the API server to send back information
 * about that realm back to the user. For example, for the lobby realm,
 * we would like lists of active games, chats, etc; for game realms, we would
 * like the game history.
 *
 * @generated from message ipc.InitRealmInfo
 */
export const InitRealmInfo = proto3.makeMessageType(
  "ipc.InitRealmInfo",
  () => [
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "realms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message ipc.LagMeasurement
 */
export const LagMeasurement = proto3.makeMessageType(
  "ipc.LagMeasurement",
  () => [
    { no: 1, name: "lag_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * @generated from message ipc.Pong
 */
export const Pong = proto3.makeMessageType(
  "ipc.Pong",
  () => [
    { no: 1, name: "ips", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message ipc.ServerMessage
 */
export const ServerMessage = proto3.makeMessageType(
  "ipc.ServerMessage",
  () => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * When we go to a new path in our SPA, we send a JoinPath. When we leave the
 * path, we send an Unjoin realm. d
 *
 * @generated from message ipc.JoinPath
 */
export const JoinPath = proto3.makeMessageType(
  "ipc.JoinPath",
  () => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message ipc.UnjoinRealm
 */
export const UnjoinRealm = proto3.makeMessageType(
  "ipc.UnjoinRealm",
  [],
);

