// source: api/proto/ipc/ipc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var macondo_api_proto_macondo_macondo_pb = require('../../../macondo/api/proto/macondo/macondo_pb.js');
goog.object.extend(proto, macondo_api_proto_macondo_macondo_pb);
goog.exportSymbol('proto.liwords.ClientGameplayEvent', null, global);
goog.exportSymbol('proto.liwords.ClientGameplayEvent.EventType', null, global);
goog.exportSymbol('proto.liwords.GameMode', null, global);
goog.exportSymbol('proto.liwords.GameRequest', null, global);
goog.exportSymbol('proto.liwords.GameRules', null, global);
goog.exportSymbol('proto.liwords.MessageType', null, global);
goog.exportSymbol('proto.liwords.RatingMode', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liwords.ClientGameplayEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liwords.ClientGameplayEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liwords.ClientGameplayEvent.displayName = 'proto.liwords.ClientGameplayEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liwords.GameRules = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liwords.GameRules, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liwords.GameRules.displayName = 'proto.liwords.GameRules';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.liwords.GameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.liwords.GameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.liwords.GameRequest.displayName = 'proto.liwords.GameRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liwords.ClientGameplayEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.liwords.ClientGameplayEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liwords.ClientGameplayEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liwords.ClientGameplayEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    positionCoords: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tiles: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liwords.ClientGameplayEvent}
 */
proto.liwords.ClientGameplayEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liwords.ClientGameplayEvent;
  return proto.liwords.ClientGameplayEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liwords.ClientGameplayEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liwords.ClientGameplayEvent}
 */
proto.liwords.ClientGameplayEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.liwords.ClientGameplayEvent.EventType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPositionCoords(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liwords.ClientGameplayEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liwords.ClientGameplayEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liwords.ClientGameplayEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liwords.ClientGameplayEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPositionCoords();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTiles();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.liwords.ClientGameplayEvent.EventType = {
  TILE_PLACEMENT: 0,
  PASS: 1,
  EXCHANGE: 2,
  CHALLENGE_PLAY: 3,
  RESIGN: 4
};

/**
 * optional EventType type = 1;
 * @return {!proto.liwords.ClientGameplayEvent.EventType}
 */
proto.liwords.ClientGameplayEvent.prototype.getType = function() {
  return /** @type {!proto.liwords.ClientGameplayEvent.EventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.liwords.ClientGameplayEvent.EventType} value
 * @return {!proto.liwords.ClientGameplayEvent} returns this
 */
proto.liwords.ClientGameplayEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string game_id = 2;
 * @return {string}
 */
proto.liwords.ClientGameplayEvent.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.liwords.ClientGameplayEvent} returns this
 */
proto.liwords.ClientGameplayEvent.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string position_coords = 3;
 * @return {string}
 */
proto.liwords.ClientGameplayEvent.prototype.getPositionCoords = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.liwords.ClientGameplayEvent} returns this
 */
proto.liwords.ClientGameplayEvent.prototype.setPositionCoords = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tiles = 4;
 * @return {string}
 */
proto.liwords.ClientGameplayEvent.prototype.getTiles = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.liwords.ClientGameplayEvent} returns this
 */
proto.liwords.ClientGameplayEvent.prototype.setTiles = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liwords.GameRules.prototype.toObject = function(opt_includeInstance) {
  return proto.liwords.GameRules.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liwords.GameRules} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liwords.GameRules.toObject = function(includeInstance, msg) {
  var f, obj = {
    boardLayoutName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    letterDistributionName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    variantName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liwords.GameRules}
 */
proto.liwords.GameRules.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liwords.GameRules;
  return proto.liwords.GameRules.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liwords.GameRules} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liwords.GameRules}
 */
proto.liwords.GameRules.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardLayoutName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLetterDistributionName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariantName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liwords.GameRules.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liwords.GameRules.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liwords.GameRules} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liwords.GameRules.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoardLayoutName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLetterDistributionName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVariantName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string board_layout_name = 1;
 * @return {string}
 */
proto.liwords.GameRules.prototype.getBoardLayoutName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.liwords.GameRules} returns this
 */
proto.liwords.GameRules.prototype.setBoardLayoutName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string letter_distribution_name = 2;
 * @return {string}
 */
proto.liwords.GameRules.prototype.getLetterDistributionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.liwords.GameRules} returns this
 */
proto.liwords.GameRules.prototype.setLetterDistributionName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string variant_name = 3;
 * @return {string}
 */
proto.liwords.GameRules.prototype.getVariantName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.liwords.GameRules} returns this
 */
proto.liwords.GameRules.prototype.setVariantName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.liwords.GameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.liwords.GameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.liwords.GameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liwords.GameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    lexicon: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rules: (f = msg.getRules()) && proto.liwords.GameRules.toObject(includeInstance, f),
    initialTimeSeconds: jspb.Message.getFieldWithDefault(msg, 3, 0),
    incrementSeconds: jspb.Message.getFieldWithDefault(msg, 4, 0),
    challengeRule: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gameMode: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ratingMode: jspb.Message.getFieldWithDefault(msg, 7, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    maxOvertimeMinutes: jspb.Message.getFieldWithDefault(msg, 9, 0),
    playerVsBot: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    originalRequestId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    botType: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.liwords.GameRequest}
 */
proto.liwords.GameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.liwords.GameRequest;
  return proto.liwords.GameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.liwords.GameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.liwords.GameRequest}
 */
proto.liwords.GameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLexicon(value);
      break;
    case 2:
      var value = new proto.liwords.GameRules;
      reader.readMessage(value,proto.liwords.GameRules.deserializeBinaryFromReader);
      msg.setRules(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInitialTimeSeconds(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIncrementSeconds(value);
      break;
    case 5:
      var value = /** @type {!proto.macondo.ChallengeRule} */ (reader.readEnum());
      msg.setChallengeRule(value);
      break;
    case 6:
      var value = /** @type {!proto.liwords.GameMode} */ (reader.readEnum());
      msg.setGameMode(value);
      break;
    case 7:
      var value = /** @type {!proto.liwords.RatingMode} */ (reader.readEnum());
      msg.setRatingMode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxOvertimeMinutes(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPlayerVsBot(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalRequestId(value);
      break;
    case 12:
      var value = /** @type {!proto.macondo.BotRequest.BotCode} */ (reader.readEnum());
      msg.setBotType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.liwords.GameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.liwords.GameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.liwords.GameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.liwords.GameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLexicon();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRules();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.liwords.GameRules.serializeBinaryToWriter
    );
  }
  f = message.getInitialTimeSeconds();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIncrementSeconds();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getChallengeRule();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getGameMode();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getRatingMode();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMaxOvertimeMinutes();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getPlayerVsBot();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getOriginalRequestId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getBotType();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * optional string lexicon = 1;
 * @return {string}
 */
proto.liwords.GameRequest.prototype.getLexicon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.liwords.GameRequest} returns this
 */
proto.liwords.GameRequest.prototype.setLexicon = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional GameRules rules = 2;
 * @return {?proto.liwords.GameRules}
 */
proto.liwords.GameRequest.prototype.getRules = function() {
  return /** @type{?proto.liwords.GameRules} */ (
    jspb.Message.getWrapperField(this, proto.liwords.GameRules, 2));
};


/**
 * @param {?proto.liwords.GameRules|undefined} value
 * @return {!proto.liwords.GameRequest} returns this
*/
proto.liwords.GameRequest.prototype.setRules = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.liwords.GameRequest} returns this
 */
proto.liwords.GameRequest.prototype.clearRules = function() {
  return this.setRules(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.liwords.GameRequest.prototype.hasRules = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 initial_time_seconds = 3;
 * @return {number}
 */
proto.liwords.GameRequest.prototype.getInitialTimeSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.liwords.GameRequest} returns this
 */
proto.liwords.GameRequest.prototype.setInitialTimeSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 increment_seconds = 4;
 * @return {number}
 */
proto.liwords.GameRequest.prototype.getIncrementSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.liwords.GameRequest} returns this
 */
proto.liwords.GameRequest.prototype.setIncrementSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional macondo.ChallengeRule challenge_rule = 5;
 * @return {!proto.macondo.ChallengeRule}
 */
proto.liwords.GameRequest.prototype.getChallengeRule = function() {
  return /** @type {!proto.macondo.ChallengeRule} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.macondo.ChallengeRule} value
 * @return {!proto.liwords.GameRequest} returns this
 */
proto.liwords.GameRequest.prototype.setChallengeRule = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional GameMode game_mode = 6;
 * @return {!proto.liwords.GameMode}
 */
proto.liwords.GameRequest.prototype.getGameMode = function() {
  return /** @type {!proto.liwords.GameMode} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.liwords.GameMode} value
 * @return {!proto.liwords.GameRequest} returns this
 */
proto.liwords.GameRequest.prototype.setGameMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional RatingMode rating_mode = 7;
 * @return {!proto.liwords.RatingMode}
 */
proto.liwords.GameRequest.prototype.getRatingMode = function() {
  return /** @type {!proto.liwords.RatingMode} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.liwords.RatingMode} value
 * @return {!proto.liwords.GameRequest} returns this
 */
proto.liwords.GameRequest.prototype.setRatingMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional string request_id = 8;
 * @return {string}
 */
proto.liwords.GameRequest.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.liwords.GameRequest} returns this
 */
proto.liwords.GameRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 max_overtime_minutes = 9;
 * @return {number}
 */
proto.liwords.GameRequest.prototype.getMaxOvertimeMinutes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.liwords.GameRequest} returns this
 */
proto.liwords.GameRequest.prototype.setMaxOvertimeMinutes = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bool player_vs_bot = 10;
 * @return {boolean}
 */
proto.liwords.GameRequest.prototype.getPlayerVsBot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.liwords.GameRequest} returns this
 */
proto.liwords.GameRequest.prototype.setPlayerVsBot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string original_request_id = 11;
 * @return {string}
 */
proto.liwords.GameRequest.prototype.getOriginalRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.liwords.GameRequest} returns this
 */
proto.liwords.GameRequest.prototype.setOriginalRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional macondo.BotRequest.BotCode bot_type = 12;
 * @return {!proto.macondo.BotRequest.BotCode}
 */
proto.liwords.GameRequest.prototype.getBotType = function() {
  return /** @type {!proto.macondo.BotRequest.BotCode} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.macondo.BotRequest.BotCode} value
 * @return {!proto.liwords.GameRequest} returns this
 */
proto.liwords.GameRequest.prototype.setBotType = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * @enum {number}
 */
proto.liwords.MessageType = {
  SEEK_REQUEST: 0,
  CLIENT_GAMEPLAY_EVENT: 3,
  SERVER_GAMEPLAY_EVENT: 4,
  GAME_ENDED_EVENT: 5,
  GAME_HISTORY_REFRESHER: 6,
  NEW_GAME_EVENT: 8,
  SERVER_CHALLENGE_RESULT_EVENT: 9,
  ONGOING_GAMES: 14,
  READY_FOR_GAME: 25,
  GAME_META_EVENT: 42
};

/**
 * @enum {number}
 */
proto.liwords.GameMode = {
  REAL_TIME: 0,
  CORRESPONDENCE: 1
};

/**
 * @enum {number}
 */
proto.liwords.RatingMode = {
  RATED: 0,
  CASUAL: 1
};

goog.object.extend(exports, proto.liwords);
