// ipc is used for inter-process communication between the different
// services.
// This package will define many types that the different services should use,
// and should be roughly split up into different files by function.

// @generated by protoc-gen-es v0.2.1
// @generated from file api/proto/ipc/ipc.proto (package ipc, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * In order to make socket messages as small and simple as possible,
 * we should include the message type with the socket message.
 * Whenever we add a new client <-> server socket message type,
 * add it to this list.
 *
 * @generated from enum ipc.MessageType
 */
export declare enum MessageType {
  /**
   * @generated from enum value: SEEK_REQUEST = 0;
   */
  SEEK_REQUEST = 0,

  /**
   * @generated from enum value: MATCH_REQUEST = 1;
   */
  MATCH_REQUEST = 1,

  /**
   * @generated from enum value: SOUGHT_GAME_PROCESS_EVENT = 2;
   */
  SOUGHT_GAME_PROCESS_EVENT = 2,

  /**
   * @generated from enum value: CLIENT_GAMEPLAY_EVENT = 3;
   */
  CLIENT_GAMEPLAY_EVENT = 3,

  /**
   * @generated from enum value: SERVER_GAMEPLAY_EVENT = 4;
   */
  SERVER_GAMEPLAY_EVENT = 4,

  /**
   * @generated from enum value: GAME_ENDED_EVENT = 5;
   */
  GAME_ENDED_EVENT = 5,

  /**
   * @generated from enum value: GAME_HISTORY_REFRESHER = 6;
   */
  GAME_HISTORY_REFRESHER = 6,

  /**
   * @generated from enum value: ERROR_MESSAGE = 7;
   */
  ERROR_MESSAGE = 7,

  /**
   * @generated from enum value: NEW_GAME_EVENT = 8;
   */
  NEW_GAME_EVENT = 8,

  /**
   * @generated from enum value: SERVER_CHALLENGE_RESULT_EVENT = 9;
   */
  SERVER_CHALLENGE_RESULT_EVENT = 9,

  /**
   * @generated from enum value: SEEK_REQUESTS = 10;
   */
  SEEK_REQUESTS = 10,

  /**
   * @generated from enum value: ONGOING_GAME_EVENT = 12;
   */
  ONGOING_GAME_EVENT = 12,

  /**
   * @generated from enum value: TIMED_OUT = 13;
   */
  TIMED_OUT = 13,

  /**
   * @generated from enum value: ONGOING_GAMES = 14;
   */
  ONGOING_GAMES = 14,

  /**
   * @generated from enum value: READY_FOR_TOURNAMENT_GAME = 15;
   */
  READY_FOR_TOURNAMENT_GAME = 15,

  /**
   * @generated from enum value: TOURNAMENT_ROUND_STARTED = 16;
   */
  TOURNAMENT_ROUND_STARTED = 16,

  /**
   * @generated from enum value: GAME_DELETION = 17;
   */
  GAME_DELETION = 17,

  /**
   * @generated from enum value: MATCH_REQUESTS = 18;
   */
  MATCH_REQUESTS = 18,

  /**
   * @generated from enum value: DECLINE_SEEK_REQUEST = 19;
   */
  DECLINE_SEEK_REQUEST = 19,

  /**
   * @generated from enum value: CHAT_MESSAGE = 20;
   */
  CHAT_MESSAGE = 20,

  /**
   * @generated from enum value: CHAT_MESSAGE_DELETED = 21;
   */
  CHAT_MESSAGE_DELETED = 21,

  /**
   * @generated from enum value: USER_PRESENCE = 22;
   */
  USER_PRESENCE = 22,

  /**
   * @generated from enum value: USER_PRESENCES = 23;
   */
  USER_PRESENCES = 23,

  /**
   * @generated from enum value: SERVER_MESSAGE = 24;
   */
  SERVER_MESSAGE = 24,

  /**
   * @generated from enum value: READY_FOR_GAME = 25;
   */
  READY_FOR_GAME = 25,

  /**
   * @generated from enum value: LAG_MEASUREMENT = 26;
   */
  LAG_MEASUREMENT = 26,

  /**
   * @generated from enum value: TOURNAMENT_GAME_ENDED_EVENT = 27;
   */
  TOURNAMENT_GAME_ENDED_EVENT = 27,

  /**
   * used for TournamentDataResponse (metadata)
   *
   * @generated from enum value: TOURNAMENT_MESSAGE = 28;
   */
  TOURNAMENT_MESSAGE = 28,

  /**
   * @generated from enum value: REMATCH_STARTED = 29;
   */
  REMATCH_STARTED = 29,

  /**
   * @generated from enum value: TOURNAMENT_DIVISION_MESSAGE = 30;
   */
  TOURNAMENT_DIVISION_MESSAGE = 30,

  /**
   * @generated from enum value: TOURNAMENT_DIVISION_DELETED_MESSAGE = 31;
   */
  TOURNAMENT_DIVISION_DELETED_MESSAGE = 31,

  /**
   * @generated from enum value: TOURNAMENT_FULL_DIVISIONS_MESSAGE = 32;
   */
  TOURNAMENT_FULL_DIVISIONS_MESSAGE = 32,

  /**
   * @generated from enum value: TOURNAMENT_DIVISION_ROUND_CONTROLS_MESSAGE = 34;
   */
  TOURNAMENT_DIVISION_ROUND_CONTROLS_MESSAGE = 34,

  /**
   * @generated from enum value: TOURNAMENT_DIVISION_PAIRINGS_MESSAGE = 35;
   */
  TOURNAMENT_DIVISION_PAIRINGS_MESSAGE = 35,

  /**
   * @generated from enum value: TOURNAMENT_DIVISION_CONTROLS_MESSAGE = 36;
   */
  TOURNAMENT_DIVISION_CONTROLS_MESSAGE = 36,

  /**
   * @generated from enum value: TOURNAMENT_DIVISION_PLAYER_CHANGE_MESSAGE = 37;
   */
  TOURNAMENT_DIVISION_PLAYER_CHANGE_MESSAGE = 37,

  /**
   * @generated from enum value: TOURNAMENT_FINISHED_MESSAGE = 38;
   */
  TOURNAMENT_FINISHED_MESSAGE = 38,

  /**
   * @generated from enum value: TOURNAMENT_DIVISION_PAIRINGS_DELETED_MESSAGE = 39;
   */
  TOURNAMENT_DIVISION_PAIRINGS_DELETED_MESSAGE = 39,

  /**
   * @generated from enum value: PRESENCE_ENTRY = 40;
   */
  PRESENCE_ENTRY = 40,

  /**
   * @generated from enum value: ACTIVE_GAME_ENTRY = 41;
   */
  ACTIVE_GAME_ENTRY = 41,

  /**
   * @generated from enum value: GAME_META_EVENT = 42;
   */
  GAME_META_EVENT = 42,

  /**
   * @generated from enum value: PROFILE_UPDATE_EVENT = 43;
   */
  PROFILE_UPDATE_EVENT = 43,
}

/**
 * @generated from message ipc.RegisterRealmRequest
 */
export declare class RegisterRealmRequest extends Message<RegisterRealmRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string user_id = 2;
   */
  userId: string;

  constructor(data?: PartialMessage<RegisterRealmRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ipc.RegisterRealmRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRealmRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRealmRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRealmRequest;

  static equals(a: RegisterRealmRequest | PlainMessage<RegisterRealmRequest> | undefined, b: RegisterRealmRequest | PlainMessage<RegisterRealmRequest> | undefined): boolean;
}

/**
 * @generated from message ipc.RegisterRealmResponse
 */
export declare class RegisterRealmResponse extends Message<RegisterRealmResponse> {
  /**
   * realm should be made obsolete. RegisterRealmResponse should always
   * return a list of realms.
   *
   * @generated from field: repeated string realms = 2;
   */
  realms: string[];

  constructor(data?: PartialMessage<RegisterRealmResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ipc.RegisterRealmResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRealmResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRealmResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRealmResponse;

  static equals(a: RegisterRealmResponse | PlainMessage<RegisterRealmResponse> | undefined, b: RegisterRealmResponse | PlainMessage<RegisterRealmResponse> | undefined): boolean;
}

/**
 * InitRealmInfo is a request for the API server to send back information
 * about that realm back to the user. For example, for the lobby realm,
 * we would like lists of active games, chats, etc; for game realms, we would
 * like the game history.
 *
 * @generated from message ipc.InitRealmInfo
 */
export declare class InitRealmInfo extends Message<InitRealmInfo> {
  /**
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * @generated from field: repeated string realms = 3;
   */
  realms: string[];

  constructor(data?: PartialMessage<InitRealmInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ipc.InitRealmInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitRealmInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitRealmInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitRealmInfo;

  static equals(a: InitRealmInfo | PlainMessage<InitRealmInfo> | undefined, b: InitRealmInfo | PlainMessage<InitRealmInfo> | undefined): boolean;
}

/**
 * @generated from message ipc.LagMeasurement
 */
export declare class LagMeasurement extends Message<LagMeasurement> {
  /**
   * @generated from field: int32 lag_ms = 1;
   */
  lagMs: number;

  constructor(data?: PartialMessage<LagMeasurement>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ipc.LagMeasurement";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LagMeasurement;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LagMeasurement;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LagMeasurement;

  static equals(a: LagMeasurement | PlainMessage<LagMeasurement> | undefined, b: LagMeasurement | PlainMessage<LagMeasurement> | undefined): boolean;
}

/**
 * @generated from message ipc.Pong
 */
export declare class Pong extends Message<Pong> {
  /**
   * @generated from field: string ips = 1;
   */
  ips: string;

  constructor(data?: PartialMessage<Pong>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ipc.Pong";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pong;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pong;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pong;

  static equals(a: Pong | PlainMessage<Pong> | undefined, b: Pong | PlainMessage<Pong> | undefined): boolean;
}

/**
 * @generated from message ipc.ServerMessage
 */
export declare class ServerMessage extends Message<ServerMessage> {
  /**
   * @generated from field: string message = 1;
   */
  message: string;

  constructor(data?: PartialMessage<ServerMessage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ipc.ServerMessage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerMessage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerMessage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerMessage;

  static equals(a: ServerMessage | PlainMessage<ServerMessage> | undefined, b: ServerMessage | PlainMessage<ServerMessage> | undefined): boolean;
}

/**
 * When we go to a new path in our SPA, we send a JoinPath. When we leave the
 * path, we send an Unjoin realm. d
 *
 * @generated from message ipc.JoinPath
 */
export declare class JoinPath extends Message<JoinPath> {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  constructor(data?: PartialMessage<JoinPath>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ipc.JoinPath";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinPath;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinPath;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinPath;

  static equals(a: JoinPath | PlainMessage<JoinPath> | undefined, b: JoinPath | PlainMessage<JoinPath> | undefined): boolean;
}

/**
 * @generated from message ipc.UnjoinRealm
 */
export declare class UnjoinRealm extends Message<UnjoinRealm> {
  constructor(data?: PartialMessage<UnjoinRealm>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "ipc.UnjoinRealm";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnjoinRealm;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnjoinRealm;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnjoinRealm;

  static equals(a: UnjoinRealm | PlainMessage<UnjoinRealm> | undefined, b: UnjoinRealm | PlainMessage<UnjoinRealm> | undefined): boolean;
}

