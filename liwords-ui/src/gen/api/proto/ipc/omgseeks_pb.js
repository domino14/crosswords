// source: api/proto/ipc/omgseeks.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var api_proto_ipc_omgwords_pb = require('../../../api/proto/ipc/omgwords_pb.js');
goog.object.extend(proto, api_proto_ipc_omgwords_pb);
goog.exportSymbol('proto.ipc.DeclineSeekRequest', null, global);
goog.exportSymbol('proto.ipc.MatchUser', null, global);
goog.exportSymbol('proto.ipc.SeekRequest', null, global);
goog.exportSymbol('proto.ipc.SeekRequests', null, global);
goog.exportSymbol('proto.ipc.SeekState', null, global);
goog.exportSymbol('proto.ipc.SoughtGameProcessEvent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.MatchUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.MatchUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.MatchUser.displayName = 'proto.ipc.MatchUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.SeekRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ipc.SeekRequest.repeatedFields_, null);
};
goog.inherits(proto.ipc.SeekRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.SeekRequest.displayName = 'proto.ipc.SeekRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.SoughtGameProcessEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.SoughtGameProcessEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.SoughtGameProcessEvent.displayName = 'proto.ipc.SoughtGameProcessEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.SeekRequests = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ipc.SeekRequests.repeatedFields_, null);
};
goog.inherits(proto.ipc.SeekRequests, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.SeekRequests.displayName = 'proto.ipc.SeekRequests';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.DeclineSeekRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.DeclineSeekRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.DeclineSeekRequest.displayName = 'proto.ipc.DeclineSeekRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.MatchUser.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.MatchUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.MatchUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.MatchUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    relevantRating: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isAnonymous: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    displayName: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.MatchUser}
 */
proto.ipc.MatchUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.MatchUser;
  return proto.ipc.MatchUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.MatchUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.MatchUser}
 */
proto.ipc.MatchUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelevantRating(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAnonymous(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.MatchUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.MatchUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.MatchUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.MatchUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRelevantRating();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsAnonymous();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.ipc.MatchUser.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.MatchUser} returns this
 */
proto.ipc.MatchUser.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string relevant_rating = 2;
 * @return {string}
 */
proto.ipc.MatchUser.prototype.getRelevantRating = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.MatchUser} returns this
 */
proto.ipc.MatchUser.prototype.setRelevantRating = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_anonymous = 3;
 * @return {boolean}
 */
proto.ipc.MatchUser.prototype.getIsAnonymous = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ipc.MatchUser} returns this
 */
proto.ipc.MatchUser.prototype.setIsAnonymous = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string display_name = 4;
 * @return {string}
 */
proto.ipc.MatchUser.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.MatchUser} returns this
 */
proto.ipc.MatchUser.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ipc.SeekRequest.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.SeekRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.SeekRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.SeekRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.SeekRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameRequest: (f = msg.getGameRequest()) && api_proto_ipc_omgwords_pb.GameRequest.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.ipc.MatchUser.toObject(includeInstance, f),
    minimumRatingRange: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maximumRatingRange: jspb.Message.getFieldWithDefault(msg, 4, 0),
    seekerConnectionId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    receivingUser: (f = msg.getReceivingUser()) && proto.ipc.MatchUser.toObject(includeInstance, f),
    userState: jspb.Message.getFieldWithDefault(msg, 7, 0),
    receiverState: jspb.Message.getFieldWithDefault(msg, 8, 0),
    receiverConnectionId: jspb.Message.getFieldWithDefault(msg, 9, ""),
    bootedReceiversList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    rematchFor: jspb.Message.getFieldWithDefault(msg, 11, ""),
    tournamentId: jspb.Message.getFieldWithDefault(msg, 12, ""),
    receiverIsPermanent: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    ratingKey: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.SeekRequest}
 */
proto.ipc.SeekRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.SeekRequest;
  return proto.ipc.SeekRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.SeekRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.SeekRequest}
 */
proto.ipc.SeekRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new api_proto_ipc_omgwords_pb.GameRequest;
      reader.readMessage(value,api_proto_ipc_omgwords_pb.GameRequest.deserializeBinaryFromReader);
      msg.setGameRequest(value);
      break;
    case 2:
      var value = new proto.ipc.MatchUser;
      reader.readMessage(value,proto.ipc.MatchUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinimumRatingRange(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaximumRatingRange(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeekerConnectionId(value);
      break;
    case 6:
      var value = new proto.ipc.MatchUser;
      reader.readMessage(value,proto.ipc.MatchUser.deserializeBinaryFromReader);
      msg.setReceivingUser(value);
      break;
    case 7:
      var value = /** @type {!proto.ipc.SeekState} */ (reader.readEnum());
      msg.setUserState(value);
      break;
    case 8:
      var value = /** @type {!proto.ipc.SeekState} */ (reader.readEnum());
      msg.setReceiverState(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverConnectionId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addBootedReceivers(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRematchFor(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTournamentId(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReceiverIsPermanent(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setRatingKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.SeekRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.SeekRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.SeekRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.SeekRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      api_proto_ipc_omgwords_pb.GameRequest.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ipc.MatchUser.serializeBinaryToWriter
    );
  }
  f = message.getMinimumRatingRange();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMaximumRatingRange();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSeekerConnectionId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getReceivingUser();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ipc.MatchUser.serializeBinaryToWriter
    );
  }
  f = message.getUserState();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getReceiverState();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getReceiverConnectionId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBootedReceiversList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getRematchFor();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTournamentId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getReceiverIsPermanent();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getRatingKey();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional GameRequest game_request = 1;
 * @return {?proto.ipc.GameRequest}
 */
proto.ipc.SeekRequest.prototype.getGameRequest = function() {
  return /** @type{?proto.ipc.GameRequest} */ (
    jspb.Message.getWrapperField(this, api_proto_ipc_omgwords_pb.GameRequest, 1));
};


/**
 * @param {?proto.ipc.GameRequest|undefined} value
 * @return {!proto.ipc.SeekRequest} returns this
*/
proto.ipc.SeekRequest.prototype.setGameRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.clearGameRequest = function() {
  return this.setGameRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.SeekRequest.prototype.hasGameRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MatchUser user = 2;
 * @return {?proto.ipc.MatchUser}
 */
proto.ipc.SeekRequest.prototype.getUser = function() {
  return /** @type{?proto.ipc.MatchUser} */ (
    jspb.Message.getWrapperField(this, proto.ipc.MatchUser, 2));
};


/**
 * @param {?proto.ipc.MatchUser|undefined} value
 * @return {!proto.ipc.SeekRequest} returns this
*/
proto.ipc.SeekRequest.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.SeekRequest.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 minimum_rating_range = 3;
 * @return {number}
 */
proto.ipc.SeekRequest.prototype.getMinimumRatingRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.setMinimumRatingRange = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 maximum_rating_range = 4;
 * @return {number}
 */
proto.ipc.SeekRequest.prototype.getMaximumRatingRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.setMaximumRatingRange = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string seeker_connection_id = 5;
 * @return {string}
 */
proto.ipc.SeekRequest.prototype.getSeekerConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.setSeekerConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional MatchUser receiving_user = 6;
 * @return {?proto.ipc.MatchUser}
 */
proto.ipc.SeekRequest.prototype.getReceivingUser = function() {
  return /** @type{?proto.ipc.MatchUser} */ (
    jspb.Message.getWrapperField(this, proto.ipc.MatchUser, 6));
};


/**
 * @param {?proto.ipc.MatchUser|undefined} value
 * @return {!proto.ipc.SeekRequest} returns this
*/
proto.ipc.SeekRequest.prototype.setReceivingUser = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.clearReceivingUser = function() {
  return this.setReceivingUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.SeekRequest.prototype.hasReceivingUser = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SeekState user_state = 7;
 * @return {!proto.ipc.SeekState}
 */
proto.ipc.SeekRequest.prototype.getUserState = function() {
  return /** @type {!proto.ipc.SeekState} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.ipc.SeekState} value
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.setUserState = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional SeekState receiver_state = 8;
 * @return {!proto.ipc.SeekState}
 */
proto.ipc.SeekRequest.prototype.getReceiverState = function() {
  return /** @type {!proto.ipc.SeekState} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.ipc.SeekState} value
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.setReceiverState = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string receiver_connection_id = 9;
 * @return {string}
 */
proto.ipc.SeekRequest.prototype.getReceiverConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.setReceiverConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated string booted_receivers = 10;
 * @return {!Array<string>}
 */
proto.ipc.SeekRequest.prototype.getBootedReceiversList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.setBootedReceiversList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.addBootedReceivers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.clearBootedReceiversList = function() {
  return this.setBootedReceiversList([]);
};


/**
 * optional string rematch_for = 11;
 * @return {string}
 */
proto.ipc.SeekRequest.prototype.getRematchFor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.setRematchFor = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string tournament_id = 12;
 * @return {string}
 */
proto.ipc.SeekRequest.prototype.getTournamentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.setTournamentId = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bool receiver_is_permanent = 13;
 * @return {boolean}
 */
proto.ipc.SeekRequest.prototype.getReceiverIsPermanent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.setReceiverIsPermanent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional string rating_key = 14;
 * @return {string}
 */
proto.ipc.SeekRequest.prototype.getRatingKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.SeekRequest} returns this
 */
proto.ipc.SeekRequest.prototype.setRatingKey = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.SoughtGameProcessEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.SoughtGameProcessEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.SoughtGameProcessEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.SoughtGameProcessEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.SoughtGameProcessEvent}
 */
proto.ipc.SoughtGameProcessEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.SoughtGameProcessEvent;
  return proto.ipc.SoughtGameProcessEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.SoughtGameProcessEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.SoughtGameProcessEvent}
 */
proto.ipc.SoughtGameProcessEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.SoughtGameProcessEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.SoughtGameProcessEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.SoughtGameProcessEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.SoughtGameProcessEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.ipc.SoughtGameProcessEvent.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.SoughtGameProcessEvent} returns this
 */
proto.ipc.SoughtGameProcessEvent.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ipc.SeekRequests.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.SeekRequests.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.SeekRequests.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.SeekRequests} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.SeekRequests.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestsList: jspb.Message.toObjectList(msg.getRequestsList(),
    proto.ipc.SeekRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.SeekRequests}
 */
proto.ipc.SeekRequests.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.SeekRequests;
  return proto.ipc.SeekRequests.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.SeekRequests} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.SeekRequests}
 */
proto.ipc.SeekRequests.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ipc.SeekRequest;
      reader.readMessage(value,proto.ipc.SeekRequest.deserializeBinaryFromReader);
      msg.addRequests(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.SeekRequests.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.SeekRequests.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.SeekRequests} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.SeekRequests.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ipc.SeekRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SeekRequest requests = 1;
 * @return {!Array<!proto.ipc.SeekRequest>}
 */
proto.ipc.SeekRequests.prototype.getRequestsList = function() {
  return /** @type{!Array<!proto.ipc.SeekRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ipc.SeekRequest, 1));
};


/**
 * @param {!Array<!proto.ipc.SeekRequest>} value
 * @return {!proto.ipc.SeekRequests} returns this
*/
proto.ipc.SeekRequests.prototype.setRequestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ipc.SeekRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ipc.SeekRequest}
 */
proto.ipc.SeekRequests.prototype.addRequests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ipc.SeekRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.SeekRequests} returns this
 */
proto.ipc.SeekRequests.prototype.clearRequestsList = function() {
  return this.setRequestsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.DeclineSeekRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.DeclineSeekRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.DeclineSeekRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.DeclineSeekRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.DeclineSeekRequest}
 */
proto.ipc.DeclineSeekRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.DeclineSeekRequest;
  return proto.ipc.DeclineSeekRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.DeclineSeekRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.DeclineSeekRequest}
 */
proto.ipc.DeclineSeekRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.DeclineSeekRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.DeclineSeekRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.DeclineSeekRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.DeclineSeekRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.ipc.DeclineSeekRequest.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.DeclineSeekRequest} returns this
 */
proto.ipc.DeclineSeekRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.ipc.SeekState = {
  ABSENT: 0,
  PRESENT: 1,
  READY: 2
};

goog.object.extend(exports, proto.ipc);
