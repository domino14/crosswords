// Definitions for OMGWord seek functionality.

// @generated by protoc-gen-es v0.2.1
// @generated from file api/proto/ipc/omgseeks.proto (package ipc, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";
import {GameRequest} from "./omgwords_pb.js";

/**
 * @generated from enum ipc.SeekState
 */
export const SeekState = proto3.makeEnum(
  "ipc.SeekState",
  [
    {no: 0, name: "ABSENT"},
    {no: 1, name: "PRESENT"},
    {no: 2, name: "READY"},
  ],
);

/**
 * A MatchUser requests or receives a match via a seek or a match request.
 *
 * @generated from message ipc.MatchUser
 */
export const MatchUser = proto3.makeMessageType(
  "ipc.MatchUser",
  () => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "relevant_rating", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_anonymous", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message ipc.SeekRequest
 */
export const SeekRequest = proto3.makeMessageType(
  "ipc.SeekRequest",
  () => [
    { no: 1, name: "game_request", kind: "message", T: GameRequest },
    { no: 2, name: "user", kind: "message", T: MatchUser },
    { no: 3, name: "minimum_rating_range", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "maximum_rating_range", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "seeker_connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "receiving_user", kind: "message", T: MatchUser },
    { no: 7, name: "user_state", kind: "enum", T: proto3.getEnumType(SeekState) },
    { no: 8, name: "receiver_state", kind: "enum", T: proto3.getEnumType(SeekState) },
    { no: 9, name: "receiver_connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "booted_receivers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "rematch_for", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "tournament_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "receiver_is_permanent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "rating_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A SoughtGameProcessEvent gets sent when a match request (or seek request)
 * get accepted (from client to server), or canceled -- when sent from server to
 * client.
 *
 * @generated from message ipc.SoughtGameProcessEvent
 */
export const SoughtGameProcessEvent = proto3.makeMessageType(
  "ipc.SoughtGameProcessEvent",
  () => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * SeekRequests sends all open seek requests.
 *
 * @generated from message ipc.SeekRequests
 */
export const SeekRequests = proto3.makeMessageType(
  "ipc.SeekRequests",
  () => [
    { no: 1, name: "requests", kind: "message", T: SeekRequest, repeated: true },
  ],
);

/**
 * When a Receiver declines a Seeker:
 *
 * @generated from message ipc.DeclineSeekRequest
 */
export const DeclineSeekRequest = proto3.makeMessageType(
  "ipc.DeclineSeekRequest",
  () => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

