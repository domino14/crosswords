// source: api/proto/ipc/omgwords.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var macondo_api_proto_macondo_macondo_pb = require('../../../macondo/api/proto/macondo/macondo_pb.js');
goog.object.extend(proto, macondo_api_proto_macondo_macondo_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.ipc.ActiveGameEntry', null, global);
goog.exportSymbol('proto.ipc.ActiveGamePlayer', null, global);
goog.exportSymbol('proto.ipc.ClientGameplayEvent', null, global);
goog.exportSymbol('proto.ipc.ClientGameplayEvent.EventType', null, global);
goog.exportSymbol('proto.ipc.GameDeletion', null, global);
goog.exportSymbol('proto.ipc.GameEndReason', null, global);
goog.exportSymbol('proto.ipc.GameEndedEvent', null, global);
goog.exportSymbol('proto.ipc.GameHistoryRefresher', null, global);
goog.exportSymbol('proto.ipc.GameMetaEvent', null, global);
goog.exportSymbol('proto.ipc.GameMetaEvent.EventType', null, global);
goog.exportSymbol('proto.ipc.GameMode', null, global);
goog.exportSymbol('proto.ipc.GameRequest', null, global);
goog.exportSymbol('proto.ipc.GameRules', null, global);
goog.exportSymbol('proto.ipc.InstantiateGame', null, global);
goog.exportSymbol('proto.ipc.NewGameEvent', null, global);
goog.exportSymbol('proto.ipc.RatingMode', null, global);
goog.exportSymbol('proto.ipc.ReadyForGame', null, global);
goog.exportSymbol('proto.ipc.RematchStartedEvent', null, global);
goog.exportSymbol('proto.ipc.ServerChallengeResultEvent', null, global);
goog.exportSymbol('proto.ipc.ServerGameplayEvent', null, global);
goog.exportSymbol('proto.ipc.TimedOut', null, global);
goog.exportSymbol('proto.ipc.TournamentDataForGame', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.ClientGameplayEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.ClientGameplayEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.ClientGameplayEvent.displayName = 'proto.ipc.ClientGameplayEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.GameRules = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.GameRules, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.GameRules.displayName = 'proto.ipc.GameRules';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.GameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.GameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.GameRequest.displayName = 'proto.ipc.GameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.GameMetaEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.GameMetaEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.GameMetaEvent.displayName = 'proto.ipc.GameMetaEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.GameHistoryRefresher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.GameHistoryRefresher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.GameHistoryRefresher.displayName = 'proto.ipc.GameHistoryRefresher';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.TournamentDataForGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.TournamentDataForGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.TournamentDataForGame.displayName = 'proto.ipc.TournamentDataForGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.InstantiateGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ipc.InstantiateGame.repeatedFields_, null);
};
goog.inherits(proto.ipc.InstantiateGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.InstantiateGame.displayName = 'proto.ipc.InstantiateGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.GameDeletion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.GameDeletion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.GameDeletion.displayName = 'proto.ipc.GameDeletion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.ActiveGamePlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.ActiveGamePlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.ActiveGamePlayer.displayName = 'proto.ipc.ActiveGamePlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.ActiveGameEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ipc.ActiveGameEntry.repeatedFields_, null);
};
goog.inherits(proto.ipc.ActiveGameEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.ActiveGameEntry.displayName = 'proto.ipc.ActiveGameEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.ReadyForGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.ReadyForGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.ReadyForGame.displayName = 'proto.ipc.ReadyForGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.ServerGameplayEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.ServerGameplayEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.ServerGameplayEvent.displayName = 'proto.ipc.ServerGameplayEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.ServerChallengeResultEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.ServerChallengeResultEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.ServerChallengeResultEvent.displayName = 'proto.ipc.ServerChallengeResultEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.GameEndedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.GameEndedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.GameEndedEvent.displayName = 'proto.ipc.GameEndedEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.RematchStartedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.RematchStartedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.RematchStartedEvent.displayName = 'proto.ipc.RematchStartedEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.NewGameEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.NewGameEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.NewGameEvent.displayName = 'proto.ipc.NewGameEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ipc.TimedOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ipc.TimedOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ipc.TimedOut.displayName = 'proto.ipc.TimedOut';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.ClientGameplayEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.ClientGameplayEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.ClientGameplayEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.ClientGameplayEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    positionCoords: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tiles: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.ClientGameplayEvent}
 */
proto.ipc.ClientGameplayEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.ClientGameplayEvent;
  return proto.ipc.ClientGameplayEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.ClientGameplayEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.ClientGameplayEvent}
 */
proto.ipc.ClientGameplayEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ipc.ClientGameplayEvent.EventType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPositionCoords(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.ClientGameplayEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.ClientGameplayEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.ClientGameplayEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.ClientGameplayEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPositionCoords();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTiles();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ipc.ClientGameplayEvent.EventType = {
  TILE_PLACEMENT: 0,
  PASS: 1,
  EXCHANGE: 2,
  CHALLENGE_PLAY: 3,
  RESIGN: 4
};

/**
 * optional EventType type = 1;
 * @return {!proto.ipc.ClientGameplayEvent.EventType}
 */
proto.ipc.ClientGameplayEvent.prototype.getType = function() {
  return /** @type {!proto.ipc.ClientGameplayEvent.EventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ipc.ClientGameplayEvent.EventType} value
 * @return {!proto.ipc.ClientGameplayEvent} returns this
 */
proto.ipc.ClientGameplayEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string game_id = 2;
 * @return {string}
 */
proto.ipc.ClientGameplayEvent.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ClientGameplayEvent} returns this
 */
proto.ipc.ClientGameplayEvent.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string position_coords = 3;
 * @return {string}
 */
proto.ipc.ClientGameplayEvent.prototype.getPositionCoords = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ClientGameplayEvent} returns this
 */
proto.ipc.ClientGameplayEvent.prototype.setPositionCoords = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tiles = 4;
 * @return {string}
 */
proto.ipc.ClientGameplayEvent.prototype.getTiles = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ClientGameplayEvent} returns this
 */
proto.ipc.ClientGameplayEvent.prototype.setTiles = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.GameRules.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.GameRules.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.GameRules} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.GameRules.toObject = function(includeInstance, msg) {
  var f, obj = {
    boardLayoutName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    letterDistributionName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    variantName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.GameRules}
 */
proto.ipc.GameRules.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.GameRules;
  return proto.ipc.GameRules.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.GameRules} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.GameRules}
 */
proto.ipc.GameRules.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardLayoutName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLetterDistributionName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariantName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.GameRules.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.GameRules.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.GameRules} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.GameRules.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoardLayoutName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLetterDistributionName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVariantName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string board_layout_name = 1;
 * @return {string}
 */
proto.ipc.GameRules.prototype.getBoardLayoutName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.GameRules} returns this
 */
proto.ipc.GameRules.prototype.setBoardLayoutName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string letter_distribution_name = 2;
 * @return {string}
 */
proto.ipc.GameRules.prototype.getLetterDistributionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.GameRules} returns this
 */
proto.ipc.GameRules.prototype.setLetterDistributionName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string variant_name = 3;
 * @return {string}
 */
proto.ipc.GameRules.prototype.getVariantName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.GameRules} returns this
 */
proto.ipc.GameRules.prototype.setVariantName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.GameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.GameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.GameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.GameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    lexicon: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rules: (f = msg.getRules()) && proto.ipc.GameRules.toObject(includeInstance, f),
    initialTimeSeconds: jspb.Message.getFieldWithDefault(msg, 3, 0),
    incrementSeconds: jspb.Message.getFieldWithDefault(msg, 4, 0),
    challengeRule: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gameMode: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ratingMode: jspb.Message.getFieldWithDefault(msg, 7, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    maxOvertimeMinutes: jspb.Message.getFieldWithDefault(msg, 9, 0),
    playerVsBot: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    originalRequestId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    botType: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.GameRequest}
 */
proto.ipc.GameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.GameRequest;
  return proto.ipc.GameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.GameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.GameRequest}
 */
proto.ipc.GameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLexicon(value);
      break;
    case 2:
      var value = new proto.ipc.GameRules;
      reader.readMessage(value,proto.ipc.GameRules.deserializeBinaryFromReader);
      msg.setRules(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInitialTimeSeconds(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIncrementSeconds(value);
      break;
    case 5:
      var value = /** @type {!proto.macondo.ChallengeRule} */ (reader.readEnum());
      msg.setChallengeRule(value);
      break;
    case 6:
      var value = /** @type {!proto.ipc.GameMode} */ (reader.readEnum());
      msg.setGameMode(value);
      break;
    case 7:
      var value = /** @type {!proto.ipc.RatingMode} */ (reader.readEnum());
      msg.setRatingMode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxOvertimeMinutes(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPlayerVsBot(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalRequestId(value);
      break;
    case 12:
      var value = /** @type {!proto.macondo.BotRequest.BotCode} */ (reader.readEnum());
      msg.setBotType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.GameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.GameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.GameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.GameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLexicon();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRules();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ipc.GameRules.serializeBinaryToWriter
    );
  }
  f = message.getInitialTimeSeconds();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIncrementSeconds();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getChallengeRule();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getGameMode();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getRatingMode();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMaxOvertimeMinutes();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getPlayerVsBot();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getOriginalRequestId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getBotType();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * optional string lexicon = 1;
 * @return {string}
 */
proto.ipc.GameRequest.prototype.getLexicon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.GameRequest} returns this
 */
proto.ipc.GameRequest.prototype.setLexicon = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional GameRules rules = 2;
 * @return {?proto.ipc.GameRules}
 */
proto.ipc.GameRequest.prototype.getRules = function() {
  return /** @type{?proto.ipc.GameRules} */ (
    jspb.Message.getWrapperField(this, proto.ipc.GameRules, 2));
};


/**
 * @param {?proto.ipc.GameRules|undefined} value
 * @return {!proto.ipc.GameRequest} returns this
*/
proto.ipc.GameRequest.prototype.setRules = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.GameRequest} returns this
 */
proto.ipc.GameRequest.prototype.clearRules = function() {
  return this.setRules(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.GameRequest.prototype.hasRules = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 initial_time_seconds = 3;
 * @return {number}
 */
proto.ipc.GameRequest.prototype.getInitialTimeSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.GameRequest} returns this
 */
proto.ipc.GameRequest.prototype.setInitialTimeSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 increment_seconds = 4;
 * @return {number}
 */
proto.ipc.GameRequest.prototype.getIncrementSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.GameRequest} returns this
 */
proto.ipc.GameRequest.prototype.setIncrementSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional macondo.ChallengeRule challenge_rule = 5;
 * @return {!proto.macondo.ChallengeRule}
 */
proto.ipc.GameRequest.prototype.getChallengeRule = function() {
  return /** @type {!proto.macondo.ChallengeRule} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.macondo.ChallengeRule} value
 * @return {!proto.ipc.GameRequest} returns this
 */
proto.ipc.GameRequest.prototype.setChallengeRule = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional GameMode game_mode = 6;
 * @return {!proto.ipc.GameMode}
 */
proto.ipc.GameRequest.prototype.getGameMode = function() {
  return /** @type {!proto.ipc.GameMode} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.ipc.GameMode} value
 * @return {!proto.ipc.GameRequest} returns this
 */
proto.ipc.GameRequest.prototype.setGameMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional RatingMode rating_mode = 7;
 * @return {!proto.ipc.RatingMode}
 */
proto.ipc.GameRequest.prototype.getRatingMode = function() {
  return /** @type {!proto.ipc.RatingMode} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.ipc.RatingMode} value
 * @return {!proto.ipc.GameRequest} returns this
 */
proto.ipc.GameRequest.prototype.setRatingMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional string request_id = 8;
 * @return {string}
 */
proto.ipc.GameRequest.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.GameRequest} returns this
 */
proto.ipc.GameRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 max_overtime_minutes = 9;
 * @return {number}
 */
proto.ipc.GameRequest.prototype.getMaxOvertimeMinutes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.GameRequest} returns this
 */
proto.ipc.GameRequest.prototype.setMaxOvertimeMinutes = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bool player_vs_bot = 10;
 * @return {boolean}
 */
proto.ipc.GameRequest.prototype.getPlayerVsBot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ipc.GameRequest} returns this
 */
proto.ipc.GameRequest.prototype.setPlayerVsBot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string original_request_id = 11;
 * @return {string}
 */
proto.ipc.GameRequest.prototype.getOriginalRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.GameRequest} returns this
 */
proto.ipc.GameRequest.prototype.setOriginalRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional macondo.BotRequest.BotCode bot_type = 12;
 * @return {!proto.macondo.BotRequest.BotCode}
 */
proto.ipc.GameRequest.prototype.getBotType = function() {
  return /** @type {!proto.macondo.BotRequest.BotCode} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.macondo.BotRequest.BotCode} value
 * @return {!proto.ipc.GameRequest} returns this
 */
proto.ipc.GameRequest.prototype.setBotType = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.GameMetaEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.GameMetaEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.GameMetaEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.GameMetaEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    origEventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    playerId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gameId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    expiry: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.GameMetaEvent}
 */
proto.ipc.GameMetaEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.GameMetaEvent;
  return proto.ipc.GameMetaEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.GameMetaEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.GameMetaEvent}
 */
proto.ipc.GameMetaEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrigEventId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {!proto.ipc.GameMetaEvent.EventType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpiry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.GameMetaEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.GameMetaEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.GameMetaEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.GameMetaEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrigEventId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getExpiry();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ipc.GameMetaEvent.EventType = {
  REQUEST_ABORT: 0,
  REQUEST_ADJUDICATION: 1,
  REQUEST_UNDO: 2,
  REQUEST_ADJOURN: 3,
  ABORT_ACCEPTED: 4,
  ABORT_DENIED: 5,
  ADJUDICATION_ACCEPTED: 6,
  ADJUDICATION_DENIED: 7,
  UNDO_ACCEPTED: 8,
  UNDO_DENIED: 9,
  ADD_TIME: 10,
  TIMER_EXPIRED: 11
};

/**
 * optional string orig_event_id = 1;
 * @return {string}
 */
proto.ipc.GameMetaEvent.prototype.getOrigEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.GameMetaEvent} returns this
 */
proto.ipc.GameMetaEvent.prototype.setOrigEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ipc.GameMetaEvent.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ipc.GameMetaEvent} returns this
*/
proto.ipc.GameMetaEvent.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.GameMetaEvent} returns this
 */
proto.ipc.GameMetaEvent.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.GameMetaEvent.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EventType type = 3;
 * @return {!proto.ipc.GameMetaEvent.EventType}
 */
proto.ipc.GameMetaEvent.prototype.getType = function() {
  return /** @type {!proto.ipc.GameMetaEvent.EventType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ipc.GameMetaEvent.EventType} value
 * @return {!proto.ipc.GameMetaEvent} returns this
 */
proto.ipc.GameMetaEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string player_id = 4;
 * @return {string}
 */
proto.ipc.GameMetaEvent.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.GameMetaEvent} returns this
 */
proto.ipc.GameMetaEvent.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string game_id = 5;
 * @return {string}
 */
proto.ipc.GameMetaEvent.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.GameMetaEvent} returns this
 */
proto.ipc.GameMetaEvent.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 expiry = 6;
 * @return {number}
 */
proto.ipc.GameMetaEvent.prototype.getExpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.GameMetaEvent} returns this
 */
proto.ipc.GameMetaEvent.prototype.setExpiry = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.GameHistoryRefresher.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.GameHistoryRefresher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.GameHistoryRefresher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.GameHistoryRefresher.toObject = function(includeInstance, msg) {
  var f, obj = {
    history: (f = msg.getHistory()) && macondo_api_proto_macondo_macondo_pb.GameHistory.toObject(includeInstance, f),
    timePlayer1: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timePlayer2: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxOvertimeMinutes: jspb.Message.getFieldWithDefault(msg, 4, 0),
    outstandingEvent: (f = msg.getOutstandingEvent()) && proto.ipc.GameMetaEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.GameHistoryRefresher}
 */
proto.ipc.GameHistoryRefresher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.GameHistoryRefresher;
  return proto.ipc.GameHistoryRefresher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.GameHistoryRefresher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.GameHistoryRefresher}
 */
proto.ipc.GameHistoryRefresher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new macondo_api_proto_macondo_macondo_pb.GameHistory;
      reader.readMessage(value,macondo_api_proto_macondo_macondo_pb.GameHistory.deserializeBinaryFromReader);
      msg.setHistory(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimePlayer1(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimePlayer2(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxOvertimeMinutes(value);
      break;
    case 5:
      var value = new proto.ipc.GameMetaEvent;
      reader.readMessage(value,proto.ipc.GameMetaEvent.deserializeBinaryFromReader);
      msg.setOutstandingEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.GameHistoryRefresher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.GameHistoryRefresher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.GameHistoryRefresher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.GameHistoryRefresher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHistory();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      macondo_api_proto_macondo_macondo_pb.GameHistory.serializeBinaryToWriter
    );
  }
  f = message.getTimePlayer1();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTimePlayer2();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMaxOvertimeMinutes();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOutstandingEvent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ipc.GameMetaEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional macondo.GameHistory history = 1;
 * @return {?proto.macondo.GameHistory}
 */
proto.ipc.GameHistoryRefresher.prototype.getHistory = function() {
  return /** @type{?proto.macondo.GameHistory} */ (
    jspb.Message.getWrapperField(this, macondo_api_proto_macondo_macondo_pb.GameHistory, 1));
};


/**
 * @param {?proto.macondo.GameHistory|undefined} value
 * @return {!proto.ipc.GameHistoryRefresher} returns this
*/
proto.ipc.GameHistoryRefresher.prototype.setHistory = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.GameHistoryRefresher} returns this
 */
proto.ipc.GameHistoryRefresher.prototype.clearHistory = function() {
  return this.setHistory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.GameHistoryRefresher.prototype.hasHistory = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 time_player1 = 2;
 * @return {number}
 */
proto.ipc.GameHistoryRefresher.prototype.getTimePlayer1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.GameHistoryRefresher} returns this
 */
proto.ipc.GameHistoryRefresher.prototype.setTimePlayer1 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 time_player2 = 3;
 * @return {number}
 */
proto.ipc.GameHistoryRefresher.prototype.getTimePlayer2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.GameHistoryRefresher} returns this
 */
proto.ipc.GameHistoryRefresher.prototype.setTimePlayer2 = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 max_overtime_minutes = 4;
 * @return {number}
 */
proto.ipc.GameHistoryRefresher.prototype.getMaxOvertimeMinutes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.GameHistoryRefresher} returns this
 */
proto.ipc.GameHistoryRefresher.prototype.setMaxOvertimeMinutes = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional GameMetaEvent outstanding_event = 5;
 * @return {?proto.ipc.GameMetaEvent}
 */
proto.ipc.GameHistoryRefresher.prototype.getOutstandingEvent = function() {
  return /** @type{?proto.ipc.GameMetaEvent} */ (
    jspb.Message.getWrapperField(this, proto.ipc.GameMetaEvent, 5));
};


/**
 * @param {?proto.ipc.GameMetaEvent|undefined} value
 * @return {!proto.ipc.GameHistoryRefresher} returns this
*/
proto.ipc.GameHistoryRefresher.prototype.setOutstandingEvent = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.GameHistoryRefresher} returns this
 */
proto.ipc.GameHistoryRefresher.prototype.clearOutstandingEvent = function() {
  return this.setOutstandingEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.GameHistoryRefresher.prototype.hasOutstandingEvent = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.TournamentDataForGame.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.TournamentDataForGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.TournamentDataForGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentDataForGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    tid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    gameIndex: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.TournamentDataForGame}
 */
proto.ipc.TournamentDataForGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.TournamentDataForGame;
  return proto.ipc.TournamentDataForGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.TournamentDataForGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.TournamentDataForGame}
 */
proto.ipc.TournamentDataForGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.TournamentDataForGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.TournamentDataForGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.TournamentDataForGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TournamentDataForGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getGameIndex();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string tid = 1;
 * @return {string}
 */
proto.ipc.TournamentDataForGame.prototype.getTid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentDataForGame} returns this
 */
proto.ipc.TournamentDataForGame.prototype.setTid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.ipc.TournamentDataForGame.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TournamentDataForGame} returns this
 */
proto.ipc.TournamentDataForGame.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.ipc.TournamentDataForGame.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.TournamentDataForGame} returns this
 */
proto.ipc.TournamentDataForGame.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 game_index = 4;
 * @return {number}
 */
proto.ipc.TournamentDataForGame.prototype.getGameIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.TournamentDataForGame} returns this
 */
proto.ipc.TournamentDataForGame.prototype.setGameIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ipc.InstantiateGame.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.InstantiateGame.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.InstantiateGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.InstantiateGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.InstantiateGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    userIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    gameRequest: (f = msg.getGameRequest()) && proto.ipc.GameRequest.toObject(includeInstance, f),
    assignedFirst: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tournamentData: (f = msg.getTournamentData()) && proto.ipc.TournamentDataForGame.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.InstantiateGame}
 */
proto.ipc.InstantiateGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.InstantiateGame;
  return proto.ipc.InstantiateGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.InstantiateGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.InstantiateGame}
 */
proto.ipc.InstantiateGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserIds(value);
      break;
    case 2:
      var value = new proto.ipc.GameRequest;
      reader.readMessage(value,proto.ipc.GameRequest.deserializeBinaryFromReader);
      msg.setGameRequest(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAssignedFirst(value);
      break;
    case 4:
      var value = new proto.ipc.TournamentDataForGame;
      reader.readMessage(value,proto.ipc.TournamentDataForGame.deserializeBinaryFromReader);
      msg.setTournamentData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.InstantiateGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.InstantiateGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.InstantiateGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.InstantiateGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getGameRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ipc.GameRequest.serializeBinaryToWriter
    );
  }
  f = message.getAssignedFirst();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTournamentData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ipc.TournamentDataForGame.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string user_ids = 1;
 * @return {!Array<string>}
 */
proto.ipc.InstantiateGame.prototype.getUserIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ipc.InstantiateGame} returns this
 */
proto.ipc.InstantiateGame.prototype.setUserIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ipc.InstantiateGame} returns this
 */
proto.ipc.InstantiateGame.prototype.addUserIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.InstantiateGame} returns this
 */
proto.ipc.InstantiateGame.prototype.clearUserIdsList = function() {
  return this.setUserIdsList([]);
};


/**
 * optional GameRequest game_request = 2;
 * @return {?proto.ipc.GameRequest}
 */
proto.ipc.InstantiateGame.prototype.getGameRequest = function() {
  return /** @type{?proto.ipc.GameRequest} */ (
    jspb.Message.getWrapperField(this, proto.ipc.GameRequest, 2));
};


/**
 * @param {?proto.ipc.GameRequest|undefined} value
 * @return {!proto.ipc.InstantiateGame} returns this
*/
proto.ipc.InstantiateGame.prototype.setGameRequest = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.InstantiateGame} returns this
 */
proto.ipc.InstantiateGame.prototype.clearGameRequest = function() {
  return this.setGameRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.InstantiateGame.prototype.hasGameRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 assigned_first = 3;
 * @return {number}
 */
proto.ipc.InstantiateGame.prototype.getAssignedFirst = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.InstantiateGame} returns this
 */
proto.ipc.InstantiateGame.prototype.setAssignedFirst = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional TournamentDataForGame tournament_data = 4;
 * @return {?proto.ipc.TournamentDataForGame}
 */
proto.ipc.InstantiateGame.prototype.getTournamentData = function() {
  return /** @type{?proto.ipc.TournamentDataForGame} */ (
    jspb.Message.getWrapperField(this, proto.ipc.TournamentDataForGame, 4));
};


/**
 * @param {?proto.ipc.TournamentDataForGame|undefined} value
 * @return {!proto.ipc.InstantiateGame} returns this
*/
proto.ipc.InstantiateGame.prototype.setTournamentData = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.InstantiateGame} returns this
 */
proto.ipc.InstantiateGame.prototype.clearTournamentData = function() {
  return this.setTournamentData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.InstantiateGame.prototype.hasTournamentData = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.GameDeletion.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.GameDeletion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.GameDeletion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.GameDeletion.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.GameDeletion}
 */
proto.ipc.GameDeletion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.GameDeletion;
  return proto.ipc.GameDeletion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.GameDeletion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.GameDeletion}
 */
proto.ipc.GameDeletion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.GameDeletion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.GameDeletion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.GameDeletion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.GameDeletion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ipc.GameDeletion.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.GameDeletion} returns this
 */
proto.ipc.GameDeletion.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.ActiveGamePlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.ActiveGamePlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.ActiveGamePlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.ActiveGamePlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.ActiveGamePlayer}
 */
proto.ipc.ActiveGamePlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.ActiveGamePlayer;
  return proto.ipc.ActiveGamePlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.ActiveGamePlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.ActiveGamePlayer}
 */
proto.ipc.ActiveGamePlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.ActiveGamePlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.ActiveGamePlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.ActiveGamePlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.ActiveGamePlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.ipc.ActiveGamePlayer.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ActiveGamePlayer} returns this
 */
proto.ipc.ActiveGamePlayer.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.ipc.ActiveGamePlayer.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ActiveGamePlayer} returns this
 */
proto.ipc.ActiveGamePlayer.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ipc.ActiveGameEntry.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.ActiveGameEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.ActiveGameEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.ActiveGameEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.ActiveGameEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerList: jspb.Message.toObjectList(msg.getPlayerList(),
    proto.ipc.ActiveGamePlayer.toObject, includeInstance),
    ttl: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.ActiveGameEntry}
 */
proto.ipc.ActiveGameEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.ActiveGameEntry;
  return proto.ipc.ActiveGameEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.ActiveGameEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.ActiveGameEntry}
 */
proto.ipc.ActiveGameEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.ipc.ActiveGamePlayer;
      reader.readMessage(value,proto.ipc.ActiveGamePlayer.deserializeBinaryFromReader);
      msg.addPlayer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTtl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.ActiveGameEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.ActiveGameEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.ActiveGameEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.ActiveGameEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ipc.ActiveGamePlayer.serializeBinaryToWriter
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ipc.ActiveGameEntry.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ActiveGameEntry} returns this
 */
proto.ipc.ActiveGameEntry.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ActiveGamePlayer player = 2;
 * @return {!Array<!proto.ipc.ActiveGamePlayer>}
 */
proto.ipc.ActiveGameEntry.prototype.getPlayerList = function() {
  return /** @type{!Array<!proto.ipc.ActiveGamePlayer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ipc.ActiveGamePlayer, 2));
};


/**
 * @param {!Array<!proto.ipc.ActiveGamePlayer>} value
 * @return {!proto.ipc.ActiveGameEntry} returns this
*/
proto.ipc.ActiveGameEntry.prototype.setPlayerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ipc.ActiveGamePlayer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ipc.ActiveGamePlayer}
 */
proto.ipc.ActiveGameEntry.prototype.addPlayer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ipc.ActiveGamePlayer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ipc.ActiveGameEntry} returns this
 */
proto.ipc.ActiveGameEntry.prototype.clearPlayerList = function() {
  return this.setPlayerList([]);
};


/**
 * optional int64 ttl = 3;
 * @return {number}
 */
proto.ipc.ActiveGameEntry.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.ActiveGameEntry} returns this
 */
proto.ipc.ActiveGameEntry.prototype.setTtl = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.ReadyForGame.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.ReadyForGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.ReadyForGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.ReadyForGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.ReadyForGame}
 */
proto.ipc.ReadyForGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.ReadyForGame;
  return proto.ipc.ReadyForGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.ReadyForGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.ReadyForGame}
 */
proto.ipc.ReadyForGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.ReadyForGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.ReadyForGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.ReadyForGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.ReadyForGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.ipc.ReadyForGame.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ReadyForGame} returns this
 */
proto.ipc.ReadyForGame.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.ServerGameplayEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.ServerGameplayEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.ServerGameplayEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.ServerGameplayEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && macondo_api_proto_macondo_macondo_pb.GameEvent.toObject(includeInstance, f),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    newRack: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timeRemaining: jspb.Message.getFieldWithDefault(msg, 4, 0),
    playing: jspb.Message.getFieldWithDefault(msg, 5, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.ServerGameplayEvent}
 */
proto.ipc.ServerGameplayEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.ServerGameplayEvent;
  return proto.ipc.ServerGameplayEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.ServerGameplayEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.ServerGameplayEvent}
 */
proto.ipc.ServerGameplayEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new macondo_api_proto_macondo_macondo_pb.GameEvent;
      reader.readMessage(value,macondo_api_proto_macondo_macondo_pb.GameEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewRack(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeRemaining(value);
      break;
    case 5:
      var value = /** @type {!proto.macondo.PlayState} */ (reader.readEnum());
      msg.setPlaying(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.ServerGameplayEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.ServerGameplayEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.ServerGameplayEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.ServerGameplayEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      macondo_api_proto_macondo_macondo_pb.GameEvent.serializeBinaryToWriter
    );
  }
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNewRack();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimeRemaining();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPlaying();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional macondo.GameEvent event = 1;
 * @return {?proto.macondo.GameEvent}
 */
proto.ipc.ServerGameplayEvent.prototype.getEvent = function() {
  return /** @type{?proto.macondo.GameEvent} */ (
    jspb.Message.getWrapperField(this, macondo_api_proto_macondo_macondo_pb.GameEvent, 1));
};


/**
 * @param {?proto.macondo.GameEvent|undefined} value
 * @return {!proto.ipc.ServerGameplayEvent} returns this
*/
proto.ipc.ServerGameplayEvent.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.ServerGameplayEvent} returns this
 */
proto.ipc.ServerGameplayEvent.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.ServerGameplayEvent.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string game_id = 2;
 * @return {string}
 */
proto.ipc.ServerGameplayEvent.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ServerGameplayEvent} returns this
 */
proto.ipc.ServerGameplayEvent.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string new_rack = 3;
 * @return {string}
 */
proto.ipc.ServerGameplayEvent.prototype.getNewRack = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ServerGameplayEvent} returns this
 */
proto.ipc.ServerGameplayEvent.prototype.setNewRack = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 time_remaining = 4;
 * @return {number}
 */
proto.ipc.ServerGameplayEvent.prototype.getTimeRemaining = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.ServerGameplayEvent} returns this
 */
proto.ipc.ServerGameplayEvent.prototype.setTimeRemaining = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional macondo.PlayState playing = 5;
 * @return {!proto.macondo.PlayState}
 */
proto.ipc.ServerGameplayEvent.prototype.getPlaying = function() {
  return /** @type {!proto.macondo.PlayState} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.macondo.PlayState} value
 * @return {!proto.ipc.ServerGameplayEvent} returns this
 */
proto.ipc.ServerGameplayEvent.prototype.setPlaying = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string user_id = 6;
 * @return {string}
 */
proto.ipc.ServerGameplayEvent.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ServerGameplayEvent} returns this
 */
proto.ipc.ServerGameplayEvent.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.ServerChallengeResultEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.ServerChallengeResultEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.ServerChallengeResultEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.ServerChallengeResultEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    valid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    challenger: jspb.Message.getFieldWithDefault(msg, 2, ""),
    challengeRule: jspb.Message.getFieldWithDefault(msg, 3, 0),
    returnedTiles: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.ServerChallengeResultEvent}
 */
proto.ipc.ServerChallengeResultEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.ServerChallengeResultEvent;
  return proto.ipc.ServerChallengeResultEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.ServerChallengeResultEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.ServerChallengeResultEvent}
 */
proto.ipc.ServerChallengeResultEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChallenger(value);
      break;
    case 3:
      var value = /** @type {!proto.macondo.ChallengeRule} */ (reader.readEnum());
      msg.setChallengeRule(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReturnedTiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.ServerChallengeResultEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.ServerChallengeResultEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.ServerChallengeResultEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.ServerChallengeResultEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getChallenger();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChallengeRule();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getReturnedTiles();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool valid = 1;
 * @return {boolean}
 */
proto.ipc.ServerChallengeResultEvent.prototype.getValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ipc.ServerChallengeResultEvent} returns this
 */
proto.ipc.ServerChallengeResultEvent.prototype.setValid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string challenger = 2;
 * @return {string}
 */
proto.ipc.ServerChallengeResultEvent.prototype.getChallenger = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ServerChallengeResultEvent} returns this
 */
proto.ipc.ServerChallengeResultEvent.prototype.setChallenger = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional macondo.ChallengeRule challenge_rule = 3;
 * @return {!proto.macondo.ChallengeRule}
 */
proto.ipc.ServerChallengeResultEvent.prototype.getChallengeRule = function() {
  return /** @type {!proto.macondo.ChallengeRule} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.macondo.ChallengeRule} value
 * @return {!proto.ipc.ServerChallengeResultEvent} returns this
 */
proto.ipc.ServerChallengeResultEvent.prototype.setChallengeRule = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string returned_tiles = 4;
 * @return {string}
 */
proto.ipc.ServerChallengeResultEvent.prototype.getReturnedTiles = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.ServerChallengeResultEvent} returns this
 */
proto.ipc.ServerChallengeResultEvent.prototype.setReturnedTiles = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.GameEndedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.GameEndedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.GameEndedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.GameEndedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    scoresMap: (f = msg.getScoresMap()) ? f.toObject(includeInstance, undefined) : [],
    newRatingsMap: (f = msg.getNewRatingsMap()) ? f.toObject(includeInstance, undefined) : [],
    endReason: jspb.Message.getFieldWithDefault(msg, 3, 0),
    winner: jspb.Message.getFieldWithDefault(msg, 4, ""),
    loser: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tie: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    time: jspb.Message.getFieldWithDefault(msg, 7, 0),
    ratingDeltasMap: (f = msg.getRatingDeltasMap()) ? f.toObject(includeInstance, undefined) : [],
    history: (f = msg.getHistory()) && macondo_api_proto_macondo_macondo_pb.GameHistory.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.GameEndedEvent}
 */
proto.ipc.GameEndedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.GameEndedEvent;
  return proto.ipc.GameEndedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.GameEndedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.GameEndedEvent}
 */
proto.ipc.GameEndedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getScoresMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 2:
      var value = msg.getNewRatingsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 3:
      var value = /** @type {!proto.ipc.GameEndReason} */ (reader.readEnum());
      msg.setEndReason(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWinner(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoser(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTie(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 8:
      var value = msg.getRatingDeltasMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 9:
      var value = new macondo_api_proto_macondo_macondo_pb.GameHistory;
      reader.readMessage(value,macondo_api_proto_macondo_macondo_pb.GameHistory.deserializeBinaryFromReader);
      msg.setHistory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.GameEndedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.GameEndedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.GameEndedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.GameEndedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScoresMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getNewRatingsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getEndReason();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getWinner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLoser();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTie();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getRatingDeltasMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getHistory();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      macondo_api_proto_macondo_macondo_pb.GameHistory.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, int32> scores = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.ipc.GameEndedEvent.prototype.getScoresMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ipc.GameEndedEvent} returns this
 */
proto.ipc.GameEndedEvent.prototype.clearScoresMap = function() {
  this.getScoresMap().clear();
  return this;};


/**
 * map<string, int32> new_ratings = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.ipc.GameEndedEvent.prototype.getNewRatingsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ipc.GameEndedEvent} returns this
 */
proto.ipc.GameEndedEvent.prototype.clearNewRatingsMap = function() {
  this.getNewRatingsMap().clear();
  return this;};


/**
 * optional GameEndReason end_reason = 3;
 * @return {!proto.ipc.GameEndReason}
 */
proto.ipc.GameEndedEvent.prototype.getEndReason = function() {
  return /** @type {!proto.ipc.GameEndReason} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ipc.GameEndReason} value
 * @return {!proto.ipc.GameEndedEvent} returns this
 */
proto.ipc.GameEndedEvent.prototype.setEndReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string winner = 4;
 * @return {string}
 */
proto.ipc.GameEndedEvent.prototype.getWinner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.GameEndedEvent} returns this
 */
proto.ipc.GameEndedEvent.prototype.setWinner = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string loser = 5;
 * @return {string}
 */
proto.ipc.GameEndedEvent.prototype.getLoser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.GameEndedEvent} returns this
 */
proto.ipc.GameEndedEvent.prototype.setLoser = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool tie = 6;
 * @return {boolean}
 */
proto.ipc.GameEndedEvent.prototype.getTie = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ipc.GameEndedEvent} returns this
 */
proto.ipc.GameEndedEvent.prototype.setTie = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int64 time = 7;
 * @return {number}
 */
proto.ipc.GameEndedEvent.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ipc.GameEndedEvent} returns this
 */
proto.ipc.GameEndedEvent.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * map<string, int32> rating_deltas = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.ipc.GameEndedEvent.prototype.getRatingDeltasMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ipc.GameEndedEvent} returns this
 */
proto.ipc.GameEndedEvent.prototype.clearRatingDeltasMap = function() {
  this.getRatingDeltasMap().clear();
  return this;};


/**
 * optional macondo.GameHistory history = 9;
 * @return {?proto.macondo.GameHistory}
 */
proto.ipc.GameEndedEvent.prototype.getHistory = function() {
  return /** @type{?proto.macondo.GameHistory} */ (
    jspb.Message.getWrapperField(this, macondo_api_proto_macondo_macondo_pb.GameHistory, 9));
};


/**
 * @param {?proto.macondo.GameHistory|undefined} value
 * @return {!proto.ipc.GameEndedEvent} returns this
*/
proto.ipc.GameEndedEvent.prototype.setHistory = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ipc.GameEndedEvent} returns this
 */
proto.ipc.GameEndedEvent.prototype.clearHistory = function() {
  return this.setHistory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ipc.GameEndedEvent.prototype.hasHistory = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.RematchStartedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.RematchStartedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.RematchStartedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.RematchStartedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    rematchGameId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.RematchStartedEvent}
 */
proto.ipc.RematchStartedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.RematchStartedEvent;
  return proto.ipc.RematchStartedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.RematchStartedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.RematchStartedEvent}
 */
proto.ipc.RematchStartedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRematchGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.RematchStartedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.RematchStartedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.RematchStartedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.RematchStartedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRematchGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string rematch_game_id = 1;
 * @return {string}
 */
proto.ipc.RematchStartedEvent.prototype.getRematchGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.RematchStartedEvent} returns this
 */
proto.ipc.RematchStartedEvent.prototype.setRematchGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.NewGameEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.NewGameEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.NewGameEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.NewGameEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requesterCid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accepterCid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.NewGameEvent}
 */
proto.ipc.NewGameEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.NewGameEvent;
  return proto.ipc.NewGameEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.NewGameEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.NewGameEvent}
 */
proto.ipc.NewGameEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesterCid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccepterCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.NewGameEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.NewGameEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.NewGameEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.NewGameEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequesterCid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccepterCid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.ipc.NewGameEvent.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.NewGameEvent} returns this
 */
proto.ipc.NewGameEvent.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string requester_cid = 2;
 * @return {string}
 */
proto.ipc.NewGameEvent.prototype.getRequesterCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.NewGameEvent} returns this
 */
proto.ipc.NewGameEvent.prototype.setRequesterCid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string accepter_cid = 3;
 * @return {string}
 */
proto.ipc.NewGameEvent.prototype.getAccepterCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.NewGameEvent} returns this
 */
proto.ipc.NewGameEvent.prototype.setAccepterCid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ipc.TimedOut.prototype.toObject = function(opt_includeInstance) {
  return proto.ipc.TimedOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ipc.TimedOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TimedOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ipc.TimedOut}
 */
proto.ipc.TimedOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ipc.TimedOut;
  return proto.ipc.TimedOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ipc.TimedOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ipc.TimedOut}
 */
proto.ipc.TimedOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ipc.TimedOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ipc.TimedOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ipc.TimedOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ipc.TimedOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.ipc.TimedOut.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TimedOut} returns this
 */
proto.ipc.TimedOut.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.ipc.TimedOut.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ipc.TimedOut} returns this
 */
proto.ipc.TimedOut.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.ipc.GameEndReason = {
  NONE: 0,
  TIME: 1,
  STANDARD: 2,
  CONSECUTIVE_ZEROES: 3,
  RESIGNED: 4,
  ABORTED: 5,
  TRIPLE_CHALLENGE: 6,
  CANCELLED: 7,
  FORCE_FORFEIT: 8
};

/**
 * @enum {number}
 */
proto.ipc.GameMode = {
  REAL_TIME: 0,
  CORRESPONDENCE: 1
};

/**
 * @enum {number}
 */
proto.ipc.RatingMode = {
  RATED: 0,
  CASUAL: 1
};

goog.object.extend(exports, proto.ipc);
