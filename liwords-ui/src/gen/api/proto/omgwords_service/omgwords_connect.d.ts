// @generated by protoc-gen-connect-es v1.4.0
// @generated from file proto/omgwords_service/omgwords.proto (package omgwords_service, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AnnotatedGameEvent, BroadcastGamePrivacy, BroadcastGamesResponse, CGPResponse, CreateBroadcastGameRequest, CreateBroadcastGameResponse, DeleteBroadcastGameRequest, DeleteBroadcastGameResponse, GameEventResponse, GetCGPRequest, GetGameDocumentRequest, GetGamesForEditorRequest, GetMyUnfinishedGamesRequest, GetRecentAnnotatedGamesRequest, ImportGCGRequest, ImportGCGResponse, PatchDocumentRequest, ReplaceDocumentRequest, SetRacksEvent } from "./omgwords_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { GameDocument } from "../ipc/omgwords_pb.js";

/**
 * GameEventService will handle our game event API. We can connect bots to
 * this API, or use it for sandbox mode, or for live annotations, etc.
 *
 * @generated from service omgwords_service.GameEventService
 */
export declare const GameEventService: {
  readonly typeName: "omgwords_service.GameEventService",
  readonly methods: {
    /**
     * CreateBroadcastGame will create a game for Woogles broadcast
     *
     * @generated from rpc omgwords_service.GameEventService.CreateBroadcastGame
     */
    readonly createBroadcastGame: {
      readonly name: "CreateBroadcastGame",
      readonly I: typeof CreateBroadcastGameRequest,
      readonly O: typeof CreateBroadcastGameResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DeleteBroadcastGame deletes a Woogles annotated game.
     *
     * @generated from rpc omgwords_service.GameEventService.DeleteBroadcastGame
     */
    readonly deleteBroadcastGame: {
      readonly name: "DeleteBroadcastGame",
      readonly I: typeof DeleteBroadcastGameRequest,
      readonly O: typeof DeleteBroadcastGameResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * SendGameEvent is how one sends game events to the Woogles API.
     *
     * @generated from rpc omgwords_service.GameEventService.SendGameEvent
     */
    readonly sendGameEvent: {
      readonly name: "SendGameEvent",
      readonly I: typeof AnnotatedGameEvent,
      readonly O: typeof GameEventResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * SetRacks sets the rack for the players of the game.
     *
     * @generated from rpc omgwords_service.GameEventService.SetRacks
     */
    readonly setRacks: {
      readonly name: "SetRacks",
      readonly I: typeof SetRacksEvent,
      readonly O: typeof GameEventResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc omgwords_service.GameEventService.ReplaceGameDocument
     */
    readonly replaceGameDocument: {
      readonly name: "ReplaceGameDocument",
      readonly I: typeof ReplaceDocumentRequest,
      readonly O: typeof GameEventResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * PatchGameDocument merges in the passed-in GameDocument with what's on the
     * server. The passed-in GameDocument should be a partial document
     *
     * @generated from rpc omgwords_service.GameEventService.PatchGameDocument
     */
    readonly patchGameDocument: {
      readonly name: "PatchGameDocument",
      readonly I: typeof PatchDocumentRequest,
      readonly O: typeof GameEventResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc omgwords_service.GameEventService.SetBroadcastGamePrivacy
     */
    readonly setBroadcastGamePrivacy: {
      readonly name: "SetBroadcastGamePrivacy",
      readonly I: typeof BroadcastGamePrivacy,
      readonly O: typeof GameEventResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc omgwords_service.GameEventService.GetGamesForEditor
     */
    readonly getGamesForEditor: {
      readonly name: "GetGamesForEditor",
      readonly I: typeof GetGamesForEditorRequest,
      readonly O: typeof BroadcastGamesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc omgwords_service.GameEventService.GetMyUnfinishedGames
     */
    readonly getMyUnfinishedGames: {
      readonly name: "GetMyUnfinishedGames",
      readonly I: typeof GetMyUnfinishedGamesRequest,
      readonly O: typeof BroadcastGamesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetGameDocument fetches the latest GameDocument for the passed-in ID.
     *
     * @generated from rpc omgwords_service.GameEventService.GetGameDocument
     */
    readonly getGameDocument: {
      readonly name: "GetGameDocument",
      readonly I: typeof GetGameDocumentRequest,
      readonly O: typeof GameDocument,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc omgwords_service.GameEventService.GetRecentAnnotatedGames
     */
    readonly getRecentAnnotatedGames: {
      readonly name: "GetRecentAnnotatedGames",
      readonly I: typeof GetRecentAnnotatedGamesRequest,
      readonly O: typeof BroadcastGamesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc omgwords_service.GameEventService.GetCGP
     */
    readonly getCGP: {
      readonly name: "GetCGP",
      readonly I: typeof GetCGPRequest,
      readonly O: typeof CGPResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc omgwords_service.GameEventService.ImportGCG
     */
    readonly importGCG: {
      readonly name: "ImportGCG",
      readonly I: typeof ImportGCGRequest,
      readonly O: typeof ImportGCGResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

