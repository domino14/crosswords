// @generated by protoc-gen-es v0.2.1
// @generated from file api/proto/tournament_service/tournament_service.proto (package tournament_service, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3, Timestamp} from "@bufbuild/protobuf";
import {GameEndReason, GameRequest} from "../ipc/omgwords_pb.js";
import {RoundControl, TournamentGameEndedEvent, TournamentGameResult} from "../ipc/tournament_pb.js";

/**
 * @generated from enum tournament_service.TType
 */
export const TType = proto3.makeEnum(
  "tournament_service.TType",
  [
    {no: 0, name: "STANDARD"},
    {no: 1, name: "CLUB"},
    {no: 2, name: "CHILD"},
    {no: 3, name: "LEGACY"},
  ],
);

/**
 * @generated from message tournament_service.StartRoundRequest
 */
export const StartRoundRequest = proto3.makeMessageType(
  "tournament_service.StartRoundRequest",
  () => [
    { no: 1, name: "tournament_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * @generated from message tournament_service.NewTournamentRequest
 */
export const NewTournamentRequest = proto3.makeMessageType(
  "tournament_service.NewTournamentRequest",
  () => [
    { no: 1, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "director_usernames", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "type", kind: "enum", T: proto3.getEnumType(TType) },
  ],
);

/**
 * @generated from message tournament_service.TournamentMetadata
 */
export const TournamentMetadata = proto3.makeMessageType(
  "tournament_service.TournamentMetadata",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type", kind: "enum", T: proto3.getEnumType(TType) },
    { no: 6, name: "disclaimer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "tile_style", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "board_style", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "default_club_settings", kind: "message", T: GameRequest },
    { no: 10, name: "freeform_club_setting_fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "logo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "color", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "private_analysis", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "irl_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message tournament_service.SetTournamentMetadataRequest
 */
export const SetTournamentMetadataRequest = proto3.makeMessageType(
  "tournament_service.SetTournamentMetadataRequest",
  () => [
    { no: 1, name: "metadata", kind: "message", T: TournamentMetadata },
    { no: 2, name: "set_only_specified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message tournament_service.SingleRoundControlsRequest
 */
export const SingleRoundControlsRequest = proto3.makeMessageType(
  "tournament_service.SingleRoundControlsRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "round_controls", kind: "message", T: RoundControl },
  ],
);

/**
 * @generated from message tournament_service.PairRoundRequest
 */
export const PairRoundRequest = proto3.makeMessageType(
  "tournament_service.PairRoundRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "preserve_byes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "delete_pairings", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message tournament_service.TournamentDivisionRequest
 */
export const TournamentDivisionRequest = proto3.makeMessageType(
  "tournament_service.TournamentDivisionRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message tournament_service.TournamentPairingRequest
 */
export const TournamentPairingRequest = proto3.makeMessageType(
  "tournament_service.TournamentPairingRequest",
  () => [
    { no: 1, name: "player_one_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "player_two_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "self_play_result", kind: "enum", T: proto3.getEnumType(TournamentGameResult) },
  ],
);

/**
 * @generated from message tournament_service.TournamentPairingsRequest
 */
export const TournamentPairingsRequest = proto3.makeMessageType(
  "tournament_service.TournamentPairingsRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pairings", kind: "message", T: TournamentPairingRequest, repeated: true },
  ],
);

/**
 * TournamentResultOverrideRequest is sent when a score needs to be edited
 * or added by a director. Note that player one and player two need to be
 * the players that went first and second, respectively; otherwise,
 * we will not be able to accurately track firsts/seconds.
 *
 * @generated from message tournament_service.TournamentResultOverrideRequest
 */
export const TournamentResultOverrideRequest = proto3.makeMessageType(
  "tournament_service.TournamentResultOverrideRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "player_one_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "player_two_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "player_one_score", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "player_two_score", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "player_one_result", kind: "enum", T: proto3.getEnumType(TournamentGameResult) },
    { no: 9, name: "player_two_result", kind: "enum", T: proto3.getEnumType(TournamentGameResult) },
    { no: 10, name: "game_end_reason", kind: "enum", T: proto3.getEnumType(GameEndReason) },
    { no: 11, name: "amendment", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "game_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * @generated from message tournament_service.TournamentStartRoundCountdownRequest
 */
export const TournamentStartRoundCountdownRequest = proto3.makeMessageType(
  "tournament_service.TournamentStartRoundCountdownRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "division", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "start_all_rounds", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message tournament_service.TournamentResponse
 */
export const TournamentResponse = proto3.makeMessageType(
  "tournament_service.TournamentResponse",
  [],
);

/**
 * @generated from message tournament_service.NewTournamentResponse
 */
export const NewTournamentResponse = proto3.makeMessageType(
  "tournament_service.NewTournamentResponse",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message tournament_service.GetTournamentMetadataRequest
 */
export const GetTournamentMetadataRequest = proto3.makeMessageType(
  "tournament_service.GetTournamentMetadataRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message tournament_service.GetTournamentRequest
 */
export const GetTournamentRequest = proto3.makeMessageType(
  "tournament_service.GetTournamentRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message tournament_service.FinishTournamentRequest
 */
export const FinishTournamentRequest = proto3.makeMessageType(
  "tournament_service.FinishTournamentRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message tournament_service.TournamentMetadataResponse
 */
export const TournamentMetadataResponse = proto3.makeMessageType(
  "tournament_service.TournamentMetadataResponse",
  () => [
    { no: 1, name: "metadata", kind: "message", T: TournamentMetadata },
    { no: 2, name: "directors", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message tournament_service.RecentGamesRequest
 */
export const RecentGamesRequest = proto3.makeMessageType(
  "tournament_service.RecentGamesRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "num_games", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * @generated from message tournament_service.RecentGamesResponse
 */
export const RecentGamesResponse = proto3.makeMessageType(
  "tournament_service.RecentGamesResponse",
  () => [
    { no: 1, name: "games", kind: "message", T: TournamentGameEndedEvent, repeated: true },
  ],
);

/**
 * @generated from message tournament_service.UnstartTournamentRequest
 */
export const UnstartTournamentRequest = proto3.makeMessageType(
  "tournament_service.UnstartTournamentRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message tournament_service.UncheckInRequest
 */
export const UncheckInRequest = proto3.makeMessageType(
  "tournament_service.UncheckInRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message tournament_service.CheckinRequest
 */
export const CheckinRequest = proto3.makeMessageType(
  "tournament_service.CheckinRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message tournament_service.ExportTournamentRequest
 */
export const ExportTournamentRequest = proto3.makeMessageType(
  "tournament_service.ExportTournamentRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "format", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message tournament_service.ExportTournamentResponse
 */
export const ExportTournamentResponse = proto3.makeMessageType(
  "tournament_service.ExportTournamentResponse",
  () => [
    { no: 1, name: "exported", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message tournament_service.NewClubSessionRequest
 */
export const NewClubSessionRequest = proto3.makeMessageType(
  "tournament_service.NewClubSessionRequest",
  () => [
    { no: 1, name: "date", kind: "message", T: Timestamp },
    { no: 2, name: "club_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message tournament_service.ClubSessionResponse
 */
export const ClubSessionResponse = proto3.makeMessageType(
  "tournament_service.ClubSessionResponse",
  () => [
    { no: 1, name: "tournament_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message tournament_service.RecentClubSessionsRequest
 */
export const RecentClubSessionsRequest = proto3.makeMessageType(
  "tournament_service.RecentClubSessionsRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * @generated from message tournament_service.ClubSessionsResponse
 */
export const ClubSessionsResponse = proto3.makeMessageType(
  "tournament_service.ClubSessionsResponse",
  () => [
    { no: 1, name: "sessions", kind: "message", T: ClubSessionResponse, repeated: true },
  ],
);

