// source: macondo/api/proto/macondo/macondo.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.macondo.BotRequest', null, global);
goog.exportSymbol('proto.macondo.BotResponse', null, global);
goog.exportSymbol('proto.macondo.BotResponse.ResponseCase', null, global);
goog.exportSymbol('proto.macondo.ChallengeRule', null, global);
goog.exportSymbol('proto.macondo.GameEvent', null, global);
goog.exportSymbol('proto.macondo.GameEvent.Direction', null, global);
goog.exportSymbol('proto.macondo.GameEvent.Type', null, global);
goog.exportSymbol('proto.macondo.GameHistory', null, global);
goog.exportSymbol('proto.macondo.PlayState', null, global);
goog.exportSymbol('proto.macondo.PlayerInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.macondo.GameHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.macondo.GameHistory.repeatedFields_, null);
};
goog.inherits(proto.macondo.GameHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.macondo.GameHistory.displayName = 'proto.macondo.GameHistory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.macondo.GameEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.macondo.GameEvent.repeatedFields_, null);
};
goog.inherits(proto.macondo.GameEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.macondo.GameEvent.displayName = 'proto.macondo.GameEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.macondo.PlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.macondo.PlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.macondo.PlayerInfo.displayName = 'proto.macondo.PlayerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.macondo.BotRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.macondo.BotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.macondo.BotRequest.displayName = 'proto.macondo.BotRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.macondo.BotResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.macondo.BotResponse.oneofGroups_);
};
goog.inherits(proto.macondo.BotResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.macondo.BotResponse.displayName = 'proto.macondo.BotResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.macondo.GameHistory.repeatedFields_ = [1,2,10,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.macondo.GameHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.macondo.GameHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.macondo.GameHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.macondo.GameHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.macondo.GameEvent.toObject, includeInstance),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.macondo.PlayerInfo.toObject, includeInstance),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0),
    originalGcg: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lexicon: jspb.Message.getFieldWithDefault(msg, 5, ""),
    idAuth: jspb.Message.getFieldWithDefault(msg, 6, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    title: jspb.Message.getFieldWithDefault(msg, 8, ""),
    description: jspb.Message.getFieldWithDefault(msg, 9, ""),
    lastKnownRacksList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    secondWentFirst: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    challengeRule: jspb.Message.getFieldWithDefault(msg, 12, 0),
    playState: jspb.Message.getFieldWithDefault(msg, 13, 0),
    finalScoresList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    variant: jspb.Message.getFieldWithDefault(msg, 15, ""),
    winner: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.macondo.GameHistory}
 */
proto.macondo.GameHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.macondo.GameHistory;
  return proto.macondo.GameHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.macondo.GameHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.macondo.GameHistory}
 */
proto.macondo.GameHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.macondo.GameEvent;
      reader.readMessage(value,proto.macondo.GameEvent.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 2:
      var value = new proto.macondo.PlayerInfo;
      reader.readMessage(value,proto.macondo.PlayerInfo.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalGcg(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLexicon(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdAuth(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addLastKnownRacks(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSecondWentFirst(value);
      break;
    case 12:
      var value = /** @type {!proto.macondo.ChallengeRule} */ (reader.readEnum());
      msg.setChallengeRule(value);
      break;
    case 13:
      var value = /** @type {!proto.macondo.PlayState} */ (reader.readEnum());
      msg.setPlayState(value);
      break;
    case 14:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addFinalScores(values[i]);
      }
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariant(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWinner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.macondo.GameHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.macondo.GameHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.macondo.GameHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.macondo.GameHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.macondo.GameEvent.serializeBinaryToWriter
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.macondo.PlayerInfo.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOriginalGcg();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLexicon();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIdAuth();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getLastKnownRacksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getSecondWentFirst();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getChallengeRule();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getPlayState();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getFinalScoresList();
  if (f.length > 0) {
    writer.writePackedInt32(
      14,
      f
    );
  }
  f = message.getVariant();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getWinner();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
};


/**
 * repeated GameEvent events = 1;
 * @return {!Array<!proto.macondo.GameEvent>}
 */
proto.macondo.GameHistory.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.macondo.GameEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.macondo.GameEvent, 1));
};


/**
 * @param {!Array<!proto.macondo.GameEvent>} value
 * @return {!proto.macondo.GameHistory} returns this
*/
proto.macondo.GameHistory.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.macondo.GameEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.macondo.GameEvent}
 */
proto.macondo.GameHistory.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.macondo.GameEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


/**
 * repeated PlayerInfo players = 2;
 * @return {!Array<!proto.macondo.PlayerInfo>}
 */
proto.macondo.GameHistory.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.macondo.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.macondo.PlayerInfo, 2));
};


/**
 * @param {!Array<!proto.macondo.PlayerInfo>} value
 * @return {!proto.macondo.GameHistory} returns this
*/
proto.macondo.GameHistory.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.macondo.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.macondo.PlayerInfo}
 */
proto.macondo.GameHistory.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.macondo.PlayerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};


/**
 * optional int32 version = 3;
 * @return {number}
 */
proto.macondo.GameHistory.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string original_gcg = 4;
 * @return {string}
 */
proto.macondo.GameHistory.prototype.getOriginalGcg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.setOriginalGcg = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string lexicon = 5;
 * @return {string}
 */
proto.macondo.GameHistory.prototype.getLexicon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.setLexicon = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string id_auth = 6;
 * @return {string}
 */
proto.macondo.GameHistory.prototype.getIdAuth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.setIdAuth = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string uid = 7;
 * @return {string}
 */
proto.macondo.GameHistory.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string title = 8;
 * @return {string}
 */
proto.macondo.GameHistory.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string description = 9;
 * @return {string}
 */
proto.macondo.GameHistory.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated string last_known_racks = 10;
 * @return {!Array<string>}
 */
proto.macondo.GameHistory.prototype.getLastKnownRacksList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.setLastKnownRacksList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.addLastKnownRacks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.clearLastKnownRacksList = function() {
  return this.setLastKnownRacksList([]);
};


/**
 * optional bool second_went_first = 11;
 * @return {boolean}
 */
proto.macondo.GameHistory.prototype.getSecondWentFirst = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.setSecondWentFirst = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional ChallengeRule challenge_rule = 12;
 * @return {!proto.macondo.ChallengeRule}
 */
proto.macondo.GameHistory.prototype.getChallengeRule = function() {
  return /** @type {!proto.macondo.ChallengeRule} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.macondo.ChallengeRule} value
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.setChallengeRule = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional PlayState play_state = 13;
 * @return {!proto.macondo.PlayState}
 */
proto.macondo.GameHistory.prototype.getPlayState = function() {
  return /** @type {!proto.macondo.PlayState} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.macondo.PlayState} value
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.setPlayState = function(value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * repeated int32 final_scores = 14;
 * @return {!Array<number>}
 */
proto.macondo.GameHistory.prototype.getFinalScoresList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.setFinalScoresList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.addFinalScores = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.clearFinalScoresList = function() {
  return this.setFinalScoresList([]);
};


/**
 * optional string variant = 15;
 * @return {string}
 */
proto.macondo.GameHistory.prototype.getVariant = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.setVariant = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional int32 winner = 16;
 * @return {number}
 */
proto.macondo.GameHistory.prototype.getWinner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.macondo.GameHistory} returns this
 */
proto.macondo.GameHistory.prototype.setWinner = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.macondo.GameEvent.repeatedFields_ = [17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.macondo.GameEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.macondo.GameEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.macondo.GameEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.macondo.GameEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    nickname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    note: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rack: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cumulative: jspb.Message.getFieldWithDefault(msg, 5, 0),
    row: jspb.Message.getFieldWithDefault(msg, 6, 0),
    column: jspb.Message.getFieldWithDefault(msg, 7, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 8, 0),
    position: jspb.Message.getFieldWithDefault(msg, 9, ""),
    playedTiles: jspb.Message.getFieldWithDefault(msg, 10, ""),
    exchanged: jspb.Message.getFieldWithDefault(msg, 11, ""),
    score: jspb.Message.getFieldWithDefault(msg, 12, 0),
    bonus: jspb.Message.getFieldWithDefault(msg, 13, 0),
    endRackPoints: jspb.Message.getFieldWithDefault(msg, 14, 0),
    lostScore: jspb.Message.getFieldWithDefault(msg, 15, 0),
    isBingo: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    wordsFormedList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f,
    millisRemaining: jspb.Message.getFieldWithDefault(msg, 18, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.macondo.GameEvent}
 */
proto.macondo.GameEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.macondo.GameEvent;
  return proto.macondo.GameEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.macondo.GameEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.macondo.GameEvent}
 */
proto.macondo.GameEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRack(value);
      break;
    case 4:
      var value = /** @type {!proto.macondo.GameEvent.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCumulative(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRow(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColumn(value);
      break;
    case 8:
      var value = /** @type {!proto.macondo.GameEvent.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayedTiles(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchanged(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBonus(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndRackPoints(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLostScore(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBingo(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.addWordsFormed(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMillisRemaining(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.macondo.GameEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.macondo.GameEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.macondo.GameEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.macondo.GameEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRack();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCumulative();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getRow();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getColumn();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getPosition();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPlayedTiles();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getExchanged();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getBonus();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getEndRackPoints();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getLostScore();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getIsBingo();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getWordsFormedList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      17,
      f
    );
  }
  f = message.getMillisRemaining();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.macondo.GameEvent.Type = {
  TILE_PLACEMENT_MOVE: 0,
  PHONY_TILES_RETURNED: 1,
  PASS: 2,
  CHALLENGE_BONUS: 3,
  EXCHANGE: 4,
  END_RACK_PTS: 5,
  TIME_PENALTY: 6,
  END_RACK_PENALTY: 7,
  UNSUCCESSFUL_CHALLENGE_TURN_LOSS: 8,
  CHALLENGE: 9
};

/**
 * @enum {number}
 */
proto.macondo.GameEvent.Direction = {
  HORIZONTAL: 0,
  VERTICAL: 1
};

/**
 * optional string nickname = 1;
 * @return {string}
 */
proto.macondo.GameEvent.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.macondo.GameEvent.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string rack = 3;
 * @return {string}
 */
proto.macondo.GameEvent.prototype.getRack = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setRack = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Type type = 4;
 * @return {!proto.macondo.GameEvent.Type}
 */
proto.macondo.GameEvent.prototype.getType = function() {
  return /** @type {!proto.macondo.GameEvent.Type} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.macondo.GameEvent.Type} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 cumulative = 5;
 * @return {number}
 */
proto.macondo.GameEvent.prototype.getCumulative = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setCumulative = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 row = 6;
 * @return {number}
 */
proto.macondo.GameEvent.prototype.getRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setRow = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 column = 7;
 * @return {number}
 */
proto.macondo.GameEvent.prototype.getColumn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setColumn = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Direction direction = 8;
 * @return {!proto.macondo.GameEvent.Direction}
 */
proto.macondo.GameEvent.prototype.getDirection = function() {
  return /** @type {!proto.macondo.GameEvent.Direction} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.macondo.GameEvent.Direction} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string position = 9;
 * @return {string}
 */
proto.macondo.GameEvent.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setPosition = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string played_tiles = 10;
 * @return {string}
 */
proto.macondo.GameEvent.prototype.getPlayedTiles = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setPlayedTiles = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string exchanged = 11;
 * @return {string}
 */
proto.macondo.GameEvent.prototype.getExchanged = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setExchanged = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 score = 12;
 * @return {number}
 */
proto.macondo.GameEvent.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 bonus = 13;
 * @return {number}
 */
proto.macondo.GameEvent.prototype.getBonus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setBonus = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 end_rack_points = 14;
 * @return {number}
 */
proto.macondo.GameEvent.prototype.getEndRackPoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setEndRackPoints = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 lost_score = 15;
 * @return {number}
 */
proto.macondo.GameEvent.prototype.getLostScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setLostScore = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bool is_bingo = 16;
 * @return {boolean}
 */
proto.macondo.GameEvent.prototype.getIsBingo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setIsBingo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * repeated string words_formed = 17;
 * @return {!Array<string>}
 */
proto.macondo.GameEvent.prototype.getWordsFormedList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 17));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setWordsFormedList = function(value) {
  return jspb.Message.setField(this, 17, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.addWordsFormed = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 17, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.clearWordsFormedList = function() {
  return this.setWordsFormedList([]);
};


/**
 * optional int32 millis_remaining = 18;
 * @return {number}
 */
proto.macondo.GameEvent.prototype.getMillisRemaining = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.macondo.GameEvent} returns this
 */
proto.macondo.GameEvent.prototype.setMillisRemaining = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.macondo.PlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.macondo.PlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.macondo.PlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.macondo.PlayerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    nickname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    realName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.macondo.PlayerInfo}
 */
proto.macondo.PlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.macondo.PlayerInfo;
  return proto.macondo.PlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.macondo.PlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.macondo.PlayerInfo}
 */
proto.macondo.PlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.macondo.PlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.macondo.PlayerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.macondo.PlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.macondo.PlayerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRealName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string nickname = 1;
 * @return {string}
 */
proto.macondo.PlayerInfo.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.PlayerInfo} returns this
 */
proto.macondo.PlayerInfo.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string real_name = 2;
 * @return {string}
 */
proto.macondo.PlayerInfo.prototype.getRealName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.PlayerInfo} returns this
 */
proto.macondo.PlayerInfo.prototype.setRealName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.macondo.PlayerInfo.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.PlayerInfo} returns this
 */
proto.macondo.PlayerInfo.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.macondo.BotRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.macondo.BotRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.macondo.BotRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.macondo.BotRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameHistory: (f = msg.getGameHistory()) && proto.macondo.GameHistory.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.macondo.BotRequest}
 */
proto.macondo.BotRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.macondo.BotRequest;
  return proto.macondo.BotRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.macondo.BotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.macondo.BotRequest}
 */
proto.macondo.BotRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.macondo.GameHistory;
      reader.readMessage(value,proto.macondo.GameHistory.deserializeBinaryFromReader);
      msg.setGameHistory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.macondo.BotRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.macondo.BotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.macondo.BotRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.macondo.BotRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameHistory();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.macondo.GameHistory.serializeBinaryToWriter
    );
  }
};


/**
 * optional GameHistory game_history = 1;
 * @return {?proto.macondo.GameHistory}
 */
proto.macondo.BotRequest.prototype.getGameHistory = function() {
  return /** @type{?proto.macondo.GameHistory} */ (
    jspb.Message.getWrapperField(this, proto.macondo.GameHistory, 1));
};


/**
 * @param {?proto.macondo.GameHistory|undefined} value
 * @return {!proto.macondo.BotRequest} returns this
*/
proto.macondo.BotRequest.prototype.setGameHistory = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.macondo.BotRequest} returns this
 */
proto.macondo.BotRequest.prototype.clearGameHistory = function() {
  return this.setGameHistory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.macondo.BotRequest.prototype.hasGameHistory = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.macondo.BotResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.macondo.BotResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  MOVE: 1,
  ERROR: 2
};

/**
 * @return {proto.macondo.BotResponse.ResponseCase}
 */
proto.macondo.BotResponse.prototype.getResponseCase = function() {
  return /** @type {proto.macondo.BotResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.macondo.BotResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.macondo.BotResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.macondo.BotResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.macondo.BotResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.macondo.BotResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    move: (f = msg.getMove()) && proto.macondo.GameEvent.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.macondo.BotResponse}
 */
proto.macondo.BotResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.macondo.BotResponse;
  return proto.macondo.BotResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.macondo.BotResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.macondo.BotResponse}
 */
proto.macondo.BotResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.macondo.GameEvent;
      reader.readMessage(value,proto.macondo.GameEvent.deserializeBinaryFromReader);
      msg.setMove(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.macondo.BotResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.macondo.BotResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.macondo.BotResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.macondo.BotResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMove();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.macondo.GameEvent.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional GameEvent move = 1;
 * @return {?proto.macondo.GameEvent}
 */
proto.macondo.BotResponse.prototype.getMove = function() {
  return /** @type{?proto.macondo.GameEvent} */ (
    jspb.Message.getWrapperField(this, proto.macondo.GameEvent, 1));
};


/**
 * @param {?proto.macondo.GameEvent|undefined} value
 * @return {!proto.macondo.BotResponse} returns this
*/
proto.macondo.BotResponse.prototype.setMove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.macondo.BotResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.macondo.BotResponse} returns this
 */
proto.macondo.BotResponse.prototype.clearMove = function() {
  return this.setMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.macondo.BotResponse.prototype.hasMove = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.macondo.BotResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.macondo.BotResponse} returns this
 */
proto.macondo.BotResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.macondo.BotResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.macondo.BotResponse} returns this
 */
proto.macondo.BotResponse.prototype.clearError = function() {
  return jspb.Message.setOneofField(this, 2, proto.macondo.BotResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.macondo.BotResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.macondo.PlayState = {
  PLAYING: 0,
  WAITING_FOR_FINAL_PASS: 1,
  GAME_OVER: 2
};

/**
 * @enum {number}
 */
proto.macondo.ChallengeRule = {
  VOID: 0,
  SINGLE: 1,
  DOUBLE: 2,
  FIVE_POINT: 3,
  TEN_POINT: 4,
  TRIPLE: 5
};

goog.object.extend(exports, proto.macondo);
