version: "3"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile-dev
    environment:
      STRATEGY_PARAMS_PATH: /opt/program/data/strategy
      LEXICON_PATH: /opt/program/data/lexica
      LETTER_DISTRIBUTION_PATH: /opt/program/data/letterdistributions
      DATA_PATH: /opt/program/data
      DB_HOST: db
      DB_PORT: "5432"
      DB_USER: postgres
      DB_NAME: liwords
      DB_PASSWORD: pass
      DB_SSL_MODE: disable
      SECRET_KEY: jqxztripletriple
      DEBUG: 1
      NATS_URL: nats://nats:4222
      REGISTRATION_CODE: foobar
      MAILGUN_KEY: ${MAILGUN_KEY:-default}
      DISCORD_TOKEN: ${DISCORD_TOKEN:-default}
      REDIS_URL: "redis://redis:6379"
      GORACE: history_size=7
      ARGON_MEMORY: 1024
      AWS_REGION: "us-east-2"
      USE_LOCALSTACK_S3: 1
      LOCALSTACK_S3_ENDPOINT: "http://localstack:4566"
      # localstack still requires some value for these:
      AWS_ACCESS_KEY_ID: '123'
      AWS_SECRET_KEY: 'xyz'
      AVATAR_UPLOAD_BUCKET: woogles-uploads
      GAMEDOC_UPLOAD_BUCKET: woogles-gamedocs
      DB_MIGRATIONS_PATH: file:///opt/program/db/migrations
      PUZZLE_GENERATION_SECRET_KEY: perplexemes
      ECS_CLUSTER_NAME: ${ECS_CLUSTER_NAME:-}
      PUZZLE_GENERATION_TASK_DEFINITION: ${PUZZLE_GENERATION_TASK_DEFINITION:-}
      # XXX: In order to get avatar upload to work locally we need to set up localstack.
      # For now: AWS_PROFILE=prod docker-compose up app
    volumes:
      - .:/opt/program:rw
      - ./data/lexica/gaddag:/opt/program/data/lexica/gaddag
      - ../macondo/data/strategy:/opt/program/data/strategy
      - ./data/lexica/dawg:/opt/program/data/lexica/dawg
      - ${AWS_CREDENTIALS_PATH:-~/.aws}:/root/.aws:ro
    command: sh -c "go run -race cmd/liwords-api/*.go"
    depends_on:
      [
        "db",
        "proxy",
        "nats",
        "socket",
        "redis",
        "localstack",
        "es01"
      ]
    networks:
      - aeronet
    ports:
      - "8001:8001"
    labels:
      - "traefik.http.middlewares.floc.headers.customresponseheaders.Permissions-Policy=interest-cohort=()"
      - "traefik.http.routers.liwords.middlewares=floc"
      - "traefik.http.routers.liwords.rule=PathPrefix(`/twirp/`, `/gameimg/`, `/debug/`, `/api/`)"
      - "traefik.http.routers.liwords.entrypoints=web"
      - "traefik.http.services.liwords.loadbalancer.server.port=8001"
      - traefik.enable=true
  bot:
    build:
      context: ../macondo
      dockerfile: Dockerfile-bot-dev
    environment:
      LEXICON_PATH: /opt/program/data/lexica
      LETTER_DISTRIBUTION_PATH: /opt/program/data/letterdistributions
      STRATEGY_PARAMS_PATH: /opt/program/data/strategy
      NATS_URL: nats://nats:4222
      DEBUG: 1
      WOLGES_AWSM_URL: http://wolges_awsm:4500
    volumes:
      - ../macondo:/opt/program:rw
      # Use the same gaddag files we use for the WASM integration.
      - ./data/lexica/gaddag:/opt/program/data/lexica/gaddag
      - ./data/lexica/dawg:/opt/program/data/lexica/dawg
    command: sh -c "go run -race cmd/bot/*.go"
    depends_on: [ "nats" ]
    networks:
      - aeronet

  # Needed for bot to play wordsmog. Comment out if not using.
  # Requires https://github.com/andy-k/wolges-awsm to be cloned
  # at the level of `liwords`.
  # wolges_awsm:
  #   build:
  #     context: ../wolges-awsm
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./data/lexica/gaddag:/app/data
  #   ports:
  #     - "4500:4500"
  #   networks:
  #     - aeronet

  socket:
    &socketsetup
    build:
      context: ../liwords-socket
      dockerfile: Dockerfile-dev
    environment:
      SECRET_KEY: jqxztripletriple
      DEBUG: 1
      NATS_URL: nats://nats:4222
    volumes:
      - ../liwords-socket:/opt/program:rw
    command: [ "go", "run", "-race", "cmd/socketsrv/main.go" ]
    depends_on: [ "nats" ]
    networks:
      - aeronet
    labels:
      - "traefik.http.middlewares.floc.headers.customresponseheaders.Permissions-Policy=interest-cohort=()"
      - "traefik.http.routers.liwords-socket.middlewares=floc"
      - "traefik.http.routers.liwords-socket.rule=PathPrefix(`/ws`)"
      - "traefik.http.routers.liwords-socket.entrypoints=web"
      - "traefik.http.services.liwords-socket.loadbalancer.server.port=8087"
      - traefik.enable=true

  # socket2: *socketsetup

  proxy:
    image: "traefik:v2.2"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - aeronet

  nats:
    image: "nats"
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - aeronet

  redis:
    image: "redis:alpine"
    volumes:
      - redis-data-volume:/data
    ports:
      - 6379:6379
    networks:
      - aeronet

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: liwords
    volumes:
      - pg-data-volume:/var/lib/postgresql/data
      # - /Users/cesar:/opt/cesar
    ports:
      - 5432:5432
    networks:
      - aeronet

  localstack:
    image: localstack/localstack
    ports:
      - 4566:4566
    environment:
      - SERVICES=s3
      - DEBUG=true
      - DATA_DIR=/tmp/localstack/data
    volumes:
      - localstack-volume:/tmp/localstack
    networks:
      - aeronet

  frontend:
    build:
      context: .
      dockerfile: Dockerfile-fe
    environment:
      WDS_SOCKET_PORT: 0
      WDS_SOCKET_PATH: "/wds-socket"
    volumes:
      - ./liwords-ui:/opt/liwords-ui
      # Install node_modules inside the docker container
      - "/opt/liwords-ui/node_modules"
    working_dir: /opt/liwords-ui
    command: npm start
    # Need the following else the frontend quits immediately:
    stdin_open: true
    networks:
      - aeronet
    labels:
      - traefik.enable=true

      - "traefik.http.middlewares.floc.headers.customresponseheaders.Permissions-Policy=interest-cohort=()"
      - "traefik.http.routers.liwords-fe.middlewares=floc"
      - "traefik.http.routers.liwords-fe.rule=PathPrefix(`/`)"
      - "traefik.http.routers.liwords-fe.service=liwords-fe-service"
      - "traefik.http.routers.liwords-fe.entrypoints=web"
      - "traefik.http.services.liwords-fe-service.loadbalancer.server.port=3000"

  goutils:
    build:
      context: .
      dockerfile: Dockerfile-goutils
    volumes:
      - .:/opt/code/liwords:rw
      - ../macondo:/opt/code/macondo
    networks:
      - aeronet

  es_setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '            
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

    networks:
      - aeronet

  es01:
    depends_on:
      es_setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.seed_hosts=""
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - aeronet

  kibana:
    depends_on: [ "es01" ]
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      # Note: to actually log into the interface, you use the 
      # "elastic" user, not the user below:
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - aeronet

networks:
  aeronet:
    driver: bridge

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  pg-data-volume:
    external: false
  redis-data-volume:
    external: false
  localstack-volume:
