version: "3"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile-dev
    environment:
      STRATEGY_PARAMS_PATH: /opt/program/data/strategy
      LEXICON_PATH: /opt/program/data/lexica
      LETTER_DISTRIBUTION_PATH: /opt/program/data/letterdistributions
      DB_HOST: db
      DB_PORT: "5432"
      DB_USER: postgres
      DB_NAME: liwords
      DB_PASSWORD: pass
      DB_SSL_MODE: disable
      SECRET_KEY: jqxztripletriple
      DEBUG: 1
      NATS_URL: nats://nats:4222
      REGISTRATION_CODE: foobar
      MAILGUN_KEY: ${MAILGUN_KEY:-default}
      DISCORD_TOKEN: ${DISCORD_TOKEN:-default}
      REDIS_URL: "redis://redis:6379"
      GORACE: history_size=7
      ARGON_MEMORY: 1024
      AWS_PROFILE: ${AWS_PROFILE:-default}
      AWS_REGION: ${AWS_REGION:-}
      AVATAR_UPLOAD_BUCKET: woogles-uploads
      DB_MIGRATIONS_PATH: file:///opt/program/db/migrations
      PUZZLE_GENERATION_SECRET_KEY: perplexemes
      ECS_CLUSTER_NAME: ${ECS_CLUSTER_NAME:-}
      PUZZLE_GENERATION_TASK_DEFINITION: ${PUZZLE_GENERATION_TASK_DEFINITION:-}
      # XXX: In order to get avatar upload to work locally we need to set up localstack.
      # For now: AWS_PROFILE=prod docker-compose up app
    volumes:
      - .:/opt/program:rw
      - ./data/lexica/gaddag:/opt/program/data/lexica/gaddag
      - ../macondo/data/strategy:/opt/program/data/strategy
      - ./data/lexica/dawg:/opt/program/data/lexica/dawg
      - ${AWS_CREDENTIALS_PATH:-~/.aws}:/root/.aws:ro
    command: sh -c "go run -race cmd/liwords-api/*.go"
    depends_on: [ "db", "proxy", "nats", "socket", "redis" ]
    networks:
      - aeronet
    ports:
      - "8001:8001"
    labels:
      - "traefik.http.middlewares.floc.headers.customresponseheaders.Permissions-Policy=interest-cohort=()"
      - "traefik.http.routers.liwords.middlewares=floc"
      - "traefik.http.routers.liwords.rule=PathPrefix(`/twirp/`, `/gameimg/`, `/debug/`)"
      - "traefik.http.routers.liwords.entrypoints=web"
      - "traefik.http.services.liwords.loadbalancer.server.port=8001"
      - traefik.enable=true
  bot:
    build:
      context: ../macondo
      dockerfile: Dockerfile-bot-dev
    environment:
      LEXICON_PATH: /opt/program/data/lexica
      LETTER_DISTRIBUTION_PATH: /opt/program/data/letterdistributions
      STRATEGY_PARAMS_PATH: /opt/program/data/strategy
      NATS_URL: nats://nats:4222
      DEBUG: 1
    volumes:
      - ../macondo:/opt/program:rw
      # Use the same gaddag files we use for the WASM integration.
      - ./data/lexica/gaddag:/opt/program/data/lexica/gaddag
      - ./data/lexica/dawg:/opt/program/data/lexica/dawg
    command: sh -c "go run -race cmd/bot/*.go"
    depends_on: [ "nats" ]
    networks:
      - aeronet

  socket:
    &socketsetup
    build:
      context: ../liwords-socket
      dockerfile: Dockerfile-dev
    environment:
      SECRET_KEY: jqxztripletriple
      DEBUG: 1
      NATS_URL: nats://nats:4222
    volumes:
      - ../liwords-socket:/opt/program:rw
    command: [ "go", "run", "-race", "cmd/socketsrv/main.go" ]
    depends_on: [ "nats" ]
    networks:
      - aeronet
    labels:
      - "traefik.http.middlewares.floc.headers.customresponseheaders.Permissions-Policy=interest-cohort=()"
      - "traefik.http.routers.liwords-socket.middlewares=floc"
      - "traefik.http.routers.liwords-socket.rule=PathPrefix(`/ws`)"
      - "traefik.http.routers.liwords-socket.entrypoints=web"
      - "traefik.http.services.liwords-socket.loadbalancer.server.port=8087"
      - traefik.enable=true

  socket2: *socketsetup

  proxy:
    image: "traefik:v2.2"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - aeronet

  nats:
    image: "nats"
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - aeronet

  redis:
    image: "redis:alpine"
    volumes:
      - redis-data-volume:/data
    ports:
      - 6379:6379
    networks:
      - aeronet

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: liwords
    volumes:
      - pg-data-volume:/var/lib/postgresql/data
      # - /Users/cesar:/opt/cesar
    ports:
      - 5432:5432
    networks:
      - aeronet

  frontend:
    build:
      context: .
      dockerfile: Dockerfile-fe
    environment:
      WDS_SOCKET_PORT: 0
      WDS_SOCKET_PATH: "/wds-socket"
    volumes:
      - ./liwords-ui:/opt/liwords-ui
      # Install node_modules inside the docker container
      - "/opt/liwords-ui/node_modules"
    working_dir: /opt/liwords-ui
    command: npm start
    # Need the following else the frontend quits immediately:
    stdin_open: true
    networks:
      - aeronet
    labels:
      - traefik.enable=true

      - "traefik.http.middlewares.floc.headers.customresponseheaders.Permissions-Policy=interest-cohort=()"
      - "traefik.http.routers.liwords-fe.middlewares=floc"
      - "traefik.http.routers.liwords-fe.rule=PathPrefix(`/`)"
      - "traefik.http.routers.liwords-fe.service=liwords-fe-service"
      - "traefik.http.routers.liwords-fe.entrypoints=web"
      - "traefik.http.services.liwords-fe-service.loadbalancer.server.port=3000"

  pb_compiler:
    build:
      context: .
      dockerfile: Dockerfile-pb
    volumes:
      - .:/opt/code/liwords:rw
      - ../macondo:/opt/code/macondo

networks:
  aeronet:
    driver: bridge

volumes:
  pg-data-volume:
    external: false
  redis-data-volume:
    external: false
