// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/word_service/word_service.proto

package word_serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	word_service "github.com/woogles-io/liwords/rpc/api/proto/word_service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WordServiceName is the fully-qualified name of the WordService service.
	WordServiceName = "word_service.WordService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WordServiceDefineWordsProcedure is the fully-qualified name of the WordService's DefineWords RPC.
	WordServiceDefineWordsProcedure = "/word_service.WordService/DefineWords"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	wordServiceServiceDescriptor           = word_service.File_proto_word_service_word_service_proto.Services().ByName("WordService")
	wordServiceDefineWordsMethodDescriptor = wordServiceServiceDescriptor.Methods().ByName("DefineWords")
)

// WordServiceClient is a client for the word_service.WordService service.
type WordServiceClient interface {
	DefineWords(context.Context, *connect.Request[word_service.DefineWordsRequest]) (*connect.Response[word_service.DefineWordsResponse], error)
}

// NewWordServiceClient constructs a client for the word_service.WordService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWordServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WordServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &wordServiceClient{
		defineWords: connect.NewClient[word_service.DefineWordsRequest, word_service.DefineWordsResponse](
			httpClient,
			baseURL+WordServiceDefineWordsProcedure,
			connect.WithSchema(wordServiceDefineWordsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// wordServiceClient implements WordServiceClient.
type wordServiceClient struct {
	defineWords *connect.Client[word_service.DefineWordsRequest, word_service.DefineWordsResponse]
}

// DefineWords calls word_service.WordService.DefineWords.
func (c *wordServiceClient) DefineWords(ctx context.Context, req *connect.Request[word_service.DefineWordsRequest]) (*connect.Response[word_service.DefineWordsResponse], error) {
	return c.defineWords.CallUnary(ctx, req)
}

// WordServiceHandler is an implementation of the word_service.WordService service.
type WordServiceHandler interface {
	DefineWords(context.Context, *connect.Request[word_service.DefineWordsRequest]) (*connect.Response[word_service.DefineWordsResponse], error)
}

// NewWordServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWordServiceHandler(svc WordServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	wordServiceDefineWordsHandler := connect.NewUnaryHandler(
		WordServiceDefineWordsProcedure,
		svc.DefineWords,
		connect.WithSchema(wordServiceDefineWordsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/word_service.WordService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WordServiceDefineWordsProcedure:
			wordServiceDefineWordsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWordServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWordServiceHandler struct{}

func (UnimplementedWordServiceHandler) DefineWords(context.Context, *connect.Request[word_service.DefineWordsRequest]) (*connect.Response[word_service.DefineWordsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("word_service.WordService.DefineWords is not implemented"))
}
