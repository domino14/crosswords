// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/config_service/config_service.proto

package config_serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	config_service "github.com/woogles-io/liwords/rpc/api/proto/config_service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConfigServiceName is the fully-qualified name of the ConfigService service.
	ConfigServiceName = "config_service.ConfigService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConfigServiceSetGamesEnabledProcedure is the fully-qualified name of the ConfigService's
	// SetGamesEnabled RPC.
	ConfigServiceSetGamesEnabledProcedure = "/config_service.ConfigService/SetGamesEnabled"
	// ConfigServiceSetFEHashProcedure is the fully-qualified name of the ConfigService's SetFEHash RPC.
	ConfigServiceSetFEHashProcedure = "/config_service.ConfigService/SetFEHash"
	// ConfigServiceSetUserPermissionsProcedure is the fully-qualified name of the ConfigService's
	// SetUserPermissions RPC.
	ConfigServiceSetUserPermissionsProcedure = "/config_service.ConfigService/SetUserPermissions"
	// ConfigServiceGetUserDetailsProcedure is the fully-qualified name of the ConfigService's
	// GetUserDetails RPC.
	ConfigServiceGetUserDetailsProcedure = "/config_service.ConfigService/GetUserDetails"
	// ConfigServiceSetAnnouncementsProcedure is the fully-qualified name of the ConfigService's
	// SetAnnouncements RPC.
	ConfigServiceSetAnnouncementsProcedure = "/config_service.ConfigService/SetAnnouncements"
	// ConfigServiceGetAnnouncementsProcedure is the fully-qualified name of the ConfigService's
	// GetAnnouncements RPC.
	ConfigServiceGetAnnouncementsProcedure = "/config_service.ConfigService/GetAnnouncements"
	// ConfigServiceSetSingleAnnouncementProcedure is the fully-qualified name of the ConfigService's
	// SetSingleAnnouncement RPC.
	ConfigServiceSetSingleAnnouncementProcedure = "/config_service.ConfigService/SetSingleAnnouncement"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	configServiceServiceDescriptor                     = config_service.File_proto_config_service_config_service_proto.Services().ByName("ConfigService")
	configServiceSetGamesEnabledMethodDescriptor       = configServiceServiceDescriptor.Methods().ByName("SetGamesEnabled")
	configServiceSetFEHashMethodDescriptor             = configServiceServiceDescriptor.Methods().ByName("SetFEHash")
	configServiceSetUserPermissionsMethodDescriptor    = configServiceServiceDescriptor.Methods().ByName("SetUserPermissions")
	configServiceGetUserDetailsMethodDescriptor        = configServiceServiceDescriptor.Methods().ByName("GetUserDetails")
	configServiceSetAnnouncementsMethodDescriptor      = configServiceServiceDescriptor.Methods().ByName("SetAnnouncements")
	configServiceGetAnnouncementsMethodDescriptor      = configServiceServiceDescriptor.Methods().ByName("GetAnnouncements")
	configServiceSetSingleAnnouncementMethodDescriptor = configServiceServiceDescriptor.Methods().ByName("SetSingleAnnouncement")
)

// ConfigServiceClient is a client for the config_service.ConfigService service.
type ConfigServiceClient interface {
	SetGamesEnabled(context.Context, *connect.Request[config_service.EnableGamesRequest]) (*connect.Response[config_service.ConfigResponse], error)
	SetFEHash(context.Context, *connect.Request[config_service.SetFEHashRequest]) (*connect.Response[config_service.ConfigResponse], error)
	SetUserPermissions(context.Context, *connect.Request[config_service.PermissionsRequest]) (*connect.Response[config_service.ConfigResponse], error)
	GetUserDetails(context.Context, *connect.Request[config_service.UserRequest]) (*connect.Response[config_service.UserResponse], error)
	SetAnnouncements(context.Context, *connect.Request[config_service.SetAnnouncementsRequest]) (*connect.Response[config_service.ConfigResponse], error)
	GetAnnouncements(context.Context, *connect.Request[config_service.GetAnnouncementsRequest]) (*connect.Response[config_service.AnnouncementsResponse], error)
	SetSingleAnnouncement(context.Context, *connect.Request[config_service.SetSingleAnnouncementRequest]) (*connect.Response[config_service.ConfigResponse], error)
}

// NewConfigServiceClient constructs a client for the config_service.ConfigService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConfigServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &configServiceClient{
		setGamesEnabled: connect.NewClient[config_service.EnableGamesRequest, config_service.ConfigResponse](
			httpClient,
			baseURL+ConfigServiceSetGamesEnabledProcedure,
			connect.WithSchema(configServiceSetGamesEnabledMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setFEHash: connect.NewClient[config_service.SetFEHashRequest, config_service.ConfigResponse](
			httpClient,
			baseURL+ConfigServiceSetFEHashProcedure,
			connect.WithSchema(configServiceSetFEHashMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setUserPermissions: connect.NewClient[config_service.PermissionsRequest, config_service.ConfigResponse](
			httpClient,
			baseURL+ConfigServiceSetUserPermissionsProcedure,
			connect.WithSchema(configServiceSetUserPermissionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUserDetails: connect.NewClient[config_service.UserRequest, config_service.UserResponse](
			httpClient,
			baseURL+ConfigServiceGetUserDetailsProcedure,
			connect.WithSchema(configServiceGetUserDetailsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setAnnouncements: connect.NewClient[config_service.SetAnnouncementsRequest, config_service.ConfigResponse](
			httpClient,
			baseURL+ConfigServiceSetAnnouncementsProcedure,
			connect.WithSchema(configServiceSetAnnouncementsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAnnouncements: connect.NewClient[config_service.GetAnnouncementsRequest, config_service.AnnouncementsResponse](
			httpClient,
			baseURL+ConfigServiceGetAnnouncementsProcedure,
			connect.WithSchema(configServiceGetAnnouncementsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setSingleAnnouncement: connect.NewClient[config_service.SetSingleAnnouncementRequest, config_service.ConfigResponse](
			httpClient,
			baseURL+ConfigServiceSetSingleAnnouncementProcedure,
			connect.WithSchema(configServiceSetSingleAnnouncementMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// configServiceClient implements ConfigServiceClient.
type configServiceClient struct {
	setGamesEnabled       *connect.Client[config_service.EnableGamesRequest, config_service.ConfigResponse]
	setFEHash             *connect.Client[config_service.SetFEHashRequest, config_service.ConfigResponse]
	setUserPermissions    *connect.Client[config_service.PermissionsRequest, config_service.ConfigResponse]
	getUserDetails        *connect.Client[config_service.UserRequest, config_service.UserResponse]
	setAnnouncements      *connect.Client[config_service.SetAnnouncementsRequest, config_service.ConfigResponse]
	getAnnouncements      *connect.Client[config_service.GetAnnouncementsRequest, config_service.AnnouncementsResponse]
	setSingleAnnouncement *connect.Client[config_service.SetSingleAnnouncementRequest, config_service.ConfigResponse]
}

// SetGamesEnabled calls config_service.ConfigService.SetGamesEnabled.
func (c *configServiceClient) SetGamesEnabled(ctx context.Context, req *connect.Request[config_service.EnableGamesRequest]) (*connect.Response[config_service.ConfigResponse], error) {
	return c.setGamesEnabled.CallUnary(ctx, req)
}

// SetFEHash calls config_service.ConfigService.SetFEHash.
func (c *configServiceClient) SetFEHash(ctx context.Context, req *connect.Request[config_service.SetFEHashRequest]) (*connect.Response[config_service.ConfigResponse], error) {
	return c.setFEHash.CallUnary(ctx, req)
}

// SetUserPermissions calls config_service.ConfigService.SetUserPermissions.
func (c *configServiceClient) SetUserPermissions(ctx context.Context, req *connect.Request[config_service.PermissionsRequest]) (*connect.Response[config_service.ConfigResponse], error) {
	return c.setUserPermissions.CallUnary(ctx, req)
}

// GetUserDetails calls config_service.ConfigService.GetUserDetails.
func (c *configServiceClient) GetUserDetails(ctx context.Context, req *connect.Request[config_service.UserRequest]) (*connect.Response[config_service.UserResponse], error) {
	return c.getUserDetails.CallUnary(ctx, req)
}

// SetAnnouncements calls config_service.ConfigService.SetAnnouncements.
func (c *configServiceClient) SetAnnouncements(ctx context.Context, req *connect.Request[config_service.SetAnnouncementsRequest]) (*connect.Response[config_service.ConfigResponse], error) {
	return c.setAnnouncements.CallUnary(ctx, req)
}

// GetAnnouncements calls config_service.ConfigService.GetAnnouncements.
func (c *configServiceClient) GetAnnouncements(ctx context.Context, req *connect.Request[config_service.GetAnnouncementsRequest]) (*connect.Response[config_service.AnnouncementsResponse], error) {
	return c.getAnnouncements.CallUnary(ctx, req)
}

// SetSingleAnnouncement calls config_service.ConfigService.SetSingleAnnouncement.
func (c *configServiceClient) SetSingleAnnouncement(ctx context.Context, req *connect.Request[config_service.SetSingleAnnouncementRequest]) (*connect.Response[config_service.ConfigResponse], error) {
	return c.setSingleAnnouncement.CallUnary(ctx, req)
}

// ConfigServiceHandler is an implementation of the config_service.ConfigService service.
type ConfigServiceHandler interface {
	SetGamesEnabled(context.Context, *connect.Request[config_service.EnableGamesRequest]) (*connect.Response[config_service.ConfigResponse], error)
	SetFEHash(context.Context, *connect.Request[config_service.SetFEHashRequest]) (*connect.Response[config_service.ConfigResponse], error)
	SetUserPermissions(context.Context, *connect.Request[config_service.PermissionsRequest]) (*connect.Response[config_service.ConfigResponse], error)
	GetUserDetails(context.Context, *connect.Request[config_service.UserRequest]) (*connect.Response[config_service.UserResponse], error)
	SetAnnouncements(context.Context, *connect.Request[config_service.SetAnnouncementsRequest]) (*connect.Response[config_service.ConfigResponse], error)
	GetAnnouncements(context.Context, *connect.Request[config_service.GetAnnouncementsRequest]) (*connect.Response[config_service.AnnouncementsResponse], error)
	SetSingleAnnouncement(context.Context, *connect.Request[config_service.SetSingleAnnouncementRequest]) (*connect.Response[config_service.ConfigResponse], error)
}

// NewConfigServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigServiceHandler(svc ConfigServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	configServiceSetGamesEnabledHandler := connect.NewUnaryHandler(
		ConfigServiceSetGamesEnabledProcedure,
		svc.SetGamesEnabled,
		connect.WithSchema(configServiceSetGamesEnabledMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	configServiceSetFEHashHandler := connect.NewUnaryHandler(
		ConfigServiceSetFEHashProcedure,
		svc.SetFEHash,
		connect.WithSchema(configServiceSetFEHashMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	configServiceSetUserPermissionsHandler := connect.NewUnaryHandler(
		ConfigServiceSetUserPermissionsProcedure,
		svc.SetUserPermissions,
		connect.WithSchema(configServiceSetUserPermissionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	configServiceGetUserDetailsHandler := connect.NewUnaryHandler(
		ConfigServiceGetUserDetailsProcedure,
		svc.GetUserDetails,
		connect.WithSchema(configServiceGetUserDetailsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	configServiceSetAnnouncementsHandler := connect.NewUnaryHandler(
		ConfigServiceSetAnnouncementsProcedure,
		svc.SetAnnouncements,
		connect.WithSchema(configServiceSetAnnouncementsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	configServiceGetAnnouncementsHandler := connect.NewUnaryHandler(
		ConfigServiceGetAnnouncementsProcedure,
		svc.GetAnnouncements,
		connect.WithSchema(configServiceGetAnnouncementsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	configServiceSetSingleAnnouncementHandler := connect.NewUnaryHandler(
		ConfigServiceSetSingleAnnouncementProcedure,
		svc.SetSingleAnnouncement,
		connect.WithSchema(configServiceSetSingleAnnouncementMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/config_service.ConfigService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConfigServiceSetGamesEnabledProcedure:
			configServiceSetGamesEnabledHandler.ServeHTTP(w, r)
		case ConfigServiceSetFEHashProcedure:
			configServiceSetFEHashHandler.ServeHTTP(w, r)
		case ConfigServiceSetUserPermissionsProcedure:
			configServiceSetUserPermissionsHandler.ServeHTTP(w, r)
		case ConfigServiceGetUserDetailsProcedure:
			configServiceGetUserDetailsHandler.ServeHTTP(w, r)
		case ConfigServiceSetAnnouncementsProcedure:
			configServiceSetAnnouncementsHandler.ServeHTTP(w, r)
		case ConfigServiceGetAnnouncementsProcedure:
			configServiceGetAnnouncementsHandler.ServeHTTP(w, r)
		case ConfigServiceSetSingleAnnouncementProcedure:
			configServiceSetSingleAnnouncementHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConfigServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigServiceHandler struct{}

func (UnimplementedConfigServiceHandler) SetGamesEnabled(context.Context, *connect.Request[config_service.EnableGamesRequest]) (*connect.Response[config_service.ConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config_service.ConfigService.SetGamesEnabled is not implemented"))
}

func (UnimplementedConfigServiceHandler) SetFEHash(context.Context, *connect.Request[config_service.SetFEHashRequest]) (*connect.Response[config_service.ConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config_service.ConfigService.SetFEHash is not implemented"))
}

func (UnimplementedConfigServiceHandler) SetUserPermissions(context.Context, *connect.Request[config_service.PermissionsRequest]) (*connect.Response[config_service.ConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config_service.ConfigService.SetUserPermissions is not implemented"))
}

func (UnimplementedConfigServiceHandler) GetUserDetails(context.Context, *connect.Request[config_service.UserRequest]) (*connect.Response[config_service.UserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config_service.ConfigService.GetUserDetails is not implemented"))
}

func (UnimplementedConfigServiceHandler) SetAnnouncements(context.Context, *connect.Request[config_service.SetAnnouncementsRequest]) (*connect.Response[config_service.ConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config_service.ConfigService.SetAnnouncements is not implemented"))
}

func (UnimplementedConfigServiceHandler) GetAnnouncements(context.Context, *connect.Request[config_service.GetAnnouncementsRequest]) (*connect.Response[config_service.AnnouncementsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config_service.ConfigService.GetAnnouncements is not implemented"))
}

func (UnimplementedConfigServiceHandler) SetSingleAnnouncement(context.Context, *connect.Request[config_service.SetSingleAnnouncementRequest]) (*connect.Response[config_service.ConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config_service.ConfigService.SetSingleAnnouncement is not implemented"))
}
