// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/user_service/user_service.proto

package user_serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	ipc "github.com/woogles-io/liwords/rpc/api/proto/ipc"
	user_service "github.com/woogles-io/liwords/rpc/api/proto/user_service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthenticationServiceName is the fully-qualified name of the AuthenticationService service.
	AuthenticationServiceName = "user_service.AuthenticationService"
	// RegistrationServiceName is the fully-qualified name of the RegistrationService service.
	RegistrationServiceName = "user_service.RegistrationService"
	// ProfileServiceName is the fully-qualified name of the ProfileService service.
	ProfileServiceName = "user_service.ProfileService"
	// AutocompleteServiceName is the fully-qualified name of the AutocompleteService service.
	AutocompleteServiceName = "user_service.AutocompleteService"
	// SocializeServiceName is the fully-qualified name of the SocializeService service.
	SocializeServiceName = "user_service.SocializeService"
	// IntegrationServiceName is the fully-qualified name of the IntegrationService service.
	IntegrationServiceName = "user_service.IntegrationService"
	// AuthorizationServiceName is the fully-qualified name of the AuthorizationService service.
	AuthorizationServiceName = "user_service.AuthorizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthenticationServiceLoginProcedure is the fully-qualified name of the AuthenticationService's
	// Login RPC.
	AuthenticationServiceLoginProcedure = "/user_service.AuthenticationService/Login"
	// AuthenticationServiceLogoutProcedure is the fully-qualified name of the AuthenticationService's
	// Logout RPC.
	AuthenticationServiceLogoutProcedure = "/user_service.AuthenticationService/Logout"
	// AuthenticationServiceGetSocketTokenProcedure is the fully-qualified name of the
	// AuthenticationService's GetSocketToken RPC.
	AuthenticationServiceGetSocketTokenProcedure = "/user_service.AuthenticationService/GetSocketToken"
	// AuthenticationServiceResetPasswordStep1Procedure is the fully-qualified name of the
	// AuthenticationService's ResetPasswordStep1 RPC.
	AuthenticationServiceResetPasswordStep1Procedure = "/user_service.AuthenticationService/ResetPasswordStep1"
	// AuthenticationServiceResetPasswordStep2Procedure is the fully-qualified name of the
	// AuthenticationService's ResetPasswordStep2 RPC.
	AuthenticationServiceResetPasswordStep2Procedure = "/user_service.AuthenticationService/ResetPasswordStep2"
	// AuthenticationServiceChangePasswordProcedure is the fully-qualified name of the
	// AuthenticationService's ChangePassword RPC.
	AuthenticationServiceChangePasswordProcedure = "/user_service.AuthenticationService/ChangePassword"
	// AuthenticationServiceNotifyAccountClosureProcedure is the fully-qualified name of the
	// AuthenticationService's NotifyAccountClosure RPC.
	AuthenticationServiceNotifyAccountClosureProcedure = "/user_service.AuthenticationService/NotifyAccountClosure"
	// AuthenticationServiceGetSignedCookieProcedure is the fully-qualified name of the
	// AuthenticationService's GetSignedCookie RPC.
	AuthenticationServiceGetSignedCookieProcedure = "/user_service.AuthenticationService/GetSignedCookie"
	// AuthenticationServiceInstallSignedCookieProcedure is the fully-qualified name of the
	// AuthenticationService's InstallSignedCookie RPC.
	AuthenticationServiceInstallSignedCookieProcedure = "/user_service.AuthenticationService/InstallSignedCookie"
	// AuthenticationServiceGetAPIKeyProcedure is the fully-qualified name of the
	// AuthenticationService's GetAPIKey RPC.
	AuthenticationServiceGetAPIKeyProcedure = "/user_service.AuthenticationService/GetAPIKey"
	// RegistrationServiceRegisterProcedure is the fully-qualified name of the RegistrationService's
	// Register RPC.
	RegistrationServiceRegisterProcedure = "/user_service.RegistrationService/Register"
	// ProfileServiceGetRatingsProcedure is the fully-qualified name of the ProfileService's GetRatings
	// RPC.
	ProfileServiceGetRatingsProcedure = "/user_service.ProfileService/GetRatings"
	// ProfileServiceGetStatsProcedure is the fully-qualified name of the ProfileService's GetStats RPC.
	ProfileServiceGetStatsProcedure = "/user_service.ProfileService/GetStats"
	// ProfileServiceGetProfileProcedure is the fully-qualified name of the ProfileService's GetProfile
	// RPC.
	ProfileServiceGetProfileProcedure = "/user_service.ProfileService/GetProfile"
	// ProfileServiceGetPersonalInfoProcedure is the fully-qualified name of the ProfileService's
	// GetPersonalInfo RPC.
	ProfileServiceGetPersonalInfoProcedure = "/user_service.ProfileService/GetPersonalInfo"
	// ProfileServiceUpdatePersonalInfoProcedure is the fully-qualified name of the ProfileService's
	// UpdatePersonalInfo RPC.
	ProfileServiceUpdatePersonalInfoProcedure = "/user_service.ProfileService/UpdatePersonalInfo"
	// ProfileServiceUpdateAvatarProcedure is the fully-qualified name of the ProfileService's
	// UpdateAvatar RPC.
	ProfileServiceUpdateAvatarProcedure = "/user_service.ProfileService/UpdateAvatar"
	// ProfileServiceRemoveAvatarProcedure is the fully-qualified name of the ProfileService's
	// RemoveAvatar RPC.
	ProfileServiceRemoveAvatarProcedure = "/user_service.ProfileService/RemoveAvatar"
	// ProfileServiceGetBriefProfilesProcedure is the fully-qualified name of the ProfileService's
	// GetBriefProfiles RPC.
	ProfileServiceGetBriefProfilesProcedure = "/user_service.ProfileService/GetBriefProfiles"
	// AutocompleteServiceGetCompletionProcedure is the fully-qualified name of the
	// AutocompleteService's GetCompletion RPC.
	AutocompleteServiceGetCompletionProcedure = "/user_service.AutocompleteService/GetCompletion"
	// SocializeServiceAddFollowProcedure is the fully-qualified name of the SocializeService's
	// AddFollow RPC.
	SocializeServiceAddFollowProcedure = "/user_service.SocializeService/AddFollow"
	// SocializeServiceRemoveFollowProcedure is the fully-qualified name of the SocializeService's
	// RemoveFollow RPC.
	SocializeServiceRemoveFollowProcedure = "/user_service.SocializeService/RemoveFollow"
	// SocializeServiceGetFollowsProcedure is the fully-qualified name of the SocializeService's
	// GetFollows RPC.
	SocializeServiceGetFollowsProcedure = "/user_service.SocializeService/GetFollows"
	// SocializeServiceAddBlockProcedure is the fully-qualified name of the SocializeService's AddBlock
	// RPC.
	SocializeServiceAddBlockProcedure = "/user_service.SocializeService/AddBlock"
	// SocializeServiceRemoveBlockProcedure is the fully-qualified name of the SocializeService's
	// RemoveBlock RPC.
	SocializeServiceRemoveBlockProcedure = "/user_service.SocializeService/RemoveBlock"
	// SocializeServiceGetBlocksProcedure is the fully-qualified name of the SocializeService's
	// GetBlocks RPC.
	SocializeServiceGetBlocksProcedure = "/user_service.SocializeService/GetBlocks"
	// SocializeServiceGetFullBlocksProcedure is the fully-qualified name of the SocializeService's
	// GetFullBlocks RPC.
	SocializeServiceGetFullBlocksProcedure = "/user_service.SocializeService/GetFullBlocks"
	// SocializeServiceGetActiveChatChannelsProcedure is the fully-qualified name of the
	// SocializeService's GetActiveChatChannels RPC.
	SocializeServiceGetActiveChatChannelsProcedure = "/user_service.SocializeService/GetActiveChatChannels"
	// SocializeServiceGetChatsForChannelProcedure is the fully-qualified name of the SocializeService's
	// GetChatsForChannel RPC.
	SocializeServiceGetChatsForChannelProcedure = "/user_service.SocializeService/GetChatsForChannel"
	// IntegrationServiceGetIntegrationsProcedure is the fully-qualified name of the
	// IntegrationService's GetIntegrations RPC.
	IntegrationServiceGetIntegrationsProcedure = "/user_service.IntegrationService/GetIntegrations"
	// IntegrationServiceDeleteIntegrationProcedure is the fully-qualified name of the
	// IntegrationService's DeleteIntegration RPC.
	IntegrationServiceDeleteIntegrationProcedure = "/user_service.IntegrationService/DeleteIntegration"
	// AuthorizationServiceGetModListProcedure is the fully-qualified name of the AuthorizationService's
	// GetModList RPC.
	AuthorizationServiceGetModListProcedure = "/user_service.AuthorizationService/GetModList"
	// AuthorizationServiceGetSubscriptionCriteriaProcedure is the fully-qualified name of the
	// AuthorizationService's GetSubscriptionCriteria RPC.
	AuthorizationServiceGetSubscriptionCriteriaProcedure = "/user_service.AuthorizationService/GetSubscriptionCriteria"
	// AuthorizationServiceAddRoleProcedure is the fully-qualified name of the AuthorizationService's
	// AddRole RPC.
	AuthorizationServiceAddRoleProcedure = "/user_service.AuthorizationService/AddRole"
	// AuthorizationServiceAddPermissionProcedure is the fully-qualified name of the
	// AuthorizationService's AddPermission RPC.
	AuthorizationServiceAddPermissionProcedure = "/user_service.AuthorizationService/AddPermission"
	// AuthorizationServiceLinkRoleAndPermissionProcedure is the fully-qualified name of the
	// AuthorizationService's LinkRoleAndPermission RPC.
	AuthorizationServiceLinkRoleAndPermissionProcedure = "/user_service.AuthorizationService/LinkRoleAndPermission"
	// AuthorizationServiceAssignRoleProcedure is the fully-qualified name of the AuthorizationService's
	// AssignRole RPC.
	AuthorizationServiceAssignRoleProcedure = "/user_service.AuthorizationService/AssignRole"
	// AuthorizationServiceUnassignRoleProcedure is the fully-qualified name of the
	// AuthorizationService's UnassignRole RPC.
	AuthorizationServiceUnassignRoleProcedure = "/user_service.AuthorizationService/UnassignRole"
	// AuthorizationServiceGetUserRolesProcedure is the fully-qualified name of the
	// AuthorizationService's GetUserRoles RPC.
	AuthorizationServiceGetUserRolesProcedure = "/user_service.AuthorizationService/GetUserRoles"
)

// AuthenticationServiceClient is a client for the user_service.AuthenticationService service.
type AuthenticationServiceClient interface {
	Login(context.Context, *connect.Request[user_service.UserLoginRequest]) (*connect.Response[user_service.LoginResponse], error)
	Logout(context.Context, *connect.Request[user_service.UserLogoutRequest]) (*connect.Response[user_service.LogoutResponse], error)
	GetSocketToken(context.Context, *connect.Request[user_service.SocketTokenRequest]) (*connect.Response[user_service.SocketTokenResponse], error)
	ResetPasswordStep1(context.Context, *connect.Request[user_service.ResetPasswordRequestStep1]) (*connect.Response[user_service.ResetPasswordResponse], error)
	ResetPasswordStep2(context.Context, *connect.Request[user_service.ResetPasswordRequestStep2]) (*connect.Response[user_service.ResetPasswordResponse], error)
	ChangePassword(context.Context, *connect.Request[user_service.ChangePasswordRequest]) (*connect.Response[user_service.ChangePasswordResponse], error)
	NotifyAccountClosure(context.Context, *connect.Request[user_service.NotifyAccountClosureRequest]) (*connect.Response[user_service.NotifyAccountClosureResponse], error)
	// These two temporary endpoints for migrating everyone to naked domain:
	GetSignedCookie(context.Context, *connect.Request[user_service.GetSignedCookieRequest]) (*connect.Response[user_service.SignedCookieResponse], error)
	InstallSignedCookie(context.Context, *connect.Request[user_service.SignedCookieResponse]) (*connect.Response[user_service.InstallSignedCookieResponse], error)
	GetAPIKey(context.Context, *connect.Request[user_service.GetAPIKeyRequest]) (*connect.Response[user_service.GetAPIKeyResponse], error)
}

// NewAuthenticationServiceClient constructs a client for the user_service.AuthenticationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthenticationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthenticationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authenticationServiceMethods := user_service.File_proto_user_service_user_service_proto.Services().ByName("AuthenticationService").Methods()
	return &authenticationServiceClient{
		login: connect.NewClient[user_service.UserLoginRequest, user_service.LoginResponse](
			httpClient,
			baseURL+AuthenticationServiceLoginProcedure,
			connect.WithSchema(authenticationServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[user_service.UserLogoutRequest, user_service.LogoutResponse](
			httpClient,
			baseURL+AuthenticationServiceLogoutProcedure,
			connect.WithSchema(authenticationServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		getSocketToken: connect.NewClient[user_service.SocketTokenRequest, user_service.SocketTokenResponse](
			httpClient,
			baseURL+AuthenticationServiceGetSocketTokenProcedure,
			connect.WithSchema(authenticationServiceMethods.ByName("GetSocketToken")),
			connect.WithClientOptions(opts...),
		),
		resetPasswordStep1: connect.NewClient[user_service.ResetPasswordRequestStep1, user_service.ResetPasswordResponse](
			httpClient,
			baseURL+AuthenticationServiceResetPasswordStep1Procedure,
			connect.WithSchema(authenticationServiceMethods.ByName("ResetPasswordStep1")),
			connect.WithClientOptions(opts...),
		),
		resetPasswordStep2: connect.NewClient[user_service.ResetPasswordRequestStep2, user_service.ResetPasswordResponse](
			httpClient,
			baseURL+AuthenticationServiceResetPasswordStep2Procedure,
			connect.WithSchema(authenticationServiceMethods.ByName("ResetPasswordStep2")),
			connect.WithClientOptions(opts...),
		),
		changePassword: connect.NewClient[user_service.ChangePasswordRequest, user_service.ChangePasswordResponse](
			httpClient,
			baseURL+AuthenticationServiceChangePasswordProcedure,
			connect.WithSchema(authenticationServiceMethods.ByName("ChangePassword")),
			connect.WithClientOptions(opts...),
		),
		notifyAccountClosure: connect.NewClient[user_service.NotifyAccountClosureRequest, user_service.NotifyAccountClosureResponse](
			httpClient,
			baseURL+AuthenticationServiceNotifyAccountClosureProcedure,
			connect.WithSchema(authenticationServiceMethods.ByName("NotifyAccountClosure")),
			connect.WithClientOptions(opts...),
		),
		getSignedCookie: connect.NewClient[user_service.GetSignedCookieRequest, user_service.SignedCookieResponse](
			httpClient,
			baseURL+AuthenticationServiceGetSignedCookieProcedure,
			connect.WithSchema(authenticationServiceMethods.ByName("GetSignedCookie")),
			connect.WithClientOptions(opts...),
		),
		installSignedCookie: connect.NewClient[user_service.SignedCookieResponse, user_service.InstallSignedCookieResponse](
			httpClient,
			baseURL+AuthenticationServiceInstallSignedCookieProcedure,
			connect.WithSchema(authenticationServiceMethods.ByName("InstallSignedCookie")),
			connect.WithClientOptions(opts...),
		),
		getAPIKey: connect.NewClient[user_service.GetAPIKeyRequest, user_service.GetAPIKeyResponse](
			httpClient,
			baseURL+AuthenticationServiceGetAPIKeyProcedure,
			connect.WithSchema(authenticationServiceMethods.ByName("GetAPIKey")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authenticationServiceClient implements AuthenticationServiceClient.
type authenticationServiceClient struct {
	login                *connect.Client[user_service.UserLoginRequest, user_service.LoginResponse]
	logout               *connect.Client[user_service.UserLogoutRequest, user_service.LogoutResponse]
	getSocketToken       *connect.Client[user_service.SocketTokenRequest, user_service.SocketTokenResponse]
	resetPasswordStep1   *connect.Client[user_service.ResetPasswordRequestStep1, user_service.ResetPasswordResponse]
	resetPasswordStep2   *connect.Client[user_service.ResetPasswordRequestStep2, user_service.ResetPasswordResponse]
	changePassword       *connect.Client[user_service.ChangePasswordRequest, user_service.ChangePasswordResponse]
	notifyAccountClosure *connect.Client[user_service.NotifyAccountClosureRequest, user_service.NotifyAccountClosureResponse]
	getSignedCookie      *connect.Client[user_service.GetSignedCookieRequest, user_service.SignedCookieResponse]
	installSignedCookie  *connect.Client[user_service.SignedCookieResponse, user_service.InstallSignedCookieResponse]
	getAPIKey            *connect.Client[user_service.GetAPIKeyRequest, user_service.GetAPIKeyResponse]
}

// Login calls user_service.AuthenticationService.Login.
func (c *authenticationServiceClient) Login(ctx context.Context, req *connect.Request[user_service.UserLoginRequest]) (*connect.Response[user_service.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls user_service.AuthenticationService.Logout.
func (c *authenticationServiceClient) Logout(ctx context.Context, req *connect.Request[user_service.UserLogoutRequest]) (*connect.Response[user_service.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// GetSocketToken calls user_service.AuthenticationService.GetSocketToken.
func (c *authenticationServiceClient) GetSocketToken(ctx context.Context, req *connect.Request[user_service.SocketTokenRequest]) (*connect.Response[user_service.SocketTokenResponse], error) {
	return c.getSocketToken.CallUnary(ctx, req)
}

// ResetPasswordStep1 calls user_service.AuthenticationService.ResetPasswordStep1.
func (c *authenticationServiceClient) ResetPasswordStep1(ctx context.Context, req *connect.Request[user_service.ResetPasswordRequestStep1]) (*connect.Response[user_service.ResetPasswordResponse], error) {
	return c.resetPasswordStep1.CallUnary(ctx, req)
}

// ResetPasswordStep2 calls user_service.AuthenticationService.ResetPasswordStep2.
func (c *authenticationServiceClient) ResetPasswordStep2(ctx context.Context, req *connect.Request[user_service.ResetPasswordRequestStep2]) (*connect.Response[user_service.ResetPasswordResponse], error) {
	return c.resetPasswordStep2.CallUnary(ctx, req)
}

// ChangePassword calls user_service.AuthenticationService.ChangePassword.
func (c *authenticationServiceClient) ChangePassword(ctx context.Context, req *connect.Request[user_service.ChangePasswordRequest]) (*connect.Response[user_service.ChangePasswordResponse], error) {
	return c.changePassword.CallUnary(ctx, req)
}

// NotifyAccountClosure calls user_service.AuthenticationService.NotifyAccountClosure.
func (c *authenticationServiceClient) NotifyAccountClosure(ctx context.Context, req *connect.Request[user_service.NotifyAccountClosureRequest]) (*connect.Response[user_service.NotifyAccountClosureResponse], error) {
	return c.notifyAccountClosure.CallUnary(ctx, req)
}

// GetSignedCookie calls user_service.AuthenticationService.GetSignedCookie.
func (c *authenticationServiceClient) GetSignedCookie(ctx context.Context, req *connect.Request[user_service.GetSignedCookieRequest]) (*connect.Response[user_service.SignedCookieResponse], error) {
	return c.getSignedCookie.CallUnary(ctx, req)
}

// InstallSignedCookie calls user_service.AuthenticationService.InstallSignedCookie.
func (c *authenticationServiceClient) InstallSignedCookie(ctx context.Context, req *connect.Request[user_service.SignedCookieResponse]) (*connect.Response[user_service.InstallSignedCookieResponse], error) {
	return c.installSignedCookie.CallUnary(ctx, req)
}

// GetAPIKey calls user_service.AuthenticationService.GetAPIKey.
func (c *authenticationServiceClient) GetAPIKey(ctx context.Context, req *connect.Request[user_service.GetAPIKeyRequest]) (*connect.Response[user_service.GetAPIKeyResponse], error) {
	return c.getAPIKey.CallUnary(ctx, req)
}

// AuthenticationServiceHandler is an implementation of the user_service.AuthenticationService
// service.
type AuthenticationServiceHandler interface {
	Login(context.Context, *connect.Request[user_service.UserLoginRequest]) (*connect.Response[user_service.LoginResponse], error)
	Logout(context.Context, *connect.Request[user_service.UserLogoutRequest]) (*connect.Response[user_service.LogoutResponse], error)
	GetSocketToken(context.Context, *connect.Request[user_service.SocketTokenRequest]) (*connect.Response[user_service.SocketTokenResponse], error)
	ResetPasswordStep1(context.Context, *connect.Request[user_service.ResetPasswordRequestStep1]) (*connect.Response[user_service.ResetPasswordResponse], error)
	ResetPasswordStep2(context.Context, *connect.Request[user_service.ResetPasswordRequestStep2]) (*connect.Response[user_service.ResetPasswordResponse], error)
	ChangePassword(context.Context, *connect.Request[user_service.ChangePasswordRequest]) (*connect.Response[user_service.ChangePasswordResponse], error)
	NotifyAccountClosure(context.Context, *connect.Request[user_service.NotifyAccountClosureRequest]) (*connect.Response[user_service.NotifyAccountClosureResponse], error)
	// These two temporary endpoints for migrating everyone to naked domain:
	GetSignedCookie(context.Context, *connect.Request[user_service.GetSignedCookieRequest]) (*connect.Response[user_service.SignedCookieResponse], error)
	InstallSignedCookie(context.Context, *connect.Request[user_service.SignedCookieResponse]) (*connect.Response[user_service.InstallSignedCookieResponse], error)
	GetAPIKey(context.Context, *connect.Request[user_service.GetAPIKeyRequest]) (*connect.Response[user_service.GetAPIKeyResponse], error)
}

// NewAuthenticationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthenticationServiceHandler(svc AuthenticationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authenticationServiceMethods := user_service.File_proto_user_service_user_service_proto.Services().ByName("AuthenticationService").Methods()
	authenticationServiceLoginHandler := connect.NewUnaryHandler(
		AuthenticationServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authenticationServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceLogoutHandler := connect.NewUnaryHandler(
		AuthenticationServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(authenticationServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceGetSocketTokenHandler := connect.NewUnaryHandler(
		AuthenticationServiceGetSocketTokenProcedure,
		svc.GetSocketToken,
		connect.WithSchema(authenticationServiceMethods.ByName("GetSocketToken")),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceResetPasswordStep1Handler := connect.NewUnaryHandler(
		AuthenticationServiceResetPasswordStep1Procedure,
		svc.ResetPasswordStep1,
		connect.WithSchema(authenticationServiceMethods.ByName("ResetPasswordStep1")),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceResetPasswordStep2Handler := connect.NewUnaryHandler(
		AuthenticationServiceResetPasswordStep2Procedure,
		svc.ResetPasswordStep2,
		connect.WithSchema(authenticationServiceMethods.ByName("ResetPasswordStep2")),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceChangePasswordHandler := connect.NewUnaryHandler(
		AuthenticationServiceChangePasswordProcedure,
		svc.ChangePassword,
		connect.WithSchema(authenticationServiceMethods.ByName("ChangePassword")),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceNotifyAccountClosureHandler := connect.NewUnaryHandler(
		AuthenticationServiceNotifyAccountClosureProcedure,
		svc.NotifyAccountClosure,
		connect.WithSchema(authenticationServiceMethods.ByName("NotifyAccountClosure")),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceGetSignedCookieHandler := connect.NewUnaryHandler(
		AuthenticationServiceGetSignedCookieProcedure,
		svc.GetSignedCookie,
		connect.WithSchema(authenticationServiceMethods.ByName("GetSignedCookie")),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceInstallSignedCookieHandler := connect.NewUnaryHandler(
		AuthenticationServiceInstallSignedCookieProcedure,
		svc.InstallSignedCookie,
		connect.WithSchema(authenticationServiceMethods.ByName("InstallSignedCookie")),
		connect.WithHandlerOptions(opts...),
	)
	authenticationServiceGetAPIKeyHandler := connect.NewUnaryHandler(
		AuthenticationServiceGetAPIKeyProcedure,
		svc.GetAPIKey,
		connect.WithSchema(authenticationServiceMethods.ByName("GetAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user_service.AuthenticationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthenticationServiceLoginProcedure:
			authenticationServiceLoginHandler.ServeHTTP(w, r)
		case AuthenticationServiceLogoutProcedure:
			authenticationServiceLogoutHandler.ServeHTTP(w, r)
		case AuthenticationServiceGetSocketTokenProcedure:
			authenticationServiceGetSocketTokenHandler.ServeHTTP(w, r)
		case AuthenticationServiceResetPasswordStep1Procedure:
			authenticationServiceResetPasswordStep1Handler.ServeHTTP(w, r)
		case AuthenticationServiceResetPasswordStep2Procedure:
			authenticationServiceResetPasswordStep2Handler.ServeHTTP(w, r)
		case AuthenticationServiceChangePasswordProcedure:
			authenticationServiceChangePasswordHandler.ServeHTTP(w, r)
		case AuthenticationServiceNotifyAccountClosureProcedure:
			authenticationServiceNotifyAccountClosureHandler.ServeHTTP(w, r)
		case AuthenticationServiceGetSignedCookieProcedure:
			authenticationServiceGetSignedCookieHandler.ServeHTTP(w, r)
		case AuthenticationServiceInstallSignedCookieProcedure:
			authenticationServiceInstallSignedCookieHandler.ServeHTTP(w, r)
		case AuthenticationServiceGetAPIKeyProcedure:
			authenticationServiceGetAPIKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthenticationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthenticationServiceHandler struct{}

func (UnimplementedAuthenticationServiceHandler) Login(context.Context, *connect.Request[user_service.UserLoginRequest]) (*connect.Response[user_service.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthenticationService.Login is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) Logout(context.Context, *connect.Request[user_service.UserLogoutRequest]) (*connect.Response[user_service.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthenticationService.Logout is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) GetSocketToken(context.Context, *connect.Request[user_service.SocketTokenRequest]) (*connect.Response[user_service.SocketTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthenticationService.GetSocketToken is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) ResetPasswordStep1(context.Context, *connect.Request[user_service.ResetPasswordRequestStep1]) (*connect.Response[user_service.ResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthenticationService.ResetPasswordStep1 is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) ResetPasswordStep2(context.Context, *connect.Request[user_service.ResetPasswordRequestStep2]) (*connect.Response[user_service.ResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthenticationService.ResetPasswordStep2 is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) ChangePassword(context.Context, *connect.Request[user_service.ChangePasswordRequest]) (*connect.Response[user_service.ChangePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthenticationService.ChangePassword is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) NotifyAccountClosure(context.Context, *connect.Request[user_service.NotifyAccountClosureRequest]) (*connect.Response[user_service.NotifyAccountClosureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthenticationService.NotifyAccountClosure is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) GetSignedCookie(context.Context, *connect.Request[user_service.GetSignedCookieRequest]) (*connect.Response[user_service.SignedCookieResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthenticationService.GetSignedCookie is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) InstallSignedCookie(context.Context, *connect.Request[user_service.SignedCookieResponse]) (*connect.Response[user_service.InstallSignedCookieResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthenticationService.InstallSignedCookie is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) GetAPIKey(context.Context, *connect.Request[user_service.GetAPIKeyRequest]) (*connect.Response[user_service.GetAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthenticationService.GetAPIKey is not implemented"))
}

// RegistrationServiceClient is a client for the user_service.RegistrationService service.
type RegistrationServiceClient interface {
	Register(context.Context, *connect.Request[user_service.UserRegistrationRequest]) (*connect.Response[user_service.RegistrationResponse], error)
}

// NewRegistrationServiceClient constructs a client for the user_service.RegistrationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRegistrationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RegistrationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	registrationServiceMethods := user_service.File_proto_user_service_user_service_proto.Services().ByName("RegistrationService").Methods()
	return &registrationServiceClient{
		register: connect.NewClient[user_service.UserRegistrationRequest, user_service.RegistrationResponse](
			httpClient,
			baseURL+RegistrationServiceRegisterProcedure,
			connect.WithSchema(registrationServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
	}
}

// registrationServiceClient implements RegistrationServiceClient.
type registrationServiceClient struct {
	register *connect.Client[user_service.UserRegistrationRequest, user_service.RegistrationResponse]
}

// Register calls user_service.RegistrationService.Register.
func (c *registrationServiceClient) Register(ctx context.Context, req *connect.Request[user_service.UserRegistrationRequest]) (*connect.Response[user_service.RegistrationResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// RegistrationServiceHandler is an implementation of the user_service.RegistrationService service.
type RegistrationServiceHandler interface {
	Register(context.Context, *connect.Request[user_service.UserRegistrationRequest]) (*connect.Response[user_service.RegistrationResponse], error)
}

// NewRegistrationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRegistrationServiceHandler(svc RegistrationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	registrationServiceMethods := user_service.File_proto_user_service_user_service_proto.Services().ByName("RegistrationService").Methods()
	registrationServiceRegisterHandler := connect.NewUnaryHandler(
		RegistrationServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(registrationServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user_service.RegistrationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RegistrationServiceRegisterProcedure:
			registrationServiceRegisterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRegistrationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRegistrationServiceHandler struct{}

func (UnimplementedRegistrationServiceHandler) Register(context.Context, *connect.Request[user_service.UserRegistrationRequest]) (*connect.Response[user_service.RegistrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.RegistrationService.Register is not implemented"))
}

// ProfileServiceClient is a client for the user_service.ProfileService service.
type ProfileServiceClient interface {
	GetRatings(context.Context, *connect.Request[user_service.RatingsRequest]) (*connect.Response[user_service.RatingsResponse], error)
	GetStats(context.Context, *connect.Request[user_service.StatsRequest]) (*connect.Response[user_service.StatsResponse], error)
	GetProfile(context.Context, *connect.Request[user_service.ProfileRequest]) (*connect.Response[user_service.ProfileResponse], error)
	GetPersonalInfo(context.Context, *connect.Request[user_service.PersonalInfoRequest]) (*connect.Response[user_service.PersonalInfoResponse], error)
	UpdatePersonalInfo(context.Context, *connect.Request[user_service.UpdatePersonalInfoRequest]) (*connect.Response[user_service.UpdatePersonalInfoResponse], error)
	UpdateAvatar(context.Context, *connect.Request[user_service.UpdateAvatarRequest]) (*connect.Response[user_service.UpdateAvatarResponse], error)
	RemoveAvatar(context.Context, *connect.Request[user_service.RemoveAvatarRequest]) (*connect.Response[user_service.RemoveAvatarResponse], error)
	GetBriefProfiles(context.Context, *connect.Request[user_service.BriefProfilesRequest]) (*connect.Response[user_service.BriefProfilesResponse], error)
}

// NewProfileServiceClient constructs a client for the user_service.ProfileService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProfileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProfileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	profileServiceMethods := user_service.File_proto_user_service_user_service_proto.Services().ByName("ProfileService").Methods()
	return &profileServiceClient{
		getRatings: connect.NewClient[user_service.RatingsRequest, user_service.RatingsResponse](
			httpClient,
			baseURL+ProfileServiceGetRatingsProcedure,
			connect.WithSchema(profileServiceMethods.ByName("GetRatings")),
			connect.WithClientOptions(opts...),
		),
		getStats: connect.NewClient[user_service.StatsRequest, user_service.StatsResponse](
			httpClient,
			baseURL+ProfileServiceGetStatsProcedure,
			connect.WithSchema(profileServiceMethods.ByName("GetStats")),
			connect.WithClientOptions(opts...),
		),
		getProfile: connect.NewClient[user_service.ProfileRequest, user_service.ProfileResponse](
			httpClient,
			baseURL+ProfileServiceGetProfileProcedure,
			connect.WithSchema(profileServiceMethods.ByName("GetProfile")),
			connect.WithClientOptions(opts...),
		),
		getPersonalInfo: connect.NewClient[user_service.PersonalInfoRequest, user_service.PersonalInfoResponse](
			httpClient,
			baseURL+ProfileServiceGetPersonalInfoProcedure,
			connect.WithSchema(profileServiceMethods.ByName("GetPersonalInfo")),
			connect.WithClientOptions(opts...),
		),
		updatePersonalInfo: connect.NewClient[user_service.UpdatePersonalInfoRequest, user_service.UpdatePersonalInfoResponse](
			httpClient,
			baseURL+ProfileServiceUpdatePersonalInfoProcedure,
			connect.WithSchema(profileServiceMethods.ByName("UpdatePersonalInfo")),
			connect.WithClientOptions(opts...),
		),
		updateAvatar: connect.NewClient[user_service.UpdateAvatarRequest, user_service.UpdateAvatarResponse](
			httpClient,
			baseURL+ProfileServiceUpdateAvatarProcedure,
			connect.WithSchema(profileServiceMethods.ByName("UpdateAvatar")),
			connect.WithClientOptions(opts...),
		),
		removeAvatar: connect.NewClient[user_service.RemoveAvatarRequest, user_service.RemoveAvatarResponse](
			httpClient,
			baseURL+ProfileServiceRemoveAvatarProcedure,
			connect.WithSchema(profileServiceMethods.ByName("RemoveAvatar")),
			connect.WithClientOptions(opts...),
		),
		getBriefProfiles: connect.NewClient[user_service.BriefProfilesRequest, user_service.BriefProfilesResponse](
			httpClient,
			baseURL+ProfileServiceGetBriefProfilesProcedure,
			connect.WithSchema(profileServiceMethods.ByName("GetBriefProfiles")),
			connect.WithClientOptions(opts...),
		),
	}
}

// profileServiceClient implements ProfileServiceClient.
type profileServiceClient struct {
	getRatings         *connect.Client[user_service.RatingsRequest, user_service.RatingsResponse]
	getStats           *connect.Client[user_service.StatsRequest, user_service.StatsResponse]
	getProfile         *connect.Client[user_service.ProfileRequest, user_service.ProfileResponse]
	getPersonalInfo    *connect.Client[user_service.PersonalInfoRequest, user_service.PersonalInfoResponse]
	updatePersonalInfo *connect.Client[user_service.UpdatePersonalInfoRequest, user_service.UpdatePersonalInfoResponse]
	updateAvatar       *connect.Client[user_service.UpdateAvatarRequest, user_service.UpdateAvatarResponse]
	removeAvatar       *connect.Client[user_service.RemoveAvatarRequest, user_service.RemoveAvatarResponse]
	getBriefProfiles   *connect.Client[user_service.BriefProfilesRequest, user_service.BriefProfilesResponse]
}

// GetRatings calls user_service.ProfileService.GetRatings.
func (c *profileServiceClient) GetRatings(ctx context.Context, req *connect.Request[user_service.RatingsRequest]) (*connect.Response[user_service.RatingsResponse], error) {
	return c.getRatings.CallUnary(ctx, req)
}

// GetStats calls user_service.ProfileService.GetStats.
func (c *profileServiceClient) GetStats(ctx context.Context, req *connect.Request[user_service.StatsRequest]) (*connect.Response[user_service.StatsResponse], error) {
	return c.getStats.CallUnary(ctx, req)
}

// GetProfile calls user_service.ProfileService.GetProfile.
func (c *profileServiceClient) GetProfile(ctx context.Context, req *connect.Request[user_service.ProfileRequest]) (*connect.Response[user_service.ProfileResponse], error) {
	return c.getProfile.CallUnary(ctx, req)
}

// GetPersonalInfo calls user_service.ProfileService.GetPersonalInfo.
func (c *profileServiceClient) GetPersonalInfo(ctx context.Context, req *connect.Request[user_service.PersonalInfoRequest]) (*connect.Response[user_service.PersonalInfoResponse], error) {
	return c.getPersonalInfo.CallUnary(ctx, req)
}

// UpdatePersonalInfo calls user_service.ProfileService.UpdatePersonalInfo.
func (c *profileServiceClient) UpdatePersonalInfo(ctx context.Context, req *connect.Request[user_service.UpdatePersonalInfoRequest]) (*connect.Response[user_service.UpdatePersonalInfoResponse], error) {
	return c.updatePersonalInfo.CallUnary(ctx, req)
}

// UpdateAvatar calls user_service.ProfileService.UpdateAvatar.
func (c *profileServiceClient) UpdateAvatar(ctx context.Context, req *connect.Request[user_service.UpdateAvatarRequest]) (*connect.Response[user_service.UpdateAvatarResponse], error) {
	return c.updateAvatar.CallUnary(ctx, req)
}

// RemoveAvatar calls user_service.ProfileService.RemoveAvatar.
func (c *profileServiceClient) RemoveAvatar(ctx context.Context, req *connect.Request[user_service.RemoveAvatarRequest]) (*connect.Response[user_service.RemoveAvatarResponse], error) {
	return c.removeAvatar.CallUnary(ctx, req)
}

// GetBriefProfiles calls user_service.ProfileService.GetBriefProfiles.
func (c *profileServiceClient) GetBriefProfiles(ctx context.Context, req *connect.Request[user_service.BriefProfilesRequest]) (*connect.Response[user_service.BriefProfilesResponse], error) {
	return c.getBriefProfiles.CallUnary(ctx, req)
}

// ProfileServiceHandler is an implementation of the user_service.ProfileService service.
type ProfileServiceHandler interface {
	GetRatings(context.Context, *connect.Request[user_service.RatingsRequest]) (*connect.Response[user_service.RatingsResponse], error)
	GetStats(context.Context, *connect.Request[user_service.StatsRequest]) (*connect.Response[user_service.StatsResponse], error)
	GetProfile(context.Context, *connect.Request[user_service.ProfileRequest]) (*connect.Response[user_service.ProfileResponse], error)
	GetPersonalInfo(context.Context, *connect.Request[user_service.PersonalInfoRequest]) (*connect.Response[user_service.PersonalInfoResponse], error)
	UpdatePersonalInfo(context.Context, *connect.Request[user_service.UpdatePersonalInfoRequest]) (*connect.Response[user_service.UpdatePersonalInfoResponse], error)
	UpdateAvatar(context.Context, *connect.Request[user_service.UpdateAvatarRequest]) (*connect.Response[user_service.UpdateAvatarResponse], error)
	RemoveAvatar(context.Context, *connect.Request[user_service.RemoveAvatarRequest]) (*connect.Response[user_service.RemoveAvatarResponse], error)
	GetBriefProfiles(context.Context, *connect.Request[user_service.BriefProfilesRequest]) (*connect.Response[user_service.BriefProfilesResponse], error)
}

// NewProfileServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProfileServiceHandler(svc ProfileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	profileServiceMethods := user_service.File_proto_user_service_user_service_proto.Services().ByName("ProfileService").Methods()
	profileServiceGetRatingsHandler := connect.NewUnaryHandler(
		ProfileServiceGetRatingsProcedure,
		svc.GetRatings,
		connect.WithSchema(profileServiceMethods.ByName("GetRatings")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceGetStatsHandler := connect.NewUnaryHandler(
		ProfileServiceGetStatsProcedure,
		svc.GetStats,
		connect.WithSchema(profileServiceMethods.ByName("GetStats")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceGetProfileHandler := connect.NewUnaryHandler(
		ProfileServiceGetProfileProcedure,
		svc.GetProfile,
		connect.WithSchema(profileServiceMethods.ByName("GetProfile")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceGetPersonalInfoHandler := connect.NewUnaryHandler(
		ProfileServiceGetPersonalInfoProcedure,
		svc.GetPersonalInfo,
		connect.WithSchema(profileServiceMethods.ByName("GetPersonalInfo")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceUpdatePersonalInfoHandler := connect.NewUnaryHandler(
		ProfileServiceUpdatePersonalInfoProcedure,
		svc.UpdatePersonalInfo,
		connect.WithSchema(profileServiceMethods.ByName("UpdatePersonalInfo")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceUpdateAvatarHandler := connect.NewUnaryHandler(
		ProfileServiceUpdateAvatarProcedure,
		svc.UpdateAvatar,
		connect.WithSchema(profileServiceMethods.ByName("UpdateAvatar")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceRemoveAvatarHandler := connect.NewUnaryHandler(
		ProfileServiceRemoveAvatarProcedure,
		svc.RemoveAvatar,
		connect.WithSchema(profileServiceMethods.ByName("RemoveAvatar")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceGetBriefProfilesHandler := connect.NewUnaryHandler(
		ProfileServiceGetBriefProfilesProcedure,
		svc.GetBriefProfiles,
		connect.WithSchema(profileServiceMethods.ByName("GetBriefProfiles")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user_service.ProfileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProfileServiceGetRatingsProcedure:
			profileServiceGetRatingsHandler.ServeHTTP(w, r)
		case ProfileServiceGetStatsProcedure:
			profileServiceGetStatsHandler.ServeHTTP(w, r)
		case ProfileServiceGetProfileProcedure:
			profileServiceGetProfileHandler.ServeHTTP(w, r)
		case ProfileServiceGetPersonalInfoProcedure:
			profileServiceGetPersonalInfoHandler.ServeHTTP(w, r)
		case ProfileServiceUpdatePersonalInfoProcedure:
			profileServiceUpdatePersonalInfoHandler.ServeHTTP(w, r)
		case ProfileServiceUpdateAvatarProcedure:
			profileServiceUpdateAvatarHandler.ServeHTTP(w, r)
		case ProfileServiceRemoveAvatarProcedure:
			profileServiceRemoveAvatarHandler.ServeHTTP(w, r)
		case ProfileServiceGetBriefProfilesProcedure:
			profileServiceGetBriefProfilesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProfileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProfileServiceHandler struct{}

func (UnimplementedProfileServiceHandler) GetRatings(context.Context, *connect.Request[user_service.RatingsRequest]) (*connect.Response[user_service.RatingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.ProfileService.GetRatings is not implemented"))
}

func (UnimplementedProfileServiceHandler) GetStats(context.Context, *connect.Request[user_service.StatsRequest]) (*connect.Response[user_service.StatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.ProfileService.GetStats is not implemented"))
}

func (UnimplementedProfileServiceHandler) GetProfile(context.Context, *connect.Request[user_service.ProfileRequest]) (*connect.Response[user_service.ProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.ProfileService.GetProfile is not implemented"))
}

func (UnimplementedProfileServiceHandler) GetPersonalInfo(context.Context, *connect.Request[user_service.PersonalInfoRequest]) (*connect.Response[user_service.PersonalInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.ProfileService.GetPersonalInfo is not implemented"))
}

func (UnimplementedProfileServiceHandler) UpdatePersonalInfo(context.Context, *connect.Request[user_service.UpdatePersonalInfoRequest]) (*connect.Response[user_service.UpdatePersonalInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.ProfileService.UpdatePersonalInfo is not implemented"))
}

func (UnimplementedProfileServiceHandler) UpdateAvatar(context.Context, *connect.Request[user_service.UpdateAvatarRequest]) (*connect.Response[user_service.UpdateAvatarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.ProfileService.UpdateAvatar is not implemented"))
}

func (UnimplementedProfileServiceHandler) RemoveAvatar(context.Context, *connect.Request[user_service.RemoveAvatarRequest]) (*connect.Response[user_service.RemoveAvatarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.ProfileService.RemoveAvatar is not implemented"))
}

func (UnimplementedProfileServiceHandler) GetBriefProfiles(context.Context, *connect.Request[user_service.BriefProfilesRequest]) (*connect.Response[user_service.BriefProfilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.ProfileService.GetBriefProfiles is not implemented"))
}

// AutocompleteServiceClient is a client for the user_service.AutocompleteService service.
type AutocompleteServiceClient interface {
	GetCompletion(context.Context, *connect.Request[user_service.UsernameSearchRequest]) (*connect.Response[user_service.UsernameSearchResponse], error)
}

// NewAutocompleteServiceClient constructs a client for the user_service.AutocompleteService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAutocompleteServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AutocompleteServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	autocompleteServiceMethods := user_service.File_proto_user_service_user_service_proto.Services().ByName("AutocompleteService").Methods()
	return &autocompleteServiceClient{
		getCompletion: connect.NewClient[user_service.UsernameSearchRequest, user_service.UsernameSearchResponse](
			httpClient,
			baseURL+AutocompleteServiceGetCompletionProcedure,
			connect.WithSchema(autocompleteServiceMethods.ByName("GetCompletion")),
			connect.WithClientOptions(opts...),
		),
	}
}

// autocompleteServiceClient implements AutocompleteServiceClient.
type autocompleteServiceClient struct {
	getCompletion *connect.Client[user_service.UsernameSearchRequest, user_service.UsernameSearchResponse]
}

// GetCompletion calls user_service.AutocompleteService.GetCompletion.
func (c *autocompleteServiceClient) GetCompletion(ctx context.Context, req *connect.Request[user_service.UsernameSearchRequest]) (*connect.Response[user_service.UsernameSearchResponse], error) {
	return c.getCompletion.CallUnary(ctx, req)
}

// AutocompleteServiceHandler is an implementation of the user_service.AutocompleteService service.
type AutocompleteServiceHandler interface {
	GetCompletion(context.Context, *connect.Request[user_service.UsernameSearchRequest]) (*connect.Response[user_service.UsernameSearchResponse], error)
}

// NewAutocompleteServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAutocompleteServiceHandler(svc AutocompleteServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	autocompleteServiceMethods := user_service.File_proto_user_service_user_service_proto.Services().ByName("AutocompleteService").Methods()
	autocompleteServiceGetCompletionHandler := connect.NewUnaryHandler(
		AutocompleteServiceGetCompletionProcedure,
		svc.GetCompletion,
		connect.WithSchema(autocompleteServiceMethods.ByName("GetCompletion")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user_service.AutocompleteService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AutocompleteServiceGetCompletionProcedure:
			autocompleteServiceGetCompletionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAutocompleteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAutocompleteServiceHandler struct{}

func (UnimplementedAutocompleteServiceHandler) GetCompletion(context.Context, *connect.Request[user_service.UsernameSearchRequest]) (*connect.Response[user_service.UsernameSearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AutocompleteService.GetCompletion is not implemented"))
}

// SocializeServiceClient is a client for the user_service.SocializeService service.
type SocializeServiceClient interface {
	AddFollow(context.Context, *connect.Request[user_service.AddFollowRequest]) (*connect.Response[user_service.OKResponse], error)
	RemoveFollow(context.Context, *connect.Request[user_service.RemoveFollowRequest]) (*connect.Response[user_service.OKResponse], error)
	GetFollows(context.Context, *connect.Request[user_service.GetFollowsRequest]) (*connect.Response[user_service.GetFollowsResponse], error)
	AddBlock(context.Context, *connect.Request[user_service.AddBlockRequest]) (*connect.Response[user_service.OKResponse], error)
	RemoveBlock(context.Context, *connect.Request[user_service.RemoveBlockRequest]) (*connect.Response[user_service.OKResponse], error)
	GetBlocks(context.Context, *connect.Request[user_service.GetBlocksRequest]) (*connect.Response[user_service.GetBlocksResponse], error)
	// GetFullBlocks gets players who blocked us AND players we've blocked
	// together.
	GetFullBlocks(context.Context, *connect.Request[user_service.GetFullBlocksRequest]) (*connect.Response[user_service.GetFullBlocksResponse], error)
	GetActiveChatChannels(context.Context, *connect.Request[user_service.GetActiveChatChannelsRequest]) (*connect.Response[user_service.ActiveChatChannels], error)
	GetChatsForChannel(context.Context, *connect.Request[user_service.GetChatsRequest]) (*connect.Response[ipc.ChatMessages], error)
}

// NewSocializeServiceClient constructs a client for the user_service.SocializeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSocializeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SocializeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	socializeServiceMethods := user_service.File_proto_user_service_user_service_proto.Services().ByName("SocializeService").Methods()
	return &socializeServiceClient{
		addFollow: connect.NewClient[user_service.AddFollowRequest, user_service.OKResponse](
			httpClient,
			baseURL+SocializeServiceAddFollowProcedure,
			connect.WithSchema(socializeServiceMethods.ByName("AddFollow")),
			connect.WithClientOptions(opts...),
		),
		removeFollow: connect.NewClient[user_service.RemoveFollowRequest, user_service.OKResponse](
			httpClient,
			baseURL+SocializeServiceRemoveFollowProcedure,
			connect.WithSchema(socializeServiceMethods.ByName("RemoveFollow")),
			connect.WithClientOptions(opts...),
		),
		getFollows: connect.NewClient[user_service.GetFollowsRequest, user_service.GetFollowsResponse](
			httpClient,
			baseURL+SocializeServiceGetFollowsProcedure,
			connect.WithSchema(socializeServiceMethods.ByName("GetFollows")),
			connect.WithClientOptions(opts...),
		),
		addBlock: connect.NewClient[user_service.AddBlockRequest, user_service.OKResponse](
			httpClient,
			baseURL+SocializeServiceAddBlockProcedure,
			connect.WithSchema(socializeServiceMethods.ByName("AddBlock")),
			connect.WithClientOptions(opts...),
		),
		removeBlock: connect.NewClient[user_service.RemoveBlockRequest, user_service.OKResponse](
			httpClient,
			baseURL+SocializeServiceRemoveBlockProcedure,
			connect.WithSchema(socializeServiceMethods.ByName("RemoveBlock")),
			connect.WithClientOptions(opts...),
		),
		getBlocks: connect.NewClient[user_service.GetBlocksRequest, user_service.GetBlocksResponse](
			httpClient,
			baseURL+SocializeServiceGetBlocksProcedure,
			connect.WithSchema(socializeServiceMethods.ByName("GetBlocks")),
			connect.WithClientOptions(opts...),
		),
		getFullBlocks: connect.NewClient[user_service.GetFullBlocksRequest, user_service.GetFullBlocksResponse](
			httpClient,
			baseURL+SocializeServiceGetFullBlocksProcedure,
			connect.WithSchema(socializeServiceMethods.ByName("GetFullBlocks")),
			connect.WithClientOptions(opts...),
		),
		getActiveChatChannels: connect.NewClient[user_service.GetActiveChatChannelsRequest, user_service.ActiveChatChannels](
			httpClient,
			baseURL+SocializeServiceGetActiveChatChannelsProcedure,
			connect.WithSchema(socializeServiceMethods.ByName("GetActiveChatChannels")),
			connect.WithClientOptions(opts...),
		),
		getChatsForChannel: connect.NewClient[user_service.GetChatsRequest, ipc.ChatMessages](
			httpClient,
			baseURL+SocializeServiceGetChatsForChannelProcedure,
			connect.WithSchema(socializeServiceMethods.ByName("GetChatsForChannel")),
			connect.WithClientOptions(opts...),
		),
	}
}

// socializeServiceClient implements SocializeServiceClient.
type socializeServiceClient struct {
	addFollow             *connect.Client[user_service.AddFollowRequest, user_service.OKResponse]
	removeFollow          *connect.Client[user_service.RemoveFollowRequest, user_service.OKResponse]
	getFollows            *connect.Client[user_service.GetFollowsRequest, user_service.GetFollowsResponse]
	addBlock              *connect.Client[user_service.AddBlockRequest, user_service.OKResponse]
	removeBlock           *connect.Client[user_service.RemoveBlockRequest, user_service.OKResponse]
	getBlocks             *connect.Client[user_service.GetBlocksRequest, user_service.GetBlocksResponse]
	getFullBlocks         *connect.Client[user_service.GetFullBlocksRequest, user_service.GetFullBlocksResponse]
	getActiveChatChannels *connect.Client[user_service.GetActiveChatChannelsRequest, user_service.ActiveChatChannels]
	getChatsForChannel    *connect.Client[user_service.GetChatsRequest, ipc.ChatMessages]
}

// AddFollow calls user_service.SocializeService.AddFollow.
func (c *socializeServiceClient) AddFollow(ctx context.Context, req *connect.Request[user_service.AddFollowRequest]) (*connect.Response[user_service.OKResponse], error) {
	return c.addFollow.CallUnary(ctx, req)
}

// RemoveFollow calls user_service.SocializeService.RemoveFollow.
func (c *socializeServiceClient) RemoveFollow(ctx context.Context, req *connect.Request[user_service.RemoveFollowRequest]) (*connect.Response[user_service.OKResponse], error) {
	return c.removeFollow.CallUnary(ctx, req)
}

// GetFollows calls user_service.SocializeService.GetFollows.
func (c *socializeServiceClient) GetFollows(ctx context.Context, req *connect.Request[user_service.GetFollowsRequest]) (*connect.Response[user_service.GetFollowsResponse], error) {
	return c.getFollows.CallUnary(ctx, req)
}

// AddBlock calls user_service.SocializeService.AddBlock.
func (c *socializeServiceClient) AddBlock(ctx context.Context, req *connect.Request[user_service.AddBlockRequest]) (*connect.Response[user_service.OKResponse], error) {
	return c.addBlock.CallUnary(ctx, req)
}

// RemoveBlock calls user_service.SocializeService.RemoveBlock.
func (c *socializeServiceClient) RemoveBlock(ctx context.Context, req *connect.Request[user_service.RemoveBlockRequest]) (*connect.Response[user_service.OKResponse], error) {
	return c.removeBlock.CallUnary(ctx, req)
}

// GetBlocks calls user_service.SocializeService.GetBlocks.
func (c *socializeServiceClient) GetBlocks(ctx context.Context, req *connect.Request[user_service.GetBlocksRequest]) (*connect.Response[user_service.GetBlocksResponse], error) {
	return c.getBlocks.CallUnary(ctx, req)
}

// GetFullBlocks calls user_service.SocializeService.GetFullBlocks.
func (c *socializeServiceClient) GetFullBlocks(ctx context.Context, req *connect.Request[user_service.GetFullBlocksRequest]) (*connect.Response[user_service.GetFullBlocksResponse], error) {
	return c.getFullBlocks.CallUnary(ctx, req)
}

// GetActiveChatChannels calls user_service.SocializeService.GetActiveChatChannels.
func (c *socializeServiceClient) GetActiveChatChannels(ctx context.Context, req *connect.Request[user_service.GetActiveChatChannelsRequest]) (*connect.Response[user_service.ActiveChatChannels], error) {
	return c.getActiveChatChannels.CallUnary(ctx, req)
}

// GetChatsForChannel calls user_service.SocializeService.GetChatsForChannel.
func (c *socializeServiceClient) GetChatsForChannel(ctx context.Context, req *connect.Request[user_service.GetChatsRequest]) (*connect.Response[ipc.ChatMessages], error) {
	return c.getChatsForChannel.CallUnary(ctx, req)
}

// SocializeServiceHandler is an implementation of the user_service.SocializeService service.
type SocializeServiceHandler interface {
	AddFollow(context.Context, *connect.Request[user_service.AddFollowRequest]) (*connect.Response[user_service.OKResponse], error)
	RemoveFollow(context.Context, *connect.Request[user_service.RemoveFollowRequest]) (*connect.Response[user_service.OKResponse], error)
	GetFollows(context.Context, *connect.Request[user_service.GetFollowsRequest]) (*connect.Response[user_service.GetFollowsResponse], error)
	AddBlock(context.Context, *connect.Request[user_service.AddBlockRequest]) (*connect.Response[user_service.OKResponse], error)
	RemoveBlock(context.Context, *connect.Request[user_service.RemoveBlockRequest]) (*connect.Response[user_service.OKResponse], error)
	GetBlocks(context.Context, *connect.Request[user_service.GetBlocksRequest]) (*connect.Response[user_service.GetBlocksResponse], error)
	// GetFullBlocks gets players who blocked us AND players we've blocked
	// together.
	GetFullBlocks(context.Context, *connect.Request[user_service.GetFullBlocksRequest]) (*connect.Response[user_service.GetFullBlocksResponse], error)
	GetActiveChatChannels(context.Context, *connect.Request[user_service.GetActiveChatChannelsRequest]) (*connect.Response[user_service.ActiveChatChannels], error)
	GetChatsForChannel(context.Context, *connect.Request[user_service.GetChatsRequest]) (*connect.Response[ipc.ChatMessages], error)
}

// NewSocializeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSocializeServiceHandler(svc SocializeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	socializeServiceMethods := user_service.File_proto_user_service_user_service_proto.Services().ByName("SocializeService").Methods()
	socializeServiceAddFollowHandler := connect.NewUnaryHandler(
		SocializeServiceAddFollowProcedure,
		svc.AddFollow,
		connect.WithSchema(socializeServiceMethods.ByName("AddFollow")),
		connect.WithHandlerOptions(opts...),
	)
	socializeServiceRemoveFollowHandler := connect.NewUnaryHandler(
		SocializeServiceRemoveFollowProcedure,
		svc.RemoveFollow,
		connect.WithSchema(socializeServiceMethods.ByName("RemoveFollow")),
		connect.WithHandlerOptions(opts...),
	)
	socializeServiceGetFollowsHandler := connect.NewUnaryHandler(
		SocializeServiceGetFollowsProcedure,
		svc.GetFollows,
		connect.WithSchema(socializeServiceMethods.ByName("GetFollows")),
		connect.WithHandlerOptions(opts...),
	)
	socializeServiceAddBlockHandler := connect.NewUnaryHandler(
		SocializeServiceAddBlockProcedure,
		svc.AddBlock,
		connect.WithSchema(socializeServiceMethods.ByName("AddBlock")),
		connect.WithHandlerOptions(opts...),
	)
	socializeServiceRemoveBlockHandler := connect.NewUnaryHandler(
		SocializeServiceRemoveBlockProcedure,
		svc.RemoveBlock,
		connect.WithSchema(socializeServiceMethods.ByName("RemoveBlock")),
		connect.WithHandlerOptions(opts...),
	)
	socializeServiceGetBlocksHandler := connect.NewUnaryHandler(
		SocializeServiceGetBlocksProcedure,
		svc.GetBlocks,
		connect.WithSchema(socializeServiceMethods.ByName("GetBlocks")),
		connect.WithHandlerOptions(opts...),
	)
	socializeServiceGetFullBlocksHandler := connect.NewUnaryHandler(
		SocializeServiceGetFullBlocksProcedure,
		svc.GetFullBlocks,
		connect.WithSchema(socializeServiceMethods.ByName("GetFullBlocks")),
		connect.WithHandlerOptions(opts...),
	)
	socializeServiceGetActiveChatChannelsHandler := connect.NewUnaryHandler(
		SocializeServiceGetActiveChatChannelsProcedure,
		svc.GetActiveChatChannels,
		connect.WithSchema(socializeServiceMethods.ByName("GetActiveChatChannels")),
		connect.WithHandlerOptions(opts...),
	)
	socializeServiceGetChatsForChannelHandler := connect.NewUnaryHandler(
		SocializeServiceGetChatsForChannelProcedure,
		svc.GetChatsForChannel,
		connect.WithSchema(socializeServiceMethods.ByName("GetChatsForChannel")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user_service.SocializeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SocializeServiceAddFollowProcedure:
			socializeServiceAddFollowHandler.ServeHTTP(w, r)
		case SocializeServiceRemoveFollowProcedure:
			socializeServiceRemoveFollowHandler.ServeHTTP(w, r)
		case SocializeServiceGetFollowsProcedure:
			socializeServiceGetFollowsHandler.ServeHTTP(w, r)
		case SocializeServiceAddBlockProcedure:
			socializeServiceAddBlockHandler.ServeHTTP(w, r)
		case SocializeServiceRemoveBlockProcedure:
			socializeServiceRemoveBlockHandler.ServeHTTP(w, r)
		case SocializeServiceGetBlocksProcedure:
			socializeServiceGetBlocksHandler.ServeHTTP(w, r)
		case SocializeServiceGetFullBlocksProcedure:
			socializeServiceGetFullBlocksHandler.ServeHTTP(w, r)
		case SocializeServiceGetActiveChatChannelsProcedure:
			socializeServiceGetActiveChatChannelsHandler.ServeHTTP(w, r)
		case SocializeServiceGetChatsForChannelProcedure:
			socializeServiceGetChatsForChannelHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSocializeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSocializeServiceHandler struct{}

func (UnimplementedSocializeServiceHandler) AddFollow(context.Context, *connect.Request[user_service.AddFollowRequest]) (*connect.Response[user_service.OKResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.SocializeService.AddFollow is not implemented"))
}

func (UnimplementedSocializeServiceHandler) RemoveFollow(context.Context, *connect.Request[user_service.RemoveFollowRequest]) (*connect.Response[user_service.OKResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.SocializeService.RemoveFollow is not implemented"))
}

func (UnimplementedSocializeServiceHandler) GetFollows(context.Context, *connect.Request[user_service.GetFollowsRequest]) (*connect.Response[user_service.GetFollowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.SocializeService.GetFollows is not implemented"))
}

func (UnimplementedSocializeServiceHandler) AddBlock(context.Context, *connect.Request[user_service.AddBlockRequest]) (*connect.Response[user_service.OKResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.SocializeService.AddBlock is not implemented"))
}

func (UnimplementedSocializeServiceHandler) RemoveBlock(context.Context, *connect.Request[user_service.RemoveBlockRequest]) (*connect.Response[user_service.OKResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.SocializeService.RemoveBlock is not implemented"))
}

func (UnimplementedSocializeServiceHandler) GetBlocks(context.Context, *connect.Request[user_service.GetBlocksRequest]) (*connect.Response[user_service.GetBlocksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.SocializeService.GetBlocks is not implemented"))
}

func (UnimplementedSocializeServiceHandler) GetFullBlocks(context.Context, *connect.Request[user_service.GetFullBlocksRequest]) (*connect.Response[user_service.GetFullBlocksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.SocializeService.GetFullBlocks is not implemented"))
}

func (UnimplementedSocializeServiceHandler) GetActiveChatChannels(context.Context, *connect.Request[user_service.GetActiveChatChannelsRequest]) (*connect.Response[user_service.ActiveChatChannels], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.SocializeService.GetActiveChatChannels is not implemented"))
}

func (UnimplementedSocializeServiceHandler) GetChatsForChannel(context.Context, *connect.Request[user_service.GetChatsRequest]) (*connect.Response[ipc.ChatMessages], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.SocializeService.GetChatsForChannel is not implemented"))
}

// IntegrationServiceClient is a client for the user_service.IntegrationService service.
type IntegrationServiceClient interface {
	GetIntegrations(context.Context, *connect.Request[user_service.GetIntegrationsRequest]) (*connect.Response[user_service.IntegrationsResponse], error)
	DeleteIntegration(context.Context, *connect.Request[user_service.DeleteIntegrationRequest]) (*connect.Response[user_service.DeleteIntegrationResponse], error)
}

// NewIntegrationServiceClient constructs a client for the user_service.IntegrationService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIntegrationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IntegrationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	integrationServiceMethods := user_service.File_proto_user_service_user_service_proto.Services().ByName("IntegrationService").Methods()
	return &integrationServiceClient{
		getIntegrations: connect.NewClient[user_service.GetIntegrationsRequest, user_service.IntegrationsResponse](
			httpClient,
			baseURL+IntegrationServiceGetIntegrationsProcedure,
			connect.WithSchema(integrationServiceMethods.ByName("GetIntegrations")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteIntegration: connect.NewClient[user_service.DeleteIntegrationRequest, user_service.DeleteIntegrationResponse](
			httpClient,
			baseURL+IntegrationServiceDeleteIntegrationProcedure,
			connect.WithSchema(integrationServiceMethods.ByName("DeleteIntegration")),
			connect.WithClientOptions(opts...),
		),
	}
}

// integrationServiceClient implements IntegrationServiceClient.
type integrationServiceClient struct {
	getIntegrations   *connect.Client[user_service.GetIntegrationsRequest, user_service.IntegrationsResponse]
	deleteIntegration *connect.Client[user_service.DeleteIntegrationRequest, user_service.DeleteIntegrationResponse]
}

// GetIntegrations calls user_service.IntegrationService.GetIntegrations.
func (c *integrationServiceClient) GetIntegrations(ctx context.Context, req *connect.Request[user_service.GetIntegrationsRequest]) (*connect.Response[user_service.IntegrationsResponse], error) {
	return c.getIntegrations.CallUnary(ctx, req)
}

// DeleteIntegration calls user_service.IntegrationService.DeleteIntegration.
func (c *integrationServiceClient) DeleteIntegration(ctx context.Context, req *connect.Request[user_service.DeleteIntegrationRequest]) (*connect.Response[user_service.DeleteIntegrationResponse], error) {
	return c.deleteIntegration.CallUnary(ctx, req)
}

// IntegrationServiceHandler is an implementation of the user_service.IntegrationService service.
type IntegrationServiceHandler interface {
	GetIntegrations(context.Context, *connect.Request[user_service.GetIntegrationsRequest]) (*connect.Response[user_service.IntegrationsResponse], error)
	DeleteIntegration(context.Context, *connect.Request[user_service.DeleteIntegrationRequest]) (*connect.Response[user_service.DeleteIntegrationResponse], error)
}

// NewIntegrationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIntegrationServiceHandler(svc IntegrationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	integrationServiceMethods := user_service.File_proto_user_service_user_service_proto.Services().ByName("IntegrationService").Methods()
	integrationServiceGetIntegrationsHandler := connect.NewUnaryHandler(
		IntegrationServiceGetIntegrationsProcedure,
		svc.GetIntegrations,
		connect.WithSchema(integrationServiceMethods.ByName("GetIntegrations")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	integrationServiceDeleteIntegrationHandler := connect.NewUnaryHandler(
		IntegrationServiceDeleteIntegrationProcedure,
		svc.DeleteIntegration,
		connect.WithSchema(integrationServiceMethods.ByName("DeleteIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user_service.IntegrationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IntegrationServiceGetIntegrationsProcedure:
			integrationServiceGetIntegrationsHandler.ServeHTTP(w, r)
		case IntegrationServiceDeleteIntegrationProcedure:
			integrationServiceDeleteIntegrationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIntegrationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIntegrationServiceHandler struct{}

func (UnimplementedIntegrationServiceHandler) GetIntegrations(context.Context, *connect.Request[user_service.GetIntegrationsRequest]) (*connect.Response[user_service.IntegrationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.IntegrationService.GetIntegrations is not implemented"))
}

func (UnimplementedIntegrationServiceHandler) DeleteIntegration(context.Context, *connect.Request[user_service.DeleteIntegrationRequest]) (*connect.Response[user_service.DeleteIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.IntegrationService.DeleteIntegration is not implemented"))
}

// AuthorizationServiceClient is a client for the user_service.AuthorizationService service.
type AuthorizationServiceClient interface {
	GetModList(context.Context, *connect.Request[user_service.GetModListRequest]) (*connect.Response[user_service.GetModListResponse], error)
	GetSubscriptionCriteria(context.Context, *connect.Request[user_service.GetSubscriptionCriteriaRequest]) (*connect.Response[user_service.GetSubscriptionCriteriaResponse], error)
	AddRole(context.Context, *connect.Request[user_service.AddRoleRequest]) (*connect.Response[user_service.AddRoleResponse], error)
	AddPermission(context.Context, *connect.Request[user_service.AddPermissionRequest]) (*connect.Response[user_service.AddPermissionResponse], error)
	LinkRoleAndPermission(context.Context, *connect.Request[user_service.LinkRoleAndPermissionRequest]) (*connect.Response[user_service.LinkRoleAndPermissionResponse], error)
	AssignRole(context.Context, *connect.Request[user_service.AssignRoleRequest]) (*connect.Response[user_service.AssignRoleResponse], error)
	UnassignRole(context.Context, *connect.Request[user_service.UnassignRoleRequest]) (*connect.Response[user_service.UnassignRoleResponse], error)
	GetUserRoles(context.Context, *connect.Request[user_service.GetUserRolesRequest]) (*connect.Response[user_service.UserRolesResponse], error)
}

// NewAuthorizationServiceClient constructs a client for the user_service.AuthorizationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthorizationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthorizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authorizationServiceMethods := user_service.File_proto_user_service_user_service_proto.Services().ByName("AuthorizationService").Methods()
	return &authorizationServiceClient{
		getModList: connect.NewClient[user_service.GetModListRequest, user_service.GetModListResponse](
			httpClient,
			baseURL+AuthorizationServiceGetModListProcedure,
			connect.WithSchema(authorizationServiceMethods.ByName("GetModList")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getSubscriptionCriteria: connect.NewClient[user_service.GetSubscriptionCriteriaRequest, user_service.GetSubscriptionCriteriaResponse](
			httpClient,
			baseURL+AuthorizationServiceGetSubscriptionCriteriaProcedure,
			connect.WithSchema(authorizationServiceMethods.ByName("GetSubscriptionCriteria")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		addRole: connect.NewClient[user_service.AddRoleRequest, user_service.AddRoleResponse](
			httpClient,
			baseURL+AuthorizationServiceAddRoleProcedure,
			connect.WithSchema(authorizationServiceMethods.ByName("AddRole")),
			connect.WithClientOptions(opts...),
		),
		addPermission: connect.NewClient[user_service.AddPermissionRequest, user_service.AddPermissionResponse](
			httpClient,
			baseURL+AuthorizationServiceAddPermissionProcedure,
			connect.WithSchema(authorizationServiceMethods.ByName("AddPermission")),
			connect.WithClientOptions(opts...),
		),
		linkRoleAndPermission: connect.NewClient[user_service.LinkRoleAndPermissionRequest, user_service.LinkRoleAndPermissionResponse](
			httpClient,
			baseURL+AuthorizationServiceLinkRoleAndPermissionProcedure,
			connect.WithSchema(authorizationServiceMethods.ByName("LinkRoleAndPermission")),
			connect.WithClientOptions(opts...),
		),
		assignRole: connect.NewClient[user_service.AssignRoleRequest, user_service.AssignRoleResponse](
			httpClient,
			baseURL+AuthorizationServiceAssignRoleProcedure,
			connect.WithSchema(authorizationServiceMethods.ByName("AssignRole")),
			connect.WithClientOptions(opts...),
		),
		unassignRole: connect.NewClient[user_service.UnassignRoleRequest, user_service.UnassignRoleResponse](
			httpClient,
			baseURL+AuthorizationServiceUnassignRoleProcedure,
			connect.WithSchema(authorizationServiceMethods.ByName("UnassignRole")),
			connect.WithClientOptions(opts...),
		),
		getUserRoles: connect.NewClient[user_service.GetUserRolesRequest, user_service.UserRolesResponse](
			httpClient,
			baseURL+AuthorizationServiceGetUserRolesProcedure,
			connect.WithSchema(authorizationServiceMethods.ByName("GetUserRoles")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// authorizationServiceClient implements AuthorizationServiceClient.
type authorizationServiceClient struct {
	getModList              *connect.Client[user_service.GetModListRequest, user_service.GetModListResponse]
	getSubscriptionCriteria *connect.Client[user_service.GetSubscriptionCriteriaRequest, user_service.GetSubscriptionCriteriaResponse]
	addRole                 *connect.Client[user_service.AddRoleRequest, user_service.AddRoleResponse]
	addPermission           *connect.Client[user_service.AddPermissionRequest, user_service.AddPermissionResponse]
	linkRoleAndPermission   *connect.Client[user_service.LinkRoleAndPermissionRequest, user_service.LinkRoleAndPermissionResponse]
	assignRole              *connect.Client[user_service.AssignRoleRequest, user_service.AssignRoleResponse]
	unassignRole            *connect.Client[user_service.UnassignRoleRequest, user_service.UnassignRoleResponse]
	getUserRoles            *connect.Client[user_service.GetUserRolesRequest, user_service.UserRolesResponse]
}

// GetModList calls user_service.AuthorizationService.GetModList.
func (c *authorizationServiceClient) GetModList(ctx context.Context, req *connect.Request[user_service.GetModListRequest]) (*connect.Response[user_service.GetModListResponse], error) {
	return c.getModList.CallUnary(ctx, req)
}

// GetSubscriptionCriteria calls user_service.AuthorizationService.GetSubscriptionCriteria.
func (c *authorizationServiceClient) GetSubscriptionCriteria(ctx context.Context, req *connect.Request[user_service.GetSubscriptionCriteriaRequest]) (*connect.Response[user_service.GetSubscriptionCriteriaResponse], error) {
	return c.getSubscriptionCriteria.CallUnary(ctx, req)
}

// AddRole calls user_service.AuthorizationService.AddRole.
func (c *authorizationServiceClient) AddRole(ctx context.Context, req *connect.Request[user_service.AddRoleRequest]) (*connect.Response[user_service.AddRoleResponse], error) {
	return c.addRole.CallUnary(ctx, req)
}

// AddPermission calls user_service.AuthorizationService.AddPermission.
func (c *authorizationServiceClient) AddPermission(ctx context.Context, req *connect.Request[user_service.AddPermissionRequest]) (*connect.Response[user_service.AddPermissionResponse], error) {
	return c.addPermission.CallUnary(ctx, req)
}

// LinkRoleAndPermission calls user_service.AuthorizationService.LinkRoleAndPermission.
func (c *authorizationServiceClient) LinkRoleAndPermission(ctx context.Context, req *connect.Request[user_service.LinkRoleAndPermissionRequest]) (*connect.Response[user_service.LinkRoleAndPermissionResponse], error) {
	return c.linkRoleAndPermission.CallUnary(ctx, req)
}

// AssignRole calls user_service.AuthorizationService.AssignRole.
func (c *authorizationServiceClient) AssignRole(ctx context.Context, req *connect.Request[user_service.AssignRoleRequest]) (*connect.Response[user_service.AssignRoleResponse], error) {
	return c.assignRole.CallUnary(ctx, req)
}

// UnassignRole calls user_service.AuthorizationService.UnassignRole.
func (c *authorizationServiceClient) UnassignRole(ctx context.Context, req *connect.Request[user_service.UnassignRoleRequest]) (*connect.Response[user_service.UnassignRoleResponse], error) {
	return c.unassignRole.CallUnary(ctx, req)
}

// GetUserRoles calls user_service.AuthorizationService.GetUserRoles.
func (c *authorizationServiceClient) GetUserRoles(ctx context.Context, req *connect.Request[user_service.GetUserRolesRequest]) (*connect.Response[user_service.UserRolesResponse], error) {
	return c.getUserRoles.CallUnary(ctx, req)
}

// AuthorizationServiceHandler is an implementation of the user_service.AuthorizationService
// service.
type AuthorizationServiceHandler interface {
	GetModList(context.Context, *connect.Request[user_service.GetModListRequest]) (*connect.Response[user_service.GetModListResponse], error)
	GetSubscriptionCriteria(context.Context, *connect.Request[user_service.GetSubscriptionCriteriaRequest]) (*connect.Response[user_service.GetSubscriptionCriteriaResponse], error)
	AddRole(context.Context, *connect.Request[user_service.AddRoleRequest]) (*connect.Response[user_service.AddRoleResponse], error)
	AddPermission(context.Context, *connect.Request[user_service.AddPermissionRequest]) (*connect.Response[user_service.AddPermissionResponse], error)
	LinkRoleAndPermission(context.Context, *connect.Request[user_service.LinkRoleAndPermissionRequest]) (*connect.Response[user_service.LinkRoleAndPermissionResponse], error)
	AssignRole(context.Context, *connect.Request[user_service.AssignRoleRequest]) (*connect.Response[user_service.AssignRoleResponse], error)
	UnassignRole(context.Context, *connect.Request[user_service.UnassignRoleRequest]) (*connect.Response[user_service.UnassignRoleResponse], error)
	GetUserRoles(context.Context, *connect.Request[user_service.GetUserRolesRequest]) (*connect.Response[user_service.UserRolesResponse], error)
}

// NewAuthorizationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthorizationServiceHandler(svc AuthorizationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authorizationServiceMethods := user_service.File_proto_user_service_user_service_proto.Services().ByName("AuthorizationService").Methods()
	authorizationServiceGetModListHandler := connect.NewUnaryHandler(
		AuthorizationServiceGetModListProcedure,
		svc.GetModList,
		connect.WithSchema(authorizationServiceMethods.ByName("GetModList")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceGetSubscriptionCriteriaHandler := connect.NewUnaryHandler(
		AuthorizationServiceGetSubscriptionCriteriaProcedure,
		svc.GetSubscriptionCriteria,
		connect.WithSchema(authorizationServiceMethods.ByName("GetSubscriptionCriteria")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceAddRoleHandler := connect.NewUnaryHandler(
		AuthorizationServiceAddRoleProcedure,
		svc.AddRole,
		connect.WithSchema(authorizationServiceMethods.ByName("AddRole")),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceAddPermissionHandler := connect.NewUnaryHandler(
		AuthorizationServiceAddPermissionProcedure,
		svc.AddPermission,
		connect.WithSchema(authorizationServiceMethods.ByName("AddPermission")),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceLinkRoleAndPermissionHandler := connect.NewUnaryHandler(
		AuthorizationServiceLinkRoleAndPermissionProcedure,
		svc.LinkRoleAndPermission,
		connect.WithSchema(authorizationServiceMethods.ByName("LinkRoleAndPermission")),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceAssignRoleHandler := connect.NewUnaryHandler(
		AuthorizationServiceAssignRoleProcedure,
		svc.AssignRole,
		connect.WithSchema(authorizationServiceMethods.ByName("AssignRole")),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceUnassignRoleHandler := connect.NewUnaryHandler(
		AuthorizationServiceUnassignRoleProcedure,
		svc.UnassignRole,
		connect.WithSchema(authorizationServiceMethods.ByName("UnassignRole")),
		connect.WithHandlerOptions(opts...),
	)
	authorizationServiceGetUserRolesHandler := connect.NewUnaryHandler(
		AuthorizationServiceGetUserRolesProcedure,
		svc.GetUserRoles,
		connect.WithSchema(authorizationServiceMethods.ByName("GetUserRoles")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/user_service.AuthorizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthorizationServiceGetModListProcedure:
			authorizationServiceGetModListHandler.ServeHTTP(w, r)
		case AuthorizationServiceGetSubscriptionCriteriaProcedure:
			authorizationServiceGetSubscriptionCriteriaHandler.ServeHTTP(w, r)
		case AuthorizationServiceAddRoleProcedure:
			authorizationServiceAddRoleHandler.ServeHTTP(w, r)
		case AuthorizationServiceAddPermissionProcedure:
			authorizationServiceAddPermissionHandler.ServeHTTP(w, r)
		case AuthorizationServiceLinkRoleAndPermissionProcedure:
			authorizationServiceLinkRoleAndPermissionHandler.ServeHTTP(w, r)
		case AuthorizationServiceAssignRoleProcedure:
			authorizationServiceAssignRoleHandler.ServeHTTP(w, r)
		case AuthorizationServiceUnassignRoleProcedure:
			authorizationServiceUnassignRoleHandler.ServeHTTP(w, r)
		case AuthorizationServiceGetUserRolesProcedure:
			authorizationServiceGetUserRolesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthorizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthorizationServiceHandler struct{}

func (UnimplementedAuthorizationServiceHandler) GetModList(context.Context, *connect.Request[user_service.GetModListRequest]) (*connect.Response[user_service.GetModListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthorizationService.GetModList is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) GetSubscriptionCriteria(context.Context, *connect.Request[user_service.GetSubscriptionCriteriaRequest]) (*connect.Response[user_service.GetSubscriptionCriteriaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthorizationService.GetSubscriptionCriteria is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) AddRole(context.Context, *connect.Request[user_service.AddRoleRequest]) (*connect.Response[user_service.AddRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthorizationService.AddRole is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) AddPermission(context.Context, *connect.Request[user_service.AddPermissionRequest]) (*connect.Response[user_service.AddPermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthorizationService.AddPermission is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) LinkRoleAndPermission(context.Context, *connect.Request[user_service.LinkRoleAndPermissionRequest]) (*connect.Response[user_service.LinkRoleAndPermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthorizationService.LinkRoleAndPermission is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) AssignRole(context.Context, *connect.Request[user_service.AssignRoleRequest]) (*connect.Response[user_service.AssignRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthorizationService.AssignRole is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) UnassignRole(context.Context, *connect.Request[user_service.UnassignRoleRequest]) (*connect.Response[user_service.UnassignRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthorizationService.UnassignRole is not implemented"))
}

func (UnimplementedAuthorizationServiceHandler) GetUserRoles(context.Context, *connect.Request[user_service.GetUserRolesRequest]) (*connect.Response[user_service.UserRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user_service.AuthorizationService.GetUserRoles is not implemented"))
}
