// Code generated by protoc-gen-twirp v8.1.2, DO NOT EDIT.
// source: api/proto/user_service/user_service.proto

package user_service

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

import ipc "github.com/domino14/liwords/rpc/api/proto/ipc"

import bytes "bytes"
import errors "errors"
import io "io"
import path "path"
import url "net/url"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ===============================
// AuthenticationService Interface
// ===============================

type AuthenticationService interface {
	Login(context.Context, *UserLoginRequest) (*LoginResponse, error)

	Logout(context.Context, *UserLogoutRequest) (*LogoutResponse, error)

	GetSocketToken(context.Context, *SocketTokenRequest) (*SocketTokenResponse, error)

	ResetPasswordStep1(context.Context, *ResetPasswordRequestStep1) (*ResetPasswordResponse, error)

	ResetPasswordStep2(context.Context, *ResetPasswordRequestStep2) (*ResetPasswordResponse, error)

	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)

	NotifyAccountClosure(context.Context, *NotifyAccountClosureRequest) (*NotifyAccountClosureResponse, error)

	// These two temporary endpoints for migrating everyone to naked domain:
	GetSignedCookie(context.Context, *GetSignedCookieRequest) (*SignedCookieResponse, error)

	InstallSignedCookie(context.Context, *SignedCookieResponse) (*InstallSignedCookieResponse, error)
}

// =====================================
// AuthenticationService Protobuf Client
// =====================================

type authenticationServiceProtobufClient struct {
	client      HTTPClient
	urls        [9]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewAuthenticationServiceProtobufClient creates a Protobuf client that implements the AuthenticationService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewAuthenticationServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) AuthenticationService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "user_service", "AuthenticationService")
	urls := [9]string{
		serviceURL + "Login",
		serviceURL + "Logout",
		serviceURL + "GetSocketToken",
		serviceURL + "ResetPasswordStep1",
		serviceURL + "ResetPasswordStep2",
		serviceURL + "ChangePassword",
		serviceURL + "NotifyAccountClosure",
		serviceURL + "GetSignedCookie",
		serviceURL + "InstallSignedCookie",
	}

	return &authenticationServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *authenticationServiceProtobufClient) Login(ctx context.Context, in *UserLoginRequest) (*LoginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "Login")
	caller := c.callLogin
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserLoginRequest) (*LoginResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserLoginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserLoginRequest) when calling interceptor")
					}
					return c.callLogin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LoginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LoginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceProtobufClient) callLogin(ctx context.Context, in *UserLoginRequest) (*LoginResponse, error) {
	out := new(LoginResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceProtobufClient) Logout(ctx context.Context, in *UserLogoutRequest) (*LogoutResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "Logout")
	caller := c.callLogout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserLogoutRequest) (*LogoutResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserLogoutRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserLogoutRequest) when calling interceptor")
					}
					return c.callLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LogoutResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LogoutResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceProtobufClient) callLogout(ctx context.Context, in *UserLogoutRequest) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceProtobufClient) GetSocketToken(ctx context.Context, in *SocketTokenRequest) (*SocketTokenResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSocketToken")
	caller := c.callGetSocketToken
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SocketTokenRequest) (*SocketTokenResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SocketTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SocketTokenRequest) when calling interceptor")
					}
					return c.callGetSocketToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SocketTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SocketTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceProtobufClient) callGetSocketToken(ctx context.Context, in *SocketTokenRequest) (*SocketTokenResponse, error) {
	out := new(SocketTokenResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceProtobufClient) ResetPasswordStep1(ctx context.Context, in *ResetPasswordRequestStep1) (*ResetPasswordResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "ResetPasswordStep1")
	caller := c.callResetPasswordStep1
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ResetPasswordRequestStep1) (*ResetPasswordResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResetPasswordRequestStep1)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResetPasswordRequestStep1) when calling interceptor")
					}
					return c.callResetPasswordStep1(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResetPasswordResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResetPasswordResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceProtobufClient) callResetPasswordStep1(ctx context.Context, in *ResetPasswordRequestStep1) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceProtobufClient) ResetPasswordStep2(ctx context.Context, in *ResetPasswordRequestStep2) (*ResetPasswordResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "ResetPasswordStep2")
	caller := c.callResetPasswordStep2
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ResetPasswordRequestStep2) (*ResetPasswordResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResetPasswordRequestStep2)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResetPasswordRequestStep2) when calling interceptor")
					}
					return c.callResetPasswordStep2(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResetPasswordResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResetPasswordResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceProtobufClient) callResetPasswordStep2(ctx context.Context, in *ResetPasswordRequestStep2) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceProtobufClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "ChangePassword")
	caller := c.callChangePassword
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ChangePasswordRequest) (*ChangePasswordResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ChangePasswordRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ChangePasswordRequest) when calling interceptor")
					}
					return c.callChangePassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ChangePasswordResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ChangePasswordResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceProtobufClient) callChangePassword(ctx context.Context, in *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceProtobufClient) NotifyAccountClosure(ctx context.Context, in *NotifyAccountClosureRequest) (*NotifyAccountClosureResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "NotifyAccountClosure")
	caller := c.callNotifyAccountClosure
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *NotifyAccountClosureRequest) (*NotifyAccountClosureResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*NotifyAccountClosureRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*NotifyAccountClosureRequest) when calling interceptor")
					}
					return c.callNotifyAccountClosure(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*NotifyAccountClosureResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*NotifyAccountClosureResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceProtobufClient) callNotifyAccountClosure(ctx context.Context, in *NotifyAccountClosureRequest) (*NotifyAccountClosureResponse, error) {
	out := new(NotifyAccountClosureResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceProtobufClient) GetSignedCookie(ctx context.Context, in *GetSignedCookieRequest) (*SignedCookieResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSignedCookie")
	caller := c.callGetSignedCookie
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSignedCookieRequest) (*SignedCookieResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSignedCookieRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSignedCookieRequest) when calling interceptor")
					}
					return c.callGetSignedCookie(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SignedCookieResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SignedCookieResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceProtobufClient) callGetSignedCookie(ctx context.Context, in *GetSignedCookieRequest) (*SignedCookieResponse, error) {
	out := new(SignedCookieResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceProtobufClient) InstallSignedCookie(ctx context.Context, in *SignedCookieResponse) (*InstallSignedCookieResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "InstallSignedCookie")
	caller := c.callInstallSignedCookie
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SignedCookieResponse) (*InstallSignedCookieResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SignedCookieResponse)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SignedCookieResponse) when calling interceptor")
					}
					return c.callInstallSignedCookie(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*InstallSignedCookieResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*InstallSignedCookieResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceProtobufClient) callInstallSignedCookie(ctx context.Context, in *SignedCookieResponse) (*InstallSignedCookieResponse, error) {
	out := new(InstallSignedCookieResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =================================
// AuthenticationService JSON Client
// =================================

type authenticationServiceJSONClient struct {
	client      HTTPClient
	urls        [9]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewAuthenticationServiceJSONClient creates a JSON client that implements the AuthenticationService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewAuthenticationServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) AuthenticationService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "user_service", "AuthenticationService")
	urls := [9]string{
		serviceURL + "Login",
		serviceURL + "Logout",
		serviceURL + "GetSocketToken",
		serviceURL + "ResetPasswordStep1",
		serviceURL + "ResetPasswordStep2",
		serviceURL + "ChangePassword",
		serviceURL + "NotifyAccountClosure",
		serviceURL + "GetSignedCookie",
		serviceURL + "InstallSignedCookie",
	}

	return &authenticationServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *authenticationServiceJSONClient) Login(ctx context.Context, in *UserLoginRequest) (*LoginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "Login")
	caller := c.callLogin
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserLoginRequest) (*LoginResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserLoginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserLoginRequest) when calling interceptor")
					}
					return c.callLogin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LoginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LoginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceJSONClient) callLogin(ctx context.Context, in *UserLoginRequest) (*LoginResponse, error) {
	out := new(LoginResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceJSONClient) Logout(ctx context.Context, in *UserLogoutRequest) (*LogoutResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "Logout")
	caller := c.callLogout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserLogoutRequest) (*LogoutResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserLogoutRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserLogoutRequest) when calling interceptor")
					}
					return c.callLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LogoutResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LogoutResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceJSONClient) callLogout(ctx context.Context, in *UserLogoutRequest) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceJSONClient) GetSocketToken(ctx context.Context, in *SocketTokenRequest) (*SocketTokenResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSocketToken")
	caller := c.callGetSocketToken
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SocketTokenRequest) (*SocketTokenResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SocketTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SocketTokenRequest) when calling interceptor")
					}
					return c.callGetSocketToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SocketTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SocketTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceJSONClient) callGetSocketToken(ctx context.Context, in *SocketTokenRequest) (*SocketTokenResponse, error) {
	out := new(SocketTokenResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceJSONClient) ResetPasswordStep1(ctx context.Context, in *ResetPasswordRequestStep1) (*ResetPasswordResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "ResetPasswordStep1")
	caller := c.callResetPasswordStep1
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ResetPasswordRequestStep1) (*ResetPasswordResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResetPasswordRequestStep1)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResetPasswordRequestStep1) when calling interceptor")
					}
					return c.callResetPasswordStep1(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResetPasswordResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResetPasswordResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceJSONClient) callResetPasswordStep1(ctx context.Context, in *ResetPasswordRequestStep1) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceJSONClient) ResetPasswordStep2(ctx context.Context, in *ResetPasswordRequestStep2) (*ResetPasswordResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "ResetPasswordStep2")
	caller := c.callResetPasswordStep2
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ResetPasswordRequestStep2) (*ResetPasswordResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResetPasswordRequestStep2)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResetPasswordRequestStep2) when calling interceptor")
					}
					return c.callResetPasswordStep2(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResetPasswordResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResetPasswordResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceJSONClient) callResetPasswordStep2(ctx context.Context, in *ResetPasswordRequestStep2) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceJSONClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "ChangePassword")
	caller := c.callChangePassword
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ChangePasswordRequest) (*ChangePasswordResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ChangePasswordRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ChangePasswordRequest) when calling interceptor")
					}
					return c.callChangePassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ChangePasswordResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ChangePasswordResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceJSONClient) callChangePassword(ctx context.Context, in *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceJSONClient) NotifyAccountClosure(ctx context.Context, in *NotifyAccountClosureRequest) (*NotifyAccountClosureResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "NotifyAccountClosure")
	caller := c.callNotifyAccountClosure
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *NotifyAccountClosureRequest) (*NotifyAccountClosureResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*NotifyAccountClosureRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*NotifyAccountClosureRequest) when calling interceptor")
					}
					return c.callNotifyAccountClosure(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*NotifyAccountClosureResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*NotifyAccountClosureResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceJSONClient) callNotifyAccountClosure(ctx context.Context, in *NotifyAccountClosureRequest) (*NotifyAccountClosureResponse, error) {
	out := new(NotifyAccountClosureResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceJSONClient) GetSignedCookie(ctx context.Context, in *GetSignedCookieRequest) (*SignedCookieResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSignedCookie")
	caller := c.callGetSignedCookie
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSignedCookieRequest) (*SignedCookieResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSignedCookieRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSignedCookieRequest) when calling interceptor")
					}
					return c.callGetSignedCookie(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SignedCookieResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SignedCookieResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceJSONClient) callGetSignedCookie(ctx context.Context, in *GetSignedCookieRequest) (*SignedCookieResponse, error) {
	out := new(SignedCookieResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authenticationServiceJSONClient) InstallSignedCookie(ctx context.Context, in *SignedCookieResponse) (*InstallSignedCookieResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithMethodName(ctx, "InstallSignedCookie")
	caller := c.callInstallSignedCookie
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SignedCookieResponse) (*InstallSignedCookieResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SignedCookieResponse)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SignedCookieResponse) when calling interceptor")
					}
					return c.callInstallSignedCookie(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*InstallSignedCookieResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*InstallSignedCookieResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authenticationServiceJSONClient) callInstallSignedCookie(ctx context.Context, in *SignedCookieResponse) (*InstallSignedCookieResponse, error) {
	out := new(InstallSignedCookieResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ====================================
// AuthenticationService Server Handler
// ====================================

type authenticationServiceServer struct {
	AuthenticationService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewAuthenticationServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewAuthenticationServiceServer(svc AuthenticationService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &authenticationServiceServer{
		AuthenticationService: svc,
		hooks:                 serverOpts.Hooks,
		interceptor:           twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:            pathPrefix,
		jsonSkipDefaults:      jsonSkipDefaults,
		jsonCamelCase:         jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *authenticationServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *authenticationServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// AuthenticationServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const AuthenticationServicePathPrefix = "/twirp/user_service.AuthenticationService/"

func (s *authenticationServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AuthenticationService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "user_service.AuthenticationService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "Login":
		s.serveLogin(ctx, resp, req)
		return
	case "Logout":
		s.serveLogout(ctx, resp, req)
		return
	case "GetSocketToken":
		s.serveGetSocketToken(ctx, resp, req)
		return
	case "ResetPasswordStep1":
		s.serveResetPasswordStep1(ctx, resp, req)
		return
	case "ResetPasswordStep2":
		s.serveResetPasswordStep2(ctx, resp, req)
		return
	case "ChangePassword":
		s.serveChangePassword(ctx, resp, req)
		return
	case "NotifyAccountClosure":
		s.serveNotifyAccountClosure(ctx, resp, req)
		return
	case "GetSignedCookie":
		s.serveGetSignedCookie(ctx, resp, req)
		return
	case "InstallSignedCookie":
		s.serveInstallSignedCookie(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *authenticationServiceServer) serveLogin(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveLoginJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveLoginProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authenticationServiceServer) serveLoginJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Login")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserLoginRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthenticationService.Login
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserLoginRequest) (*LoginResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserLoginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserLoginRequest) when calling interceptor")
					}
					return s.AuthenticationService.Login(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LoginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LoginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LoginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LoginResponse and nil error while calling Login. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveLoginProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Login")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserLoginRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthenticationService.Login
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserLoginRequest) (*LoginResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserLoginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserLoginRequest) when calling interceptor")
					}
					return s.AuthenticationService.Login(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LoginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LoginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LoginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LoginResponse and nil error while calling Login. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveLogout(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveLogoutJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveLogoutProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authenticationServiceServer) serveLogoutJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Logout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserLogoutRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthenticationService.Logout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserLogoutRequest) (*LogoutResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserLogoutRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserLogoutRequest) when calling interceptor")
					}
					return s.AuthenticationService.Logout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LogoutResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LogoutResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LogoutResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LogoutResponse and nil error while calling Logout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveLogoutProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Logout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserLogoutRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthenticationService.Logout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserLogoutRequest) (*LogoutResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserLogoutRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserLogoutRequest) when calling interceptor")
					}
					return s.AuthenticationService.Logout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LogoutResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LogoutResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LogoutResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LogoutResponse and nil error while calling Logout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveGetSocketToken(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetSocketTokenJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetSocketTokenProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authenticationServiceServer) serveGetSocketTokenJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSocketToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(SocketTokenRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthenticationService.GetSocketToken
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SocketTokenRequest) (*SocketTokenResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SocketTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SocketTokenRequest) when calling interceptor")
					}
					return s.AuthenticationService.GetSocketToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SocketTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SocketTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SocketTokenResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SocketTokenResponse and nil error while calling GetSocketToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveGetSocketTokenProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSocketToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(SocketTokenRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthenticationService.GetSocketToken
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SocketTokenRequest) (*SocketTokenResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SocketTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SocketTokenRequest) when calling interceptor")
					}
					return s.AuthenticationService.GetSocketToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SocketTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SocketTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SocketTokenResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SocketTokenResponse and nil error while calling GetSocketToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveResetPasswordStep1(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveResetPasswordStep1JSON(ctx, resp, req)
	case "application/protobuf":
		s.serveResetPasswordStep1Protobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authenticationServiceServer) serveResetPasswordStep1JSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ResetPasswordStep1")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ResetPasswordRequestStep1)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthenticationService.ResetPasswordStep1
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ResetPasswordRequestStep1) (*ResetPasswordResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResetPasswordRequestStep1)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResetPasswordRequestStep1) when calling interceptor")
					}
					return s.AuthenticationService.ResetPasswordStep1(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResetPasswordResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResetPasswordResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ResetPasswordResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ResetPasswordResponse and nil error while calling ResetPasswordStep1. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveResetPasswordStep1Protobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ResetPasswordStep1")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ResetPasswordRequestStep1)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthenticationService.ResetPasswordStep1
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ResetPasswordRequestStep1) (*ResetPasswordResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResetPasswordRequestStep1)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResetPasswordRequestStep1) when calling interceptor")
					}
					return s.AuthenticationService.ResetPasswordStep1(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResetPasswordResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResetPasswordResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ResetPasswordResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ResetPasswordResponse and nil error while calling ResetPasswordStep1. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveResetPasswordStep2(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveResetPasswordStep2JSON(ctx, resp, req)
	case "application/protobuf":
		s.serveResetPasswordStep2Protobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authenticationServiceServer) serveResetPasswordStep2JSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ResetPasswordStep2")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ResetPasswordRequestStep2)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthenticationService.ResetPasswordStep2
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ResetPasswordRequestStep2) (*ResetPasswordResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResetPasswordRequestStep2)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResetPasswordRequestStep2) when calling interceptor")
					}
					return s.AuthenticationService.ResetPasswordStep2(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResetPasswordResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResetPasswordResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ResetPasswordResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ResetPasswordResponse and nil error while calling ResetPasswordStep2. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveResetPasswordStep2Protobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ResetPasswordStep2")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ResetPasswordRequestStep2)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthenticationService.ResetPasswordStep2
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ResetPasswordRequestStep2) (*ResetPasswordResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResetPasswordRequestStep2)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResetPasswordRequestStep2) when calling interceptor")
					}
					return s.AuthenticationService.ResetPasswordStep2(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ResetPasswordResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ResetPasswordResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ResetPasswordResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ResetPasswordResponse and nil error while calling ResetPasswordStep2. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveChangePassword(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveChangePasswordJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveChangePasswordProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authenticationServiceServer) serveChangePasswordJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ChangePassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ChangePasswordRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthenticationService.ChangePassword
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ChangePasswordRequest) (*ChangePasswordResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ChangePasswordRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ChangePasswordRequest) when calling interceptor")
					}
					return s.AuthenticationService.ChangePassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ChangePasswordResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ChangePasswordResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ChangePasswordResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ChangePasswordResponse and nil error while calling ChangePassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveChangePasswordProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ChangePassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ChangePasswordRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthenticationService.ChangePassword
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ChangePasswordRequest) (*ChangePasswordResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ChangePasswordRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ChangePasswordRequest) when calling interceptor")
					}
					return s.AuthenticationService.ChangePassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ChangePasswordResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ChangePasswordResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ChangePasswordResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ChangePasswordResponse and nil error while calling ChangePassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveNotifyAccountClosure(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveNotifyAccountClosureJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveNotifyAccountClosureProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authenticationServiceServer) serveNotifyAccountClosureJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "NotifyAccountClosure")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(NotifyAccountClosureRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthenticationService.NotifyAccountClosure
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *NotifyAccountClosureRequest) (*NotifyAccountClosureResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*NotifyAccountClosureRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*NotifyAccountClosureRequest) when calling interceptor")
					}
					return s.AuthenticationService.NotifyAccountClosure(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*NotifyAccountClosureResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*NotifyAccountClosureResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *NotifyAccountClosureResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *NotifyAccountClosureResponse and nil error while calling NotifyAccountClosure. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveNotifyAccountClosureProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "NotifyAccountClosure")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(NotifyAccountClosureRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthenticationService.NotifyAccountClosure
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *NotifyAccountClosureRequest) (*NotifyAccountClosureResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*NotifyAccountClosureRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*NotifyAccountClosureRequest) when calling interceptor")
					}
					return s.AuthenticationService.NotifyAccountClosure(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*NotifyAccountClosureResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*NotifyAccountClosureResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *NotifyAccountClosureResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *NotifyAccountClosureResponse and nil error while calling NotifyAccountClosure. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveGetSignedCookie(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetSignedCookieJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetSignedCookieProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authenticationServiceServer) serveGetSignedCookieJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSignedCookie")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetSignedCookieRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthenticationService.GetSignedCookie
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSignedCookieRequest) (*SignedCookieResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSignedCookieRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSignedCookieRequest) when calling interceptor")
					}
					return s.AuthenticationService.GetSignedCookie(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SignedCookieResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SignedCookieResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SignedCookieResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SignedCookieResponse and nil error while calling GetSignedCookie. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveGetSignedCookieProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSignedCookie")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetSignedCookieRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthenticationService.GetSignedCookie
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSignedCookieRequest) (*SignedCookieResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSignedCookieRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSignedCookieRequest) when calling interceptor")
					}
					return s.AuthenticationService.GetSignedCookie(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SignedCookieResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SignedCookieResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SignedCookieResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SignedCookieResponse and nil error while calling GetSignedCookie. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveInstallSignedCookie(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveInstallSignedCookieJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveInstallSignedCookieProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authenticationServiceServer) serveInstallSignedCookieJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "InstallSignedCookie")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(SignedCookieResponse)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthenticationService.InstallSignedCookie
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SignedCookieResponse) (*InstallSignedCookieResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SignedCookieResponse)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SignedCookieResponse) when calling interceptor")
					}
					return s.AuthenticationService.InstallSignedCookie(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*InstallSignedCookieResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*InstallSignedCookieResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *InstallSignedCookieResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InstallSignedCookieResponse and nil error while calling InstallSignedCookie. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) serveInstallSignedCookieProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "InstallSignedCookie")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(SignedCookieResponse)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthenticationService.InstallSignedCookie
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SignedCookieResponse) (*InstallSignedCookieResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SignedCookieResponse)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SignedCookieResponse) when calling interceptor")
					}
					return s.AuthenticationService.InstallSignedCookie(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*InstallSignedCookieResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*InstallSignedCookieResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *InstallSignedCookieResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InstallSignedCookieResponse and nil error while calling InstallSignedCookie. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authenticationServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 0
}

func (s *authenticationServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.2"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *authenticationServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "user_service", "AuthenticationService")
}

// =============================
// RegistrationService Interface
// =============================

type RegistrationService interface {
	Register(context.Context, *UserRegistrationRequest) (*RegistrationResponse, error)
}

// ===================================
// RegistrationService Protobuf Client
// ===================================

type registrationServiceProtobufClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewRegistrationServiceProtobufClient creates a Protobuf client that implements the RegistrationService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewRegistrationServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) RegistrationService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "user_service", "RegistrationService")
	urls := [1]string{
		serviceURL + "Register",
	}

	return &registrationServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *registrationServiceProtobufClient) Register(ctx context.Context, in *UserRegistrationRequest) (*RegistrationResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "RegistrationService")
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	caller := c.callRegister
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserRegistrationRequest) (*RegistrationResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserRegistrationRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserRegistrationRequest) when calling interceptor")
					}
					return c.callRegister(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegistrationResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegistrationResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *registrationServiceProtobufClient) callRegister(ctx context.Context, in *UserRegistrationRequest) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===============================
// RegistrationService JSON Client
// ===============================

type registrationServiceJSONClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewRegistrationServiceJSONClient creates a JSON client that implements the RegistrationService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewRegistrationServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) RegistrationService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "user_service", "RegistrationService")
	urls := [1]string{
		serviceURL + "Register",
	}

	return &registrationServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *registrationServiceJSONClient) Register(ctx context.Context, in *UserRegistrationRequest) (*RegistrationResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "RegistrationService")
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	caller := c.callRegister
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserRegistrationRequest) (*RegistrationResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserRegistrationRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserRegistrationRequest) when calling interceptor")
					}
					return c.callRegister(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegistrationResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegistrationResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *registrationServiceJSONClient) callRegister(ctx context.Context, in *UserRegistrationRequest) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==================================
// RegistrationService Server Handler
// ==================================

type registrationServiceServer struct {
	RegistrationService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewRegistrationServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewRegistrationServiceServer(svc RegistrationService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &registrationServiceServer{
		RegistrationService: svc,
		hooks:               serverOpts.Hooks,
		interceptor:         twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:          pathPrefix,
		jsonSkipDefaults:    jsonSkipDefaults,
		jsonCamelCase:       jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *registrationServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *registrationServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// RegistrationServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const RegistrationServicePathPrefix = "/twirp/user_service.RegistrationService/"

func (s *registrationServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "RegistrationService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "user_service.RegistrationService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "Register":
		s.serveRegister(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *registrationServiceServer) serveRegister(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisterJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisterProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *registrationServiceServer) serveRegisterJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserRegistrationRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RegistrationService.Register
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserRegistrationRequest) (*RegistrationResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserRegistrationRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserRegistrationRequest) when calling interceptor")
					}
					return s.RegistrationService.Register(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegistrationResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegistrationResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegistrationResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegistrationResponse and nil error while calling Register. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *registrationServiceServer) serveRegisterProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserRegistrationRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RegistrationService.Register
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserRegistrationRequest) (*RegistrationResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserRegistrationRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserRegistrationRequest) when calling interceptor")
					}
					return s.RegistrationService.Register(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegistrationResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegistrationResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegistrationResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegistrationResponse and nil error while calling Register. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *registrationServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 1
}

func (s *registrationServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.2"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *registrationServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "user_service", "RegistrationService")
}

// ========================
// ProfileService Interface
// ========================

type ProfileService interface {
	GetRatings(context.Context, *RatingsRequest) (*RatingsResponse, error)

	GetStats(context.Context, *StatsRequest) (*StatsResponse, error)

	GetProfile(context.Context, *ProfileRequest) (*ProfileResponse, error)

	GetPersonalInfo(context.Context, *PersonalInfoRequest) (*PersonalInfoResponse, error)

	UpdatePersonalInfo(context.Context, *UpdatePersonalInfoRequest) (*UpdatePersonalInfoResponse, error)

	UpdateAvatar(context.Context, *UpdateAvatarRequest) (*UpdateAvatarResponse, error)

	RemoveAvatar(context.Context, *RemoveAvatarRequest) (*RemoveAvatarResponse, error)

	GetBriefProfiles(context.Context, *BriefProfilesRequest) (*BriefProfilesResponse, error)
}

// ==============================
// ProfileService Protobuf Client
// ==============================

type profileServiceProtobufClient struct {
	client      HTTPClient
	urls        [8]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewProfileServiceProtobufClient creates a Protobuf client that implements the ProfileService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewProfileServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) ProfileService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "user_service", "ProfileService")
	urls := [8]string{
		serviceURL + "GetRatings",
		serviceURL + "GetStats",
		serviceURL + "GetProfile",
		serviceURL + "GetPersonalInfo",
		serviceURL + "UpdatePersonalInfo",
		serviceURL + "UpdateAvatar",
		serviceURL + "RemoveAvatar",
		serviceURL + "GetBriefProfiles",
	}

	return &profileServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *profileServiceProtobufClient) GetRatings(ctx context.Context, in *RatingsRequest) (*RatingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "GetRatings")
	caller := c.callGetRatings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RatingsRequest) (*RatingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RatingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RatingsRequest) when calling interceptor")
					}
					return c.callGetRatings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RatingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RatingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceProtobufClient) callGetRatings(ctx context.Context, in *RatingsRequest) (*RatingsResponse, error) {
	out := new(RatingsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *profileServiceProtobufClient) GetStats(ctx context.Context, in *StatsRequest) (*StatsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "GetStats")
	caller := c.callGetStats
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StatsRequest) (*StatsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StatsRequest) when calling interceptor")
					}
					return c.callGetStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceProtobufClient) callGetStats(ctx context.Context, in *StatsRequest) (*StatsResponse, error) {
	out := new(StatsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *profileServiceProtobufClient) GetProfile(ctx context.Context, in *ProfileRequest) (*ProfileResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "GetProfile")
	caller := c.callGetProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ProfileRequest) (*ProfileResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ProfileRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ProfileRequest) when calling interceptor")
					}
					return c.callGetProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ProfileResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ProfileResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceProtobufClient) callGetProfile(ctx context.Context, in *ProfileRequest) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *profileServiceProtobufClient) GetPersonalInfo(ctx context.Context, in *PersonalInfoRequest) (*PersonalInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "GetPersonalInfo")
	caller := c.callGetPersonalInfo
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PersonalInfoRequest) (*PersonalInfoResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PersonalInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PersonalInfoRequest) when calling interceptor")
					}
					return c.callGetPersonalInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PersonalInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PersonalInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceProtobufClient) callGetPersonalInfo(ctx context.Context, in *PersonalInfoRequest) (*PersonalInfoResponse, error) {
	out := new(PersonalInfoResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *profileServiceProtobufClient) UpdatePersonalInfo(ctx context.Context, in *UpdatePersonalInfoRequest) (*UpdatePersonalInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePersonalInfo")
	caller := c.callUpdatePersonalInfo
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdatePersonalInfoRequest) (*UpdatePersonalInfoResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePersonalInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePersonalInfoRequest) when calling interceptor")
					}
					return c.callUpdatePersonalInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdatePersonalInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdatePersonalInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceProtobufClient) callUpdatePersonalInfo(ctx context.Context, in *UpdatePersonalInfoRequest) (*UpdatePersonalInfoResponse, error) {
	out := new(UpdatePersonalInfoResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *profileServiceProtobufClient) UpdateAvatar(ctx context.Context, in *UpdateAvatarRequest) (*UpdateAvatarResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvatar")
	caller := c.callUpdateAvatar
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateAvatarRequest) (*UpdateAvatarResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateAvatarRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateAvatarRequest) when calling interceptor")
					}
					return c.callUpdateAvatar(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateAvatarResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateAvatarResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceProtobufClient) callUpdateAvatar(ctx context.Context, in *UpdateAvatarRequest) (*UpdateAvatarResponse, error) {
	out := new(UpdateAvatarResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *profileServiceProtobufClient) RemoveAvatar(ctx context.Context, in *RemoveAvatarRequest) (*RemoveAvatarResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveAvatar")
	caller := c.callRemoveAvatar
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RemoveAvatarRequest) (*RemoveAvatarResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveAvatarRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveAvatarRequest) when calling interceptor")
					}
					return c.callRemoveAvatar(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RemoveAvatarResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RemoveAvatarResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceProtobufClient) callRemoveAvatar(ctx context.Context, in *RemoveAvatarRequest) (*RemoveAvatarResponse, error) {
	out := new(RemoveAvatarResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *profileServiceProtobufClient) GetBriefProfiles(ctx context.Context, in *BriefProfilesRequest) (*BriefProfilesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "GetBriefProfiles")
	caller := c.callGetBriefProfiles
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *BriefProfilesRequest) (*BriefProfilesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BriefProfilesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BriefProfilesRequest) when calling interceptor")
					}
					return c.callGetBriefProfiles(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BriefProfilesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BriefProfilesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceProtobufClient) callGetBriefProfiles(ctx context.Context, in *BriefProfilesRequest) (*BriefProfilesResponse, error) {
	out := new(BriefProfilesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==========================
// ProfileService JSON Client
// ==========================

type profileServiceJSONClient struct {
	client      HTTPClient
	urls        [8]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewProfileServiceJSONClient creates a JSON client that implements the ProfileService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewProfileServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) ProfileService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "user_service", "ProfileService")
	urls := [8]string{
		serviceURL + "GetRatings",
		serviceURL + "GetStats",
		serviceURL + "GetProfile",
		serviceURL + "GetPersonalInfo",
		serviceURL + "UpdatePersonalInfo",
		serviceURL + "UpdateAvatar",
		serviceURL + "RemoveAvatar",
		serviceURL + "GetBriefProfiles",
	}

	return &profileServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *profileServiceJSONClient) GetRatings(ctx context.Context, in *RatingsRequest) (*RatingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "GetRatings")
	caller := c.callGetRatings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RatingsRequest) (*RatingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RatingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RatingsRequest) when calling interceptor")
					}
					return c.callGetRatings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RatingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RatingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceJSONClient) callGetRatings(ctx context.Context, in *RatingsRequest) (*RatingsResponse, error) {
	out := new(RatingsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *profileServiceJSONClient) GetStats(ctx context.Context, in *StatsRequest) (*StatsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "GetStats")
	caller := c.callGetStats
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StatsRequest) (*StatsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StatsRequest) when calling interceptor")
					}
					return c.callGetStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceJSONClient) callGetStats(ctx context.Context, in *StatsRequest) (*StatsResponse, error) {
	out := new(StatsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *profileServiceJSONClient) GetProfile(ctx context.Context, in *ProfileRequest) (*ProfileResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "GetProfile")
	caller := c.callGetProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ProfileRequest) (*ProfileResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ProfileRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ProfileRequest) when calling interceptor")
					}
					return c.callGetProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ProfileResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ProfileResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceJSONClient) callGetProfile(ctx context.Context, in *ProfileRequest) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *profileServiceJSONClient) GetPersonalInfo(ctx context.Context, in *PersonalInfoRequest) (*PersonalInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "GetPersonalInfo")
	caller := c.callGetPersonalInfo
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PersonalInfoRequest) (*PersonalInfoResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PersonalInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PersonalInfoRequest) when calling interceptor")
					}
					return c.callGetPersonalInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PersonalInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PersonalInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceJSONClient) callGetPersonalInfo(ctx context.Context, in *PersonalInfoRequest) (*PersonalInfoResponse, error) {
	out := new(PersonalInfoResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *profileServiceJSONClient) UpdatePersonalInfo(ctx context.Context, in *UpdatePersonalInfoRequest) (*UpdatePersonalInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePersonalInfo")
	caller := c.callUpdatePersonalInfo
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdatePersonalInfoRequest) (*UpdatePersonalInfoResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePersonalInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePersonalInfoRequest) when calling interceptor")
					}
					return c.callUpdatePersonalInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdatePersonalInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdatePersonalInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceJSONClient) callUpdatePersonalInfo(ctx context.Context, in *UpdatePersonalInfoRequest) (*UpdatePersonalInfoResponse, error) {
	out := new(UpdatePersonalInfoResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *profileServiceJSONClient) UpdateAvatar(ctx context.Context, in *UpdateAvatarRequest) (*UpdateAvatarResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvatar")
	caller := c.callUpdateAvatar
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateAvatarRequest) (*UpdateAvatarResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateAvatarRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateAvatarRequest) when calling interceptor")
					}
					return c.callUpdateAvatar(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateAvatarResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateAvatarResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceJSONClient) callUpdateAvatar(ctx context.Context, in *UpdateAvatarRequest) (*UpdateAvatarResponse, error) {
	out := new(UpdateAvatarResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *profileServiceJSONClient) RemoveAvatar(ctx context.Context, in *RemoveAvatarRequest) (*RemoveAvatarResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveAvatar")
	caller := c.callRemoveAvatar
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RemoveAvatarRequest) (*RemoveAvatarResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveAvatarRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveAvatarRequest) when calling interceptor")
					}
					return c.callRemoveAvatar(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RemoveAvatarResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RemoveAvatarResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceJSONClient) callRemoveAvatar(ctx context.Context, in *RemoveAvatarRequest) (*RemoveAvatarResponse, error) {
	out := new(RemoveAvatarResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *profileServiceJSONClient) GetBriefProfiles(ctx context.Context, in *BriefProfilesRequest) (*BriefProfilesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithMethodName(ctx, "GetBriefProfiles")
	caller := c.callGetBriefProfiles
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *BriefProfilesRequest) (*BriefProfilesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BriefProfilesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BriefProfilesRequest) when calling interceptor")
					}
					return c.callGetBriefProfiles(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BriefProfilesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BriefProfilesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *profileServiceJSONClient) callGetBriefProfiles(ctx context.Context, in *BriefProfilesRequest) (*BriefProfilesResponse, error) {
	out := new(BriefProfilesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =============================
// ProfileService Server Handler
// =============================

type profileServiceServer struct {
	ProfileService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewProfileServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewProfileServiceServer(svc ProfileService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &profileServiceServer{
		ProfileService:   svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *profileServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *profileServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// ProfileServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const ProfileServicePathPrefix = "/twirp/user_service.ProfileService/"

func (s *profileServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "ProfileService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "user_service.ProfileService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "GetRatings":
		s.serveGetRatings(ctx, resp, req)
		return
	case "GetStats":
		s.serveGetStats(ctx, resp, req)
		return
	case "GetProfile":
		s.serveGetProfile(ctx, resp, req)
		return
	case "GetPersonalInfo":
		s.serveGetPersonalInfo(ctx, resp, req)
		return
	case "UpdatePersonalInfo":
		s.serveUpdatePersonalInfo(ctx, resp, req)
		return
	case "UpdateAvatar":
		s.serveUpdateAvatar(ctx, resp, req)
		return
	case "RemoveAvatar":
		s.serveRemoveAvatar(ctx, resp, req)
		return
	case "GetBriefProfiles":
		s.serveGetBriefProfiles(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *profileServiceServer) serveGetRatings(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetRatingsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetRatingsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *profileServiceServer) serveGetRatingsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRatings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RatingsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.ProfileService.GetRatings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RatingsRequest) (*RatingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RatingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RatingsRequest) when calling interceptor")
					}
					return s.ProfileService.GetRatings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RatingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RatingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RatingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RatingsResponse and nil error while calling GetRatings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveGetRatingsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRatings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RatingsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.ProfileService.GetRatings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RatingsRequest) (*RatingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RatingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RatingsRequest) when calling interceptor")
					}
					return s.ProfileService.GetRatings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RatingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RatingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RatingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RatingsResponse and nil error while calling GetRatings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveGetStats(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetStatsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetStatsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *profileServiceServer) serveGetStatsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStats")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(StatsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.ProfileService.GetStats
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StatsRequest) (*StatsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StatsRequest) when calling interceptor")
					}
					return s.ProfileService.GetStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatsResponse and nil error while calling GetStats. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveGetStatsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStats")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(StatsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.ProfileService.GetStats
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StatsRequest) (*StatsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StatsRequest) when calling interceptor")
					}
					return s.ProfileService.GetStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatsResponse and nil error while calling GetStats. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveGetProfile(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetProfileJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProfileProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *profileServiceServer) serveGetProfileJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ProfileRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.ProfileService.GetProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ProfileRequest) (*ProfileResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ProfileRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ProfileRequest) when calling interceptor")
					}
					return s.ProfileService.GetProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ProfileResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ProfileResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ProfileResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ProfileResponse and nil error while calling GetProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveGetProfileProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ProfileRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.ProfileService.GetProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ProfileRequest) (*ProfileResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ProfileRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ProfileRequest) when calling interceptor")
					}
					return s.ProfileService.GetProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ProfileResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ProfileResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ProfileResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ProfileResponse and nil error while calling GetProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveGetPersonalInfo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPersonalInfoJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPersonalInfoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *profileServiceServer) serveGetPersonalInfoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPersonalInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(PersonalInfoRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.ProfileService.GetPersonalInfo
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PersonalInfoRequest) (*PersonalInfoResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PersonalInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PersonalInfoRequest) when calling interceptor")
					}
					return s.ProfileService.GetPersonalInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PersonalInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PersonalInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PersonalInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PersonalInfoResponse and nil error while calling GetPersonalInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveGetPersonalInfoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPersonalInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(PersonalInfoRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.ProfileService.GetPersonalInfo
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PersonalInfoRequest) (*PersonalInfoResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PersonalInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PersonalInfoRequest) when calling interceptor")
					}
					return s.ProfileService.GetPersonalInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PersonalInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PersonalInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PersonalInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PersonalInfoResponse and nil error while calling GetPersonalInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveUpdatePersonalInfo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdatePersonalInfoJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdatePersonalInfoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *profileServiceServer) serveUpdatePersonalInfoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePersonalInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdatePersonalInfoRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.ProfileService.UpdatePersonalInfo
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdatePersonalInfoRequest) (*UpdatePersonalInfoResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePersonalInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePersonalInfoRequest) when calling interceptor")
					}
					return s.ProfileService.UpdatePersonalInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdatePersonalInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdatePersonalInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdatePersonalInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdatePersonalInfoResponse and nil error while calling UpdatePersonalInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveUpdatePersonalInfoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePersonalInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdatePersonalInfoRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.ProfileService.UpdatePersonalInfo
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdatePersonalInfoRequest) (*UpdatePersonalInfoResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePersonalInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePersonalInfoRequest) when calling interceptor")
					}
					return s.ProfileService.UpdatePersonalInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdatePersonalInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdatePersonalInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdatePersonalInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdatePersonalInfoResponse and nil error while calling UpdatePersonalInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveUpdateAvatar(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateAvatarJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateAvatarProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *profileServiceServer) serveUpdateAvatarJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvatar")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdateAvatarRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.ProfileService.UpdateAvatar
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateAvatarRequest) (*UpdateAvatarResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateAvatarRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateAvatarRequest) when calling interceptor")
					}
					return s.ProfileService.UpdateAvatar(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateAvatarResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateAvatarResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdateAvatarResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateAvatarResponse and nil error while calling UpdateAvatar. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveUpdateAvatarProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvatar")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdateAvatarRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.ProfileService.UpdateAvatar
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateAvatarRequest) (*UpdateAvatarResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateAvatarRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateAvatarRequest) when calling interceptor")
					}
					return s.ProfileService.UpdateAvatar(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateAvatarResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateAvatarResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdateAvatarResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateAvatarResponse and nil error while calling UpdateAvatar. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveRemoveAvatar(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveAvatarJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveAvatarProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *profileServiceServer) serveRemoveAvatarJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveAvatar")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RemoveAvatarRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.ProfileService.RemoveAvatar
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RemoveAvatarRequest) (*RemoveAvatarResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveAvatarRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveAvatarRequest) when calling interceptor")
					}
					return s.ProfileService.RemoveAvatar(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RemoveAvatarResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RemoveAvatarResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RemoveAvatarResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RemoveAvatarResponse and nil error while calling RemoveAvatar. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveRemoveAvatarProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveAvatar")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RemoveAvatarRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.ProfileService.RemoveAvatar
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RemoveAvatarRequest) (*RemoveAvatarResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveAvatarRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveAvatarRequest) when calling interceptor")
					}
					return s.ProfileService.RemoveAvatar(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RemoveAvatarResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RemoveAvatarResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RemoveAvatarResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RemoveAvatarResponse and nil error while calling RemoveAvatar. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveGetBriefProfiles(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetBriefProfilesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetBriefProfilesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *profileServiceServer) serveGetBriefProfilesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBriefProfiles")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(BriefProfilesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.ProfileService.GetBriefProfiles
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *BriefProfilesRequest) (*BriefProfilesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BriefProfilesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BriefProfilesRequest) when calling interceptor")
					}
					return s.ProfileService.GetBriefProfiles(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BriefProfilesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BriefProfilesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *BriefProfilesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BriefProfilesResponse and nil error while calling GetBriefProfiles. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) serveGetBriefProfilesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBriefProfiles")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(BriefProfilesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.ProfileService.GetBriefProfiles
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *BriefProfilesRequest) (*BriefProfilesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BriefProfilesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BriefProfilesRequest) when calling interceptor")
					}
					return s.ProfileService.GetBriefProfiles(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BriefProfilesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BriefProfilesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *BriefProfilesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BriefProfilesResponse and nil error while calling GetBriefProfiles. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *profileServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 2
}

func (s *profileServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.2"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *profileServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "user_service", "ProfileService")
}

// =============================
// AutocompleteService Interface
// =============================

type AutocompleteService interface {
	GetCompletion(context.Context, *UsernameSearchRequest) (*UsernameSearchResponse, error)
}

// ===================================
// AutocompleteService Protobuf Client
// ===================================

type autocompleteServiceProtobufClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewAutocompleteServiceProtobufClient creates a Protobuf client that implements the AutocompleteService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewAutocompleteServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) AutocompleteService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "user_service", "AutocompleteService")
	urls := [1]string{
		serviceURL + "GetCompletion",
	}

	return &autocompleteServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *autocompleteServiceProtobufClient) GetCompletion(ctx context.Context, in *UsernameSearchRequest) (*UsernameSearchResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AutocompleteService")
	ctx = ctxsetters.WithMethodName(ctx, "GetCompletion")
	caller := c.callGetCompletion
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UsernameSearchRequest) (*UsernameSearchResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UsernameSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UsernameSearchRequest) when calling interceptor")
					}
					return c.callGetCompletion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UsernameSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UsernameSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *autocompleteServiceProtobufClient) callGetCompletion(ctx context.Context, in *UsernameSearchRequest) (*UsernameSearchResponse, error) {
	out := new(UsernameSearchResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===============================
// AutocompleteService JSON Client
// ===============================

type autocompleteServiceJSONClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewAutocompleteServiceJSONClient creates a JSON client that implements the AutocompleteService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewAutocompleteServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) AutocompleteService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "user_service", "AutocompleteService")
	urls := [1]string{
		serviceURL + "GetCompletion",
	}

	return &autocompleteServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *autocompleteServiceJSONClient) GetCompletion(ctx context.Context, in *UsernameSearchRequest) (*UsernameSearchResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AutocompleteService")
	ctx = ctxsetters.WithMethodName(ctx, "GetCompletion")
	caller := c.callGetCompletion
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UsernameSearchRequest) (*UsernameSearchResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UsernameSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UsernameSearchRequest) when calling interceptor")
					}
					return c.callGetCompletion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UsernameSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UsernameSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *autocompleteServiceJSONClient) callGetCompletion(ctx context.Context, in *UsernameSearchRequest) (*UsernameSearchResponse, error) {
	out := new(UsernameSearchResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==================================
// AutocompleteService Server Handler
// ==================================

type autocompleteServiceServer struct {
	AutocompleteService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewAutocompleteServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewAutocompleteServiceServer(svc AutocompleteService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &autocompleteServiceServer{
		AutocompleteService: svc,
		hooks:               serverOpts.Hooks,
		interceptor:         twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:          pathPrefix,
		jsonSkipDefaults:    jsonSkipDefaults,
		jsonCamelCase:       jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *autocompleteServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *autocompleteServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// AutocompleteServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const AutocompleteServicePathPrefix = "/twirp/user_service.AutocompleteService/"

func (s *autocompleteServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "AutocompleteService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "user_service.AutocompleteService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "GetCompletion":
		s.serveGetCompletion(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *autocompleteServiceServer) serveGetCompletion(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCompletionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCompletionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *autocompleteServiceServer) serveGetCompletionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCompletion")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UsernameSearchRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AutocompleteService.GetCompletion
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UsernameSearchRequest) (*UsernameSearchResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UsernameSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UsernameSearchRequest) when calling interceptor")
					}
					return s.AutocompleteService.GetCompletion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UsernameSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UsernameSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UsernameSearchResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UsernameSearchResponse and nil error while calling GetCompletion. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *autocompleteServiceServer) serveGetCompletionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCompletion")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UsernameSearchRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AutocompleteService.GetCompletion
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UsernameSearchRequest) (*UsernameSearchResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UsernameSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UsernameSearchRequest) when calling interceptor")
					}
					return s.AutocompleteService.GetCompletion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UsernameSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UsernameSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UsernameSearchResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UsernameSearchResponse and nil error while calling GetCompletion. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *autocompleteServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 3
}

func (s *autocompleteServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.2"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *autocompleteServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "user_service", "AutocompleteService")
}

// ==========================
// SocializeService Interface
// ==========================

// Yeah I know
type SocializeService interface {
	AddFollow(context.Context, *AddFollowRequest) (*OKResponse, error)

	RemoveFollow(context.Context, *RemoveFollowRequest) (*OKResponse, error)

	GetFollows(context.Context, *GetFollowsRequest) (*GetFollowsResponse, error)

	AddBlock(context.Context, *AddBlockRequest) (*OKResponse, error)

	RemoveBlock(context.Context, *RemoveBlockRequest) (*OKResponse, error)

	GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error)

	// GetFullBlocks gets players who blocked us AND players we've blocked
	// together.
	GetFullBlocks(context.Context, *GetFullBlocksRequest) (*GetFullBlocksResponse, error)

	GetActiveChatChannels(context.Context, *GetActiveChatChannelsRequest) (*ActiveChatChannels, error)

	GetChatsForChannel(context.Context, *GetChatsRequest) (*ipc.ChatMessages, error)

	GetModList(context.Context, *GetModListRequest) (*GetModListResponse, error)
}

// ================================
// SocializeService Protobuf Client
// ================================

type socializeServiceProtobufClient struct {
	client      HTTPClient
	urls        [10]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewSocializeServiceProtobufClient creates a Protobuf client that implements the SocializeService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewSocializeServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) SocializeService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "user_service", "SocializeService")
	urls := [10]string{
		serviceURL + "AddFollow",
		serviceURL + "RemoveFollow",
		serviceURL + "GetFollows",
		serviceURL + "AddBlock",
		serviceURL + "RemoveBlock",
		serviceURL + "GetBlocks",
		serviceURL + "GetFullBlocks",
		serviceURL + "GetActiveChatChannels",
		serviceURL + "GetChatsForChannel",
		serviceURL + "GetModList",
	}

	return &socializeServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *socializeServiceProtobufClient) AddFollow(ctx context.Context, in *AddFollowRequest) (*OKResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "AddFollow")
	caller := c.callAddFollow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddFollowRequest) (*OKResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddFollowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddFollowRequest) when calling interceptor")
					}
					return c.callAddFollow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceProtobufClient) callAddFollow(ctx context.Context, in *AddFollowRequest) (*OKResponse, error) {
	out := new(OKResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceProtobufClient) RemoveFollow(ctx context.Context, in *RemoveFollowRequest) (*OKResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveFollow")
	caller := c.callRemoveFollow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RemoveFollowRequest) (*OKResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveFollowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveFollowRequest) when calling interceptor")
					}
					return c.callRemoveFollow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceProtobufClient) callRemoveFollow(ctx context.Context, in *RemoveFollowRequest) (*OKResponse, error) {
	out := new(OKResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceProtobufClient) GetFollows(ctx context.Context, in *GetFollowsRequest) (*GetFollowsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "GetFollows")
	caller := c.callGetFollows
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetFollowsRequest) (*GetFollowsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetFollowsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetFollowsRequest) when calling interceptor")
					}
					return c.callGetFollows(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetFollowsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetFollowsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceProtobufClient) callGetFollows(ctx context.Context, in *GetFollowsRequest) (*GetFollowsResponse, error) {
	out := new(GetFollowsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceProtobufClient) AddBlock(ctx context.Context, in *AddBlockRequest) (*OKResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "AddBlock")
	caller := c.callAddBlock
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddBlockRequest) (*OKResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddBlockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddBlockRequest) when calling interceptor")
					}
					return c.callAddBlock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceProtobufClient) callAddBlock(ctx context.Context, in *AddBlockRequest) (*OKResponse, error) {
	out := new(OKResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceProtobufClient) RemoveBlock(ctx context.Context, in *RemoveBlockRequest) (*OKResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveBlock")
	caller := c.callRemoveBlock
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RemoveBlockRequest) (*OKResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveBlockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveBlockRequest) when calling interceptor")
					}
					return c.callRemoveBlock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceProtobufClient) callRemoveBlock(ctx context.Context, in *RemoveBlockRequest) (*OKResponse, error) {
	out := new(OKResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceProtobufClient) GetBlocks(ctx context.Context, in *GetBlocksRequest) (*GetBlocksResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "GetBlocks")
	caller := c.callGetBlocks
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetBlocksRequest) (*GetBlocksResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetBlocksRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetBlocksRequest) when calling interceptor")
					}
					return c.callGetBlocks(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetBlocksResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetBlocksResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceProtobufClient) callGetBlocks(ctx context.Context, in *GetBlocksRequest) (*GetBlocksResponse, error) {
	out := new(GetBlocksResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceProtobufClient) GetFullBlocks(ctx context.Context, in *GetFullBlocksRequest) (*GetFullBlocksResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "GetFullBlocks")
	caller := c.callGetFullBlocks
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetFullBlocksRequest) (*GetFullBlocksResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetFullBlocksRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetFullBlocksRequest) when calling interceptor")
					}
					return c.callGetFullBlocks(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetFullBlocksResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetFullBlocksResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceProtobufClient) callGetFullBlocks(ctx context.Context, in *GetFullBlocksRequest) (*GetFullBlocksResponse, error) {
	out := new(GetFullBlocksResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceProtobufClient) GetActiveChatChannels(ctx context.Context, in *GetActiveChatChannelsRequest) (*ActiveChatChannels, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "GetActiveChatChannels")
	caller := c.callGetActiveChatChannels
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetActiveChatChannelsRequest) (*ActiveChatChannels, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetActiveChatChannelsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetActiveChatChannelsRequest) when calling interceptor")
					}
					return c.callGetActiveChatChannels(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ActiveChatChannels)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ActiveChatChannels) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceProtobufClient) callGetActiveChatChannels(ctx context.Context, in *GetActiveChatChannelsRequest) (*ActiveChatChannels, error) {
	out := new(ActiveChatChannels)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceProtobufClient) GetChatsForChannel(ctx context.Context, in *GetChatsRequest) (*ipc.ChatMessages, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "GetChatsForChannel")
	caller := c.callGetChatsForChannel
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetChatsRequest) (*ipc.ChatMessages, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetChatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetChatsRequest) when calling interceptor")
					}
					return c.callGetChatsForChannel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ipc.ChatMessages)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ipc.ChatMessages) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceProtobufClient) callGetChatsForChannel(ctx context.Context, in *GetChatsRequest) (*ipc.ChatMessages, error) {
	out := new(ipc.ChatMessages)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceProtobufClient) GetModList(ctx context.Context, in *GetModListRequest) (*GetModListResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "GetModList")
	caller := c.callGetModList
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetModListRequest) (*GetModListResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetModListRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetModListRequest) when calling interceptor")
					}
					return c.callGetModList(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetModListResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetModListResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceProtobufClient) callGetModList(ctx context.Context, in *GetModListRequest) (*GetModListResponse, error) {
	out := new(GetModListResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ============================
// SocializeService JSON Client
// ============================

type socializeServiceJSONClient struct {
	client      HTTPClient
	urls        [10]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewSocializeServiceJSONClient creates a JSON client that implements the SocializeService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewSocializeServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) SocializeService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "user_service", "SocializeService")
	urls := [10]string{
		serviceURL + "AddFollow",
		serviceURL + "RemoveFollow",
		serviceURL + "GetFollows",
		serviceURL + "AddBlock",
		serviceURL + "RemoveBlock",
		serviceURL + "GetBlocks",
		serviceURL + "GetFullBlocks",
		serviceURL + "GetActiveChatChannels",
		serviceURL + "GetChatsForChannel",
		serviceURL + "GetModList",
	}

	return &socializeServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *socializeServiceJSONClient) AddFollow(ctx context.Context, in *AddFollowRequest) (*OKResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "AddFollow")
	caller := c.callAddFollow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddFollowRequest) (*OKResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddFollowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddFollowRequest) when calling interceptor")
					}
					return c.callAddFollow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceJSONClient) callAddFollow(ctx context.Context, in *AddFollowRequest) (*OKResponse, error) {
	out := new(OKResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceJSONClient) RemoveFollow(ctx context.Context, in *RemoveFollowRequest) (*OKResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveFollow")
	caller := c.callRemoveFollow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RemoveFollowRequest) (*OKResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveFollowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveFollowRequest) when calling interceptor")
					}
					return c.callRemoveFollow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceJSONClient) callRemoveFollow(ctx context.Context, in *RemoveFollowRequest) (*OKResponse, error) {
	out := new(OKResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceJSONClient) GetFollows(ctx context.Context, in *GetFollowsRequest) (*GetFollowsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "GetFollows")
	caller := c.callGetFollows
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetFollowsRequest) (*GetFollowsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetFollowsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetFollowsRequest) when calling interceptor")
					}
					return c.callGetFollows(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetFollowsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetFollowsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceJSONClient) callGetFollows(ctx context.Context, in *GetFollowsRequest) (*GetFollowsResponse, error) {
	out := new(GetFollowsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceJSONClient) AddBlock(ctx context.Context, in *AddBlockRequest) (*OKResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "AddBlock")
	caller := c.callAddBlock
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddBlockRequest) (*OKResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddBlockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddBlockRequest) when calling interceptor")
					}
					return c.callAddBlock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceJSONClient) callAddBlock(ctx context.Context, in *AddBlockRequest) (*OKResponse, error) {
	out := new(OKResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceJSONClient) RemoveBlock(ctx context.Context, in *RemoveBlockRequest) (*OKResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveBlock")
	caller := c.callRemoveBlock
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RemoveBlockRequest) (*OKResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveBlockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveBlockRequest) when calling interceptor")
					}
					return c.callRemoveBlock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceJSONClient) callRemoveBlock(ctx context.Context, in *RemoveBlockRequest) (*OKResponse, error) {
	out := new(OKResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceJSONClient) GetBlocks(ctx context.Context, in *GetBlocksRequest) (*GetBlocksResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "GetBlocks")
	caller := c.callGetBlocks
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetBlocksRequest) (*GetBlocksResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetBlocksRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetBlocksRequest) when calling interceptor")
					}
					return c.callGetBlocks(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetBlocksResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetBlocksResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceJSONClient) callGetBlocks(ctx context.Context, in *GetBlocksRequest) (*GetBlocksResponse, error) {
	out := new(GetBlocksResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceJSONClient) GetFullBlocks(ctx context.Context, in *GetFullBlocksRequest) (*GetFullBlocksResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "GetFullBlocks")
	caller := c.callGetFullBlocks
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetFullBlocksRequest) (*GetFullBlocksResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetFullBlocksRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetFullBlocksRequest) when calling interceptor")
					}
					return c.callGetFullBlocks(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetFullBlocksResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetFullBlocksResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceJSONClient) callGetFullBlocks(ctx context.Context, in *GetFullBlocksRequest) (*GetFullBlocksResponse, error) {
	out := new(GetFullBlocksResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceJSONClient) GetActiveChatChannels(ctx context.Context, in *GetActiveChatChannelsRequest) (*ActiveChatChannels, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "GetActiveChatChannels")
	caller := c.callGetActiveChatChannels
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetActiveChatChannelsRequest) (*ActiveChatChannels, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetActiveChatChannelsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetActiveChatChannelsRequest) when calling interceptor")
					}
					return c.callGetActiveChatChannels(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ActiveChatChannels)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ActiveChatChannels) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceJSONClient) callGetActiveChatChannels(ctx context.Context, in *GetActiveChatChannelsRequest) (*ActiveChatChannels, error) {
	out := new(ActiveChatChannels)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceJSONClient) GetChatsForChannel(ctx context.Context, in *GetChatsRequest) (*ipc.ChatMessages, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "GetChatsForChannel")
	caller := c.callGetChatsForChannel
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetChatsRequest) (*ipc.ChatMessages, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetChatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetChatsRequest) when calling interceptor")
					}
					return c.callGetChatsForChannel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ipc.ChatMessages)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ipc.ChatMessages) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceJSONClient) callGetChatsForChannel(ctx context.Context, in *GetChatsRequest) (*ipc.ChatMessages, error) {
	out := new(ipc.ChatMessages)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *socializeServiceJSONClient) GetModList(ctx context.Context, in *GetModListRequest) (*GetModListResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithMethodName(ctx, "GetModList")
	caller := c.callGetModList
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetModListRequest) (*GetModListResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetModListRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetModListRequest) when calling interceptor")
					}
					return c.callGetModList(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetModListResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetModListResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *socializeServiceJSONClient) callGetModList(ctx context.Context, in *GetModListRequest) (*GetModListResponse, error) {
	out := new(GetModListResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===============================
// SocializeService Server Handler
// ===============================

type socializeServiceServer struct {
	SocializeService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewSocializeServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewSocializeServiceServer(svc SocializeService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &socializeServiceServer{
		SocializeService: svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *socializeServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *socializeServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// SocializeServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const SocializeServicePathPrefix = "/twirp/user_service.SocializeService/"

func (s *socializeServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "user_service")
	ctx = ctxsetters.WithServiceName(ctx, "SocializeService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "user_service.SocializeService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "AddFollow":
		s.serveAddFollow(ctx, resp, req)
		return
	case "RemoveFollow":
		s.serveRemoveFollow(ctx, resp, req)
		return
	case "GetFollows":
		s.serveGetFollows(ctx, resp, req)
		return
	case "AddBlock":
		s.serveAddBlock(ctx, resp, req)
		return
	case "RemoveBlock":
		s.serveRemoveBlock(ctx, resp, req)
		return
	case "GetBlocks":
		s.serveGetBlocks(ctx, resp, req)
		return
	case "GetFullBlocks":
		s.serveGetFullBlocks(ctx, resp, req)
		return
	case "GetActiveChatChannels":
		s.serveGetActiveChatChannels(ctx, resp, req)
		return
	case "GetChatsForChannel":
		s.serveGetChatsForChannel(ctx, resp, req)
		return
	case "GetModList":
		s.serveGetModList(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *socializeServiceServer) serveAddFollow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAddFollowJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddFollowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *socializeServiceServer) serveAddFollowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddFollow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(AddFollowRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SocializeService.AddFollow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddFollowRequest) (*OKResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddFollowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddFollowRequest) when calling interceptor")
					}
					return s.SocializeService.AddFollow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *OKResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OKResponse and nil error while calling AddFollow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveAddFollowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddFollow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(AddFollowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SocializeService.AddFollow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddFollowRequest) (*OKResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddFollowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddFollowRequest) when calling interceptor")
					}
					return s.SocializeService.AddFollow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *OKResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OKResponse and nil error while calling AddFollow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveRemoveFollow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveFollowJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveFollowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *socializeServiceServer) serveRemoveFollowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveFollow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RemoveFollowRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SocializeService.RemoveFollow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RemoveFollowRequest) (*OKResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveFollowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveFollowRequest) when calling interceptor")
					}
					return s.SocializeService.RemoveFollow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *OKResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OKResponse and nil error while calling RemoveFollow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveRemoveFollowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveFollow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RemoveFollowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SocializeService.RemoveFollow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RemoveFollowRequest) (*OKResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveFollowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveFollowRequest) when calling interceptor")
					}
					return s.SocializeService.RemoveFollow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *OKResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OKResponse and nil error while calling RemoveFollow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveGetFollows(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetFollowsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetFollowsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *socializeServiceServer) serveGetFollowsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetFollows")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetFollowsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SocializeService.GetFollows
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetFollowsRequest) (*GetFollowsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetFollowsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetFollowsRequest) when calling interceptor")
					}
					return s.SocializeService.GetFollows(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetFollowsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetFollowsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetFollowsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetFollowsResponse and nil error while calling GetFollows. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveGetFollowsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetFollows")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetFollowsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SocializeService.GetFollows
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetFollowsRequest) (*GetFollowsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetFollowsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetFollowsRequest) when calling interceptor")
					}
					return s.SocializeService.GetFollows(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetFollowsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetFollowsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetFollowsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetFollowsResponse and nil error while calling GetFollows. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveAddBlock(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAddBlockJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddBlockProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *socializeServiceServer) serveAddBlockJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddBlock")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(AddBlockRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SocializeService.AddBlock
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddBlockRequest) (*OKResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddBlockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddBlockRequest) when calling interceptor")
					}
					return s.SocializeService.AddBlock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *OKResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OKResponse and nil error while calling AddBlock. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveAddBlockProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddBlock")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(AddBlockRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SocializeService.AddBlock
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddBlockRequest) (*OKResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddBlockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddBlockRequest) when calling interceptor")
					}
					return s.SocializeService.AddBlock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *OKResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OKResponse and nil error while calling AddBlock. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveRemoveBlock(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveBlockJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveBlockProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *socializeServiceServer) serveRemoveBlockJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveBlock")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RemoveBlockRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SocializeService.RemoveBlock
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RemoveBlockRequest) (*OKResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveBlockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveBlockRequest) when calling interceptor")
					}
					return s.SocializeService.RemoveBlock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *OKResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OKResponse and nil error while calling RemoveBlock. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveRemoveBlockProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveBlock")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RemoveBlockRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SocializeService.RemoveBlock
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RemoveBlockRequest) (*OKResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveBlockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveBlockRequest) when calling interceptor")
					}
					return s.SocializeService.RemoveBlock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*OKResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*OKResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *OKResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OKResponse and nil error while calling RemoveBlock. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveGetBlocks(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetBlocksJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetBlocksProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *socializeServiceServer) serveGetBlocksJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBlocks")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetBlocksRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SocializeService.GetBlocks
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetBlocksRequest) (*GetBlocksResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetBlocksRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetBlocksRequest) when calling interceptor")
					}
					return s.SocializeService.GetBlocks(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetBlocksResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetBlocksResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetBlocksResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetBlocksResponse and nil error while calling GetBlocks. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveGetBlocksProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBlocks")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetBlocksRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SocializeService.GetBlocks
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetBlocksRequest) (*GetBlocksResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetBlocksRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetBlocksRequest) when calling interceptor")
					}
					return s.SocializeService.GetBlocks(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetBlocksResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetBlocksResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetBlocksResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetBlocksResponse and nil error while calling GetBlocks. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveGetFullBlocks(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetFullBlocksJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetFullBlocksProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *socializeServiceServer) serveGetFullBlocksJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetFullBlocks")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetFullBlocksRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SocializeService.GetFullBlocks
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetFullBlocksRequest) (*GetFullBlocksResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetFullBlocksRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetFullBlocksRequest) when calling interceptor")
					}
					return s.SocializeService.GetFullBlocks(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetFullBlocksResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetFullBlocksResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetFullBlocksResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetFullBlocksResponse and nil error while calling GetFullBlocks. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveGetFullBlocksProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetFullBlocks")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetFullBlocksRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SocializeService.GetFullBlocks
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetFullBlocksRequest) (*GetFullBlocksResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetFullBlocksRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetFullBlocksRequest) when calling interceptor")
					}
					return s.SocializeService.GetFullBlocks(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetFullBlocksResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetFullBlocksResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetFullBlocksResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetFullBlocksResponse and nil error while calling GetFullBlocks. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveGetActiveChatChannels(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetActiveChatChannelsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetActiveChatChannelsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *socializeServiceServer) serveGetActiveChatChannelsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetActiveChatChannels")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetActiveChatChannelsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SocializeService.GetActiveChatChannels
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetActiveChatChannelsRequest) (*ActiveChatChannels, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetActiveChatChannelsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetActiveChatChannelsRequest) when calling interceptor")
					}
					return s.SocializeService.GetActiveChatChannels(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ActiveChatChannels)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ActiveChatChannels) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ActiveChatChannels
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ActiveChatChannels and nil error while calling GetActiveChatChannels. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveGetActiveChatChannelsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetActiveChatChannels")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetActiveChatChannelsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SocializeService.GetActiveChatChannels
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetActiveChatChannelsRequest) (*ActiveChatChannels, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetActiveChatChannelsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetActiveChatChannelsRequest) when calling interceptor")
					}
					return s.SocializeService.GetActiveChatChannels(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ActiveChatChannels)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ActiveChatChannels) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ActiveChatChannels
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ActiveChatChannels and nil error while calling GetActiveChatChannels. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveGetChatsForChannel(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetChatsForChannelJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetChatsForChannelProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *socializeServiceServer) serveGetChatsForChannelJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetChatsForChannel")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetChatsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SocializeService.GetChatsForChannel
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetChatsRequest) (*ipc.ChatMessages, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetChatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetChatsRequest) when calling interceptor")
					}
					return s.SocializeService.GetChatsForChannel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ipc.ChatMessages)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ipc.ChatMessages) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ipc.ChatMessages
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ipc.ChatMessages and nil error while calling GetChatsForChannel. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveGetChatsForChannelProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetChatsForChannel")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetChatsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SocializeService.GetChatsForChannel
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetChatsRequest) (*ipc.ChatMessages, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetChatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetChatsRequest) when calling interceptor")
					}
					return s.SocializeService.GetChatsForChannel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ipc.ChatMessages)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ipc.ChatMessages) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ipc.ChatMessages
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ipc.ChatMessages and nil error while calling GetChatsForChannel. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveGetModList(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetModListJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetModListProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *socializeServiceServer) serveGetModListJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetModList")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetModListRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SocializeService.GetModList
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetModListRequest) (*GetModListResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetModListRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetModListRequest) when calling interceptor")
					}
					return s.SocializeService.GetModList(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetModListResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetModListResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetModListResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetModListResponse and nil error while calling GetModList. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) serveGetModListProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetModList")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetModListRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SocializeService.GetModList
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetModListRequest) (*GetModListResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetModListRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetModListRequest) when calling interceptor")
					}
					return s.SocializeService.GetModList(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetModListResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetModListResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetModListResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetModListResponse and nil error while calling GetModList. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *socializeServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 4
}

func (s *socializeServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.2"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *socializeServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "user_service", "SocializeService")
}

// =====
// Utils
// =====

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
//
// HTTPClient implementations should not follow redirects. Redirects are
// automatically disabled if *(net/http).Client is passed to client
// constructors. See the withoutRedirects function in this file for more
// details.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// TwirpServer is the interface generated server structs will support: they're
// HTTP handlers with additional methods for accessing metadata about the
// service. Those accessors are a low-level API for building reflection tools.
// Most people can think of TwirpServers as just http.Handlers.
type TwirpServer interface {
	http.Handler

	// ServiceDescriptor returns gzipped bytes describing the .proto file that
	// this service was generated from. Once unzipped, the bytes can be
	// unmarshalled as a
	// google.golang.org/protobuf/types/descriptorpb.FileDescriptorProto.
	//
	// The returned integer is the index of this particular service within that
	// FileDescriptorProto's 'Service' slice of ServiceDescriptorProtos. This is a
	// low-level field, expected to be used for reflection.
	ServiceDescriptor() ([]byte, int)

	// ProtocGenTwirpVersion is the semantic version string of the version of
	// twirp used to generate this file.
	ProtocGenTwirpVersion() string

	// PathPrefix returns the HTTP URL path prefix for all methods handled by this
	// service. This can be used with an HTTP mux to route Twirp requests.
	// The path prefix is in the form: "/<prefix>/<package>.<Service>/"
	// that is, everything in a Twirp route except for the <Method> at the end.
	PathPrefix() string
}

func newServerOpts(opts []interface{}) *twirp.ServerOptions {
	serverOpts := &twirp.ServerOptions{}
	for _, opt := range opts {
		switch o := opt.(type) {
		case twirp.ServerOption:
			o(serverOpts)
		case *twirp.ServerHooks: // backwards compatibility, allow to specify hooks as an argument
			twirp.WithServerHooks(o)(serverOpts)
		case nil: // backwards compatibility, allow nil value for the argument
			continue
		default:
			panic(fmt.Sprintf("Invalid option type %T, please use a twirp.ServerOption", o))
		}
	}
	return serverOpts
}

// WriteError writes an HTTP response with a valid Twirp error format (code, msg, meta).
// Useful outside of the Twirp server (e.g. http middleware), but does not trigger hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func WriteError(resp http.ResponseWriter, err error) {
	writeError(context.Background(), resp, err, nil)
}

// writeError writes Twirp errors in the response and triggers hooks.
func writeError(ctx context.Context, resp http.ResponseWriter, err error, hooks *twirp.ServerHooks) {
	// Convert to a twirp.Error. Non-twirp errors are converted to internal errors.
	var twerr twirp.Error
	if !errors.As(err, &twerr) {
		twerr = twirp.InternalErrorWith(err)
	}

	statusCode := twirp.ServerHTTPStatusFromErrorCode(twerr.Code())
	ctx = ctxsetters.WithStatusCode(ctx, statusCode)
	ctx = callError(ctx, hooks, twerr)

	respBody := marshalErrorToJSON(twerr)

	resp.Header().Set("Content-Type", "application/json") // Error responses are always JSON
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBody)))
	resp.WriteHeader(statusCode) // set HTTP status code and send response

	_, writeErr := resp.Write(respBody)
	if writeErr != nil {
		// We have three options here. We could log the error, call the Error
		// hook, or just silently ignore the error.
		//
		// Logging is unacceptable because we don't have a user-controlled
		// logger; writing out to stderr without permission is too rude.
		//
		// Calling the Error hook would confuse users: it would mean the Error
		// hook got called twice for one request, which is likely to lead to
		// duplicated log messages and metrics, no matter how well we document
		// the behavior.
		//
		// Silently ignoring the error is our least-bad option. It's highly
		// likely that the connection is broken and the original 'err' says
		// so anyway.
		_ = writeErr
	}

	callResponseSent(ctx, hooks)
}

// sanitizeBaseURL parses the the baseURL, and adds the "http" scheme if needed.
// If the URL is unparsable, the baseURL is returned unchaged.
func sanitizeBaseURL(baseURL string) string {
	u, err := url.Parse(baseURL)
	if err != nil {
		return baseURL // invalid URL will fail later when making requests
	}
	if u.Scheme == "" {
		u.Scheme = "http"
	}
	return u.String()
}

// baseServicePath composes the path prefix for the service (without <Method>).
// e.g.: baseServicePath("/twirp", "my.pkg", "MyService")
//
//	returns => "/twirp/my.pkg.MyService/"
//
// e.g.: baseServicePath("", "", "MyService")
//
//	returns => "/MyService/"
func baseServicePath(prefix, pkg, service string) string {
	fullServiceName := service
	if pkg != "" {
		fullServiceName = pkg + "." + service
	}
	return path.Join("/", prefix, fullServiceName) + "/"
}

// parseTwirpPath extracts path components form a valid Twirp route.
// Expected format: "[<prefix>]/<package>.<Service>/<Method>"
// e.g.: prefix, pkgService, method := parseTwirpPath("/twirp/pkg.Svc/MakeHat")
func parseTwirpPath(path string) (string, string, string) {
	parts := strings.Split(path, "/")
	if len(parts) < 2 {
		return "", "", ""
	}
	method := parts[len(parts)-1]
	pkgService := parts[len(parts)-2]
	prefix := strings.Join(parts[0:len(parts)-2], "/")
	return prefix, pkgService, method
}

// getCustomHTTPReqHeaders retrieves a copy of any headers that are set in
// a context through the twirp.WithHTTPRequestHeaders function.
// If there are no headers set, or if they have the wrong type, nil is returned.
func getCustomHTTPReqHeaders(ctx context.Context) http.Header {
	header, ok := twirp.HTTPRequestHeaders(ctx)
	if !ok || header == nil {
		return nil
	}
	copied := make(http.Header)
	for k, vv := range header {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}
	return copied
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if customHeader := getCustomHTTPReqHeaders(ctx); customHeader != nil {
		req.Header = customHeader
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	req.Header.Set("Twirp-Version", "v8.1.2")
	return req, nil
}

// JSON serialization for errors
type twerrJSON struct {
	Code string            `json:"code"`
	Msg  string            `json:"msg"`
	Meta map[string]string `json:"meta,omitempty"`
}

// marshalErrorToJSON returns JSON from a twirp.Error, that can be used as HTTP error response body.
// If serialization fails, it will use a descriptive Internal error instead.
func marshalErrorToJSON(twerr twirp.Error) []byte {
	// make sure that msg is not too large
	msg := twerr.Msg()
	if len(msg) > 1e6 {
		msg = msg[:1e6]
	}

	tj := twerrJSON{
		Code: string(twerr.Code()),
		Msg:  msg,
		Meta: twerr.MetaMap(),
	}

	buf, err := json.Marshal(&tj)
	if err != nil {
		buf = []byte("{\"type\": \"" + twirp.Internal + "\", \"msg\": \"There was an error but it could not be serialized into JSON\"}") // fallback
	}

	return buf
}

// errorFromResponse builds a twirp.Error from a non-200 HTTP response.
// If the response has a valid serialized Twirp error, then it's returned.
// If not, the response status code is used to generate a similar twirp
// error. See twirpErrorFromIntermediary for more info on intermediary errors.
func errorFromResponse(resp *http.Response) twirp.Error {
	statusCode := resp.StatusCode
	statusText := http.StatusText(statusCode)

	if isHTTPRedirect(statusCode) {
		// Unexpected redirect: it must be an error from an intermediary.
		// Twirp clients don't follow redirects automatically, Twirp only handles
		// POST requests, redirects should only happen on GET and HEAD requests.
		location := resp.Header.Get("Location")
		msg := fmt.Sprintf("unexpected HTTP status code %d %q received, Location=%q", statusCode, statusText, location)
		return twirpErrorFromIntermediary(statusCode, msg, location)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return wrapInternal(err, "failed to read server error response body")
	}

	var tj twerrJSON
	dec := json.NewDecoder(bytes.NewReader(respBodyBytes))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&tj); err != nil || tj.Code == "" {
		// Invalid JSON response; it must be an error from an intermediary.
		msg := fmt.Sprintf("Error from intermediary with HTTP status code %d %q", statusCode, statusText)
		return twirpErrorFromIntermediary(statusCode, msg, string(respBodyBytes))
	}

	errorCode := twirp.ErrorCode(tj.Code)
	if !twirp.IsValidErrorCode(errorCode) {
		msg := "invalid type returned from server error response: " + tj.Code
		return twirp.InternalError(msg).WithMeta("body", string(respBodyBytes))
	}

	twerr := twirp.NewError(errorCode, tj.Msg)
	for k, v := range tj.Meta {
		twerr = twerr.WithMeta(k, v)
	}
	return twerr
}

// twirpErrorFromIntermediary maps HTTP errors from non-twirp sources to twirp errors.
// The mapping is similar to gRPC: https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.
// Returned twirp Errors have some additional metadata for inspection.
func twirpErrorFromIntermediary(status int, msg string, bodyOrLocation string) twirp.Error {
	var code twirp.ErrorCode
	if isHTTPRedirect(status) { // 3xx
		code = twirp.Internal
	} else {
		switch status {
		case 400: // Bad Request
			code = twirp.Internal
		case 401: // Unauthorized
			code = twirp.Unauthenticated
		case 403: // Forbidden
			code = twirp.PermissionDenied
		case 404: // Not Found
			code = twirp.BadRoute
		case 429: // Too Many Requests
			code = twirp.ResourceExhausted
		case 502, 503, 504: // Bad Gateway, Service Unavailable, Gateway Timeout
			code = twirp.Unavailable
		default: // All other codes
			code = twirp.Unknown
		}
	}

	twerr := twirp.NewError(code, msg)
	twerr = twerr.WithMeta("http_error_from_intermediary", "true") // to easily know if this error was from intermediary
	twerr = twerr.WithMeta("status_code", strconv.Itoa(status))
	if isHTTPRedirect(status) {
		twerr = twerr.WithMeta("location", bodyOrLocation)
	} else {
		twerr = twerr.WithMeta("body", bodyOrLocation)
	}
	return twerr
}

func isHTTPRedirect(status int) bool {
	return status >= 300 && status <= 399
}

// wrapInternal wraps an error with a prefix as an Internal error.
// The original error cause is accessible by github.com/pkg/errors.Cause.
func wrapInternal(err error, prefix string) twirp.Error {
	return twirp.InternalErrorWith(&wrappedError{prefix: prefix, cause: err})
}

type wrappedError struct {
	prefix string
	cause  error
}

func (e *wrappedError) Error() string { return e.prefix + ": " + e.cause.Error() }
func (e *wrappedError) Unwrap() error { return e.cause } // for go1.13 + errors.Is/As
func (e *wrappedError) Cause() error  { return e.cause } // for github.com/pkg/errors

// ensurePanicResponses makes sure that rpc methods causing a panic still result in a Twirp Internal
// error response (status 500), and error hooks are properly called with the panic wrapped as an error.
// The panic is re-raised so it can be handled normally with middleware.
func ensurePanicResponses(ctx context.Context, resp http.ResponseWriter, hooks *twirp.ServerHooks) {
	if r := recover(); r != nil {
		// Wrap the panic as an error so it can be passed to error hooks.
		// The original error is accessible from error hooks, but not visible in the response.
		err := errFromPanic(r)
		twerr := &internalWithCause{msg: "Internal service panic", cause: err}
		// Actually write the error
		writeError(ctx, resp, twerr, hooks)
		// If possible, flush the error to the wire.
		f, ok := resp.(http.Flusher)
		if ok {
			f.Flush()
		}

		panic(r)
	}
}

// errFromPanic returns the typed error if the recovered panic is an error, otherwise formats as error.
func errFromPanic(p interface{}) error {
	if err, ok := p.(error); ok {
		return err
	}
	return fmt.Errorf("panic: %v", p)
}

// internalWithCause is a Twirp Internal error wrapping an original error cause,
// but the original error message is not exposed on Msg(). The original error
// can be checked with go1.13+ errors.Is/As, and also by (github.com/pkg/errors).Unwrap
type internalWithCause struct {
	msg   string
	cause error
}

func (e *internalWithCause) Unwrap() error                               { return e.cause } // for go1.13 + errors.Is/As
func (e *internalWithCause) Cause() error                                { return e.cause } // for github.com/pkg/errors
func (e *internalWithCause) Error() string                               { return e.msg + ": " + e.cause.Error() }
func (e *internalWithCause) Code() twirp.ErrorCode                       { return twirp.Internal }
func (e *internalWithCause) Msg() string                                 { return e.msg }
func (e *internalWithCause) Meta(key string) string                      { return "" }
func (e *internalWithCause) MetaMap() map[string]string                  { return nil }
func (e *internalWithCause) WithMeta(key string, val string) twirp.Error { return e }

// malformedRequestError is used when the twirp server cannot unmarshal a request
func malformedRequestError(msg string) twirp.Error {
	return twirp.NewError(twirp.Malformed, msg)
}

// badRouteError is used when the twirp server cannot route a request
func badRouteError(msg string, method, url string) twirp.Error {
	err := twirp.NewError(twirp.BadRoute, msg)
	err = err.WithMeta("twirp_invalid_route", method+" "+url)
	return err
}

// withoutRedirects makes sure that the POST request can not be redirected.
// The standard library will, by default, redirect requests (including POSTs) if it gets a 302 or
// 303 response, and also 301s in go1.8. It redirects by making a second request, changing the
// method to GET and removing the body. This produces very confusing error messages, so instead we
// set a redirect policy that always errors. This stops Go from executing the redirect.
//
// We have to be a little careful in case the user-provided http.Client has its own CheckRedirect
// policy - if so, we'll run through that policy first.
//
// Because this requires modifying the http.Client, we make a new copy of the client and return it.
func withoutRedirects(in *http.Client) *http.Client {
	copy := *in
	copy.CheckRedirect = func(req *http.Request, via []*http.Request) error {
		if in.CheckRedirect != nil {
			// Run the input's redirect if it exists, in case it has side effects, but ignore any error it
			// returns, since we want to use ErrUseLastResponse.
			err := in.CheckRedirect(req, via)
			_ = err // Silly, but this makes sure generated code passes errcheck -blank, which some people use.
		}
		return http.ErrUseLastResponse
	}
	return &copy
}

// doProtobufRequest makes a Protobuf request to the remote Twirp service.
func doProtobufRequest(ctx context.Context, client HTTPClient, hooks *twirp.ClientHooks, url string, in, out proto.Message) (_ context.Context, err error) {
	reqBodyBytes, err := proto.Marshal(in)
	if err != nil {
		return ctx, wrapInternal(err, "failed to marshal proto request")
	}
	reqBody := bytes.NewBuffer(reqBodyBytes)
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, reqBody, "application/protobuf")
	if err != nil {
		return ctx, wrapInternal(err, "could not build request")
	}
	ctx, err = callClientRequestPrepared(ctx, hooks, req)
	if err != nil {
		return ctx, err
	}

	req = req.WithContext(ctx)
	resp, err := client.Do(req)
	if err != nil {
		return ctx, wrapInternal(err, "failed to do request")
	}
	defer func() { _ = resp.Body.Close() }()

	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return ctx, errorFromResponse(resp)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return ctx, wrapInternal(err, "failed to read response body")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if err = proto.Unmarshal(respBodyBytes, out); err != nil {
		return ctx, wrapInternal(err, "failed to unmarshal proto response")
	}
	return ctx, nil
}

// doJSONRequest makes a JSON request to the remote Twirp service.
func doJSONRequest(ctx context.Context, client HTTPClient, hooks *twirp.ClientHooks, url string, in, out proto.Message) (_ context.Context, err error) {
	marshaler := &protojson.MarshalOptions{UseProtoNames: true}
	reqBytes, err := marshaler.Marshal(in)
	if err != nil {
		return ctx, wrapInternal(err, "failed to marshal json request")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, bytes.NewReader(reqBytes), "application/json")
	if err != nil {
		return ctx, wrapInternal(err, "could not build request")
	}
	ctx, err = callClientRequestPrepared(ctx, hooks, req)
	if err != nil {
		return ctx, err
	}

	req = req.WithContext(ctx)
	resp, err := client.Do(req)
	if err != nil {
		return ctx, wrapInternal(err, "failed to do request")
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = wrapInternal(cerr, "failed to close response body")
		}
	}()

	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return ctx, errorFromResponse(resp)
	}

	d := json.NewDecoder(resp.Body)
	rawRespBody := json.RawMessage{}
	if err := d.Decode(&rawRespBody); err != nil {
		return ctx, wrapInternal(err, "failed to unmarshal json response")
	}
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawRespBody, out); err != nil {
		return ctx, wrapInternal(err, "failed to unmarshal json response")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}
	return ctx, nil
}

// Call twirp.ServerHooks.RequestReceived if the hook is available
func callRequestReceived(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestReceived == nil {
		return ctx, nil
	}
	return h.RequestReceived(ctx)
}

// Call twirp.ServerHooks.RequestRouted if the hook is available
func callRequestRouted(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestRouted == nil {
		return ctx, nil
	}
	return h.RequestRouted(ctx)
}

// Call twirp.ServerHooks.ResponsePrepared if the hook is available
func callResponsePrepared(ctx context.Context, h *twirp.ServerHooks) context.Context {
	if h == nil || h.ResponsePrepared == nil {
		return ctx
	}
	return h.ResponsePrepared(ctx)
}

// Call twirp.ServerHooks.ResponseSent if the hook is available
func callResponseSent(ctx context.Context, h *twirp.ServerHooks) {
	if h == nil || h.ResponseSent == nil {
		return
	}
	h.ResponseSent(ctx)
}

// Call twirp.ServerHooks.Error if the hook is available
func callError(ctx context.Context, h *twirp.ServerHooks, err twirp.Error) context.Context {
	if h == nil || h.Error == nil {
		return ctx
	}
	return h.Error(ctx, err)
}

func callClientResponseReceived(ctx context.Context, h *twirp.ClientHooks) {
	if h == nil || h.ResponseReceived == nil {
		return
	}
	h.ResponseReceived(ctx)
}

func callClientRequestPrepared(ctx context.Context, h *twirp.ClientHooks, req *http.Request) (context.Context, error) {
	if h == nil || h.RequestPrepared == nil {
		return ctx, nil
	}
	return h.RequestPrepared(ctx, req)
}

func callClientError(ctx context.Context, h *twirp.ClientHooks, err twirp.Error) {
	if h == nil || h.Error == nil {
		return
	}
	h.Error(ctx, err)
}

var twirpFileDescriptor0 = []byte{
	// 2122 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x59, 0x5f, 0x53, 0x23, 0xc7,
	0x11, 0x2f, 0x09, 0x04, 0xa8, 0x25, 0x40, 0x0c, 0x82, 0xd3, 0x2d, 0x87, 0x8f, 0xdb, 0xb3, 0x13,
	0xee, 0xec, 0xc0, 0x21, 0xc7, 0x29, 0xc7, 0x79, 0x02, 0xee, 0x8e, 0xe0, 0xbb, 0xb3, 0xaf, 0x44,
	0x70, 0x52, 0x76, 0x5c, 0xaa, 0x61, 0x77, 0x24, 0x2d, 0xac, 0x76, 0xe4, 0x9d, 0x59, 0x08, 0x79,
	0x4a, 0x1e, 0xf3, 0x9a, 0xaf, 0x90, 0x0f, 0x90, 0xe7, 0x3c, 0xe5, 0x4b, 0xe4, 0xb3, 0xe4, 0x29,
	0xa9, 0x4a, 0xcd, 0xbf, 0xd5, 0xee, 0x68, 0x11, 0xaa, 0xe4, 0x31, 0x6f, 0x9a, 0x9e, 0xee, 0x9e,
	0xee, 0x9e, 0xee, 0x9e, 0xfe, 0xad, 0xe0, 0x19, 0x1e, 0x05, 0xfb, 0xa3, 0x98, 0x72, 0xba, 0x9f,
	0x30, 0x12, 0x77, 0x19, 0x89, 0xaf, 0x03, 0x8f, 0xe4, 0x16, 0x7b, 0x72, 0x1f, 0xd5, 0xb3, 0x34,
	0xa7, 0x35, 0x16, 0x0c, 0x46, 0xde, 0xbe, 0x37, 0xc0, 0x5c, 0xf1, 0xb9, 0x5f, 0x42, 0xe3, 0x9c,
	0x91, 0xf8, 0x2d, 0xed, 0x07, 0x51, 0x87, 0xfc, 0x90, 0x10, 0xc6, 0x91, 0x03, 0x4b, 0x42, 0x3a,
	0xc2, 0x43, 0xd2, 0x2a, 0xed, 0x94, 0x76, 0xab, 0x9d, 0x74, 0x2d, 0xf6, 0x46, 0x98, 0xb1, 0x1b,
	0x1a, 0xfb, 0xad, 0xb2, 0xda, 0x33, 0x6b, 0xf7, 0x7b, 0xd8, 0x38, 0x1e, 0xe0, 0xa8, 0x4f, 0xde,
	0x6b, 0x8a, 0x51, 0xf8, 0x04, 0xea, 0x34, 0xf4, 0xbb, 0xa9, 0xa0, 0x52, 0x5a, 0xa3, 0xa1, 0x6f,
	0x38, 0x05, 0x4b, 0x44, 0x6e, 0xba, 0x96, 0xee, 0x5a, 0x44, 0x6e, 0x0c, 0x8b, 0xfb, 0x4b, 0x58,
	0xd6, 0x66, 0xb2, 0x11, 0x8d, 0x18, 0x41, 0x2d, 0x58, 0x1c, 0x12, 0xc6, 0x70, 0xdf, 0x98, 0x69,
	0x96, 0x68, 0x1b, 0x80, 0x11, 0xc6, 0x02, 0x1a, 0x75, 0x03, 0xa3, 0xab, 0xaa, 0x29, 0xa7, 0xbe,
	0xdb, 0x82, 0x4d, 0xdb, 0x50, 0xa5, 0xd2, 0x3d, 0x80, 0x87, 0x1d, 0xc2, 0x08, 0xb7, 0x3c, 0x38,
	0xe3, 0x64, 0x74, 0x80, 0x9a, 0x50, 0x21, 0x43, 0x1c, 0x84, 0xfa, 0x34, 0xb5, 0x70, 0xbf, 0xb9,
	0x5b, 0xa4, 0x9d, 0x0b, 0x57, 0x29, 0x1f, 0x2e, 0x61, 0x64, 0x2c, 0x04, 0xbb, 0x1e, 0xf5, 0x89,
	0x31, 0x52, 0x52, 0x8e, 0xa9, 0x4f, 0xdc, 0x07, 0xb0, 0x61, 0xe9, 0xd5, 0x36, 0x7e, 0x0a, 0xb5,
	0x63, 0x9a, 0x44, 0x3c, 0xbe, 0x7d, 0x1d, 0xe2, 0x3e, 0x6a, 0xc0, 0x5c, 0x12, 0x1b, 0x9b, 0xc4,
	0x4f, 0x84, 0x60, 0x5e, 0xde, 0x9d, 0x52, 0x29, 0x7f, 0xbb, 0x5f, 0x40, 0xe3, 0x4d, 0xe0, 0x5d,
	0x31, 0x8e, 0x63, 0x4e, 0xe2, 0x23, 0xec, 0xf7, 0x49, 0x81, 0x64, 0x13, 0x2a, 0x3c, 0xe0, 0xa1,
	0x11, 0x55, 0x0b, 0xf7, 0x9f, 0x25, 0xa8, 0x8b, 0x24, 0x39, 0xc1, 0x43, 0x72, 0x1a, 0xf5, 0xa8,
	0x38, 0x20, 0x49, 0x02, 0xe3, 0x91, 0xfc, 0x2d, 0xbc, 0xc1, 0xd7, 0x98, 0xe3, 0xb8, 0x2b, 0x74,
	0x6a, 0x6f, 0x14, 0xe5, 0x3c, 0xab, 0x79, 0x2e, 0xa3, 0x19, 0x6d, 0x41, 0xb5, 0x97, 0x84, 0x61,
	0x57, 0x9a, 0x3b, 0xaf, 0xe2, 0x23, 0x08, 0x5f, 0x89, 0x54, 0x3b, 0x80, 0xf9, 0x5e, 0x88, 0xfb,
	0xad, 0xca, 0x4e, 0x69, 0xb7, 0xd6, 0x7e, 0xb8, 0x97, 0xcb, 0xf2, 0x4c, 0x04, 0x8e, 0xca, 0xad,
	0x52, 0x47, 0xb2, 0xa2, 0x77, 0x80, 0xae, 0xc6, 0x5e, 0x76, 0x2f, 0x84, 0x9b, 0xac, 0xb5, 0xb0,
	0x33, 0xb7, 0x5b, 0x6b, 0x7f, 0x90, 0x57, 0x60, 0x47, 0xa3, 0xb3, 0x76, 0x65, 0x51, 0x98, 0xdb,
	0x04, 0x74, 0x46, 0xbd, 0x2b, 0xc2, 0x7f, 0x45, 0xaf, 0x88, 0x29, 0x0f, 0x37, 0x80, 0xf5, 0x1c,
	0x55, 0x67, 0xa3, 0xf0, 0x50, 0x10, 0x4c, 0x76, 0xc8, 0x85, 0x88, 0xb1, 0x97, 0xa6, 0xa0, 0xf8,
	0x89, 0x9e, 0xc3, 0x5a, 0x2f, 0xa6, 0x11, 0xef, 0x92, 0xc8, 0xef, 0x5e, 0x93, 0x58, 0xe4, 0xa4,
	0x8e, 0xca, 0xaa, 0xdc, 0x78, 0x15, 0xf9, 0xdf, 0x28, 0xb2, 0xbb, 0x0e, 0x6b, 0xba, 0x3a, 0x69,
	0xc2, 0xcd, 0xf9, 0x0d, 0x58, 0x31, 0x04, 0x9d, 0x11, 0x3f, 0x87, 0xad, 0xaf, 0x28, 0x0f, 0x7a,
	0xb7, 0x87, 0x9e, 0x27, 0xe2, 0x72, 0x1c, 0x52, 0x96, 0xc4, 0x24, 0x53, 0xcf, 0x77, 0x25, 0xa1,
	0xfb, 0x01, 0x3c, 0x2a, 0x16, 0xd5, 0xaa, 0x5b, 0xb0, 0x79, 0x42, 0xf8, 0x59, 0xd0, 0x8f, 0x88,
	0x7f, 0x4c, 0xe9, 0x55, 0x60, 0xb4, 0xba, 0xbb, 0xd0, 0xcc, 0x93, 0x75, 0x1c, 0x1a, 0x30, 0x77,
	0x79, 0xc3, 0x4d, 0x56, 0x5d, 0xde, 0x70, 0x77, 0x1b, 0xb6, 0x4e, 0x23, 0xc6, 0x71, 0x18, 0x16,
	0x09, 0xb8, 0x7f, 0x2e, 0xc3, 0x03, 0xe1, 0x65, 0x87, 0xf4, 0x03, 0xc6, 0x63, 0xcc, 0x03, 0xfa,
	0xbf, 0xb6, 0xa2, 0x71, 0xa9, 0xce, 0x65, 0x4a, 0x15, 0x7d, 0x0c, 0x6b, 0x71, 0xe6, 0x10, 0x55,
	0x78, 0x2a, 0xed, 0x1a, 0xd9, 0x0d, 0x51, 0x7f, 0x22, 0xa1, 0x2f, 0x82, 0x98, 0x0f, 0xba, 0x3e,
	0xe6, 0x44, 0x26, 0x61, 0xb5, 0x53, 0x95, 0x94, 0x97, 0x98, 0xcb, 0xed, 0x5e, 0x10, 0x33, 0xae,
	0x72, 0x77, 0x41, 0x6d, 0x4b, 0x8a, 0x4c, 0xde, 0x2d, 0xa8, 0x86, 0xd8, 0xec, 0x2e, 0x2a, 0xeb,
	0x04, 0x41, 0x6e, 0x3e, 0x81, 0xba, 0xa7, 0xf2, 0x57, 0x99, 0xb0, 0xa4, 0x9a, 0x9d, 0xa6, 0xc9,
	0xea, 0x7f, 0x01, 0xcd, 0x7c, 0x3c, 0xee, 0xeb, 0x79, 0xee, 0x27, 0xb0, 0xd2, 0xc1, 0x3c, 0x88,
	0xfa, 0x6c, 0x86, 0xe0, 0xb9, 0x1f, 0xc1, 0x6a, 0xca, 0xad, 0x55, 0x23, 0x98, 0xbf, 0x64, 0xd4,
	0xe4, 0xaf, 0xfc, 0xed, 0x3e, 0x87, 0xfa, 0x19, 0xc7, 0x7c, 0x26, 0x95, 0x4f, 0x61, 0x59, 0xf3,
	0x4e, 0x51, 0xf8, 0x09, 0xac, 0xbc, 0x8f, 0x69, 0x2f, 0x08, 0xc9, 0x2c, 0x2a, 0xff, 0x5d, 0x86,
	0xd5, 0x94, 0x5d, 0x6b, 0xcd, 0x07, 0xbe, 0x34, 0x35, 0xf0, 0xe5, 0x7b, 0x02, 0x3f, 0x37, 0x11,
	0xf8, 0x71, 0xa3, 0x9a, 0xcf, 0x36, 0xaa, 0x26, 0x54, 0xf0, 0x05, 0x4d, 0xb8, 0xce, 0x03, 0xb5,
	0x10, 0xea, 0x62, 0x15, 0xc4, 0xae, 0x74, 0x54, 0x65, 0x41, 0x4d, 0xd3, 0xbe, 0x64, 0x34, 0x92,
	0x2f, 0x91, 0x08, 0x8a, 0x62, 0x58, 0xd4, 0x2f, 0x91, 0xa0, 0xc8, 0xed, 0x07, 0xb0, 0x28, 0xbb,
	0x52, 0xe0, 0xeb, 0x24, 0x58, 0x10, 0xcb, 0x53, 0xbb, 0x9d, 0x56, 0xed, 0x76, 0x9a, 0x6b, 0x9c,
	0x60, 0x35, 0xce, 0x67, 0xd0, 0x50, 0x9c, 0xac, 0x4b, 0xfc, 0x80, 0xe3, 0x8b, 0x90, 0xb4, 0x6a,
	0x3b, 0xa5, 0xdd, 0xa5, 0xce, 0xaa, 0xa6, 0xbf, 0xd2, 0x64, 0x2b, 0xc9, 0xeb, 0x56, 0x92, 0xbb,
	0x1b, 0xb0, 0xfe, 0x9e, 0xc4, 0x8c, 0x46, 0x38, 0x14, 0x8d, 0xdf, 0x94, 0xfe, 0xbf, 0x4a, 0xd0,
	0xcc, 0xd3, 0xc7, 0x3d, 0x70, 0xf2, 0x85, 0xb4, 0x6e, 0xac, 0x3c, 0xf5, 0xc6, 0xe6, 0xee, 0xb9,
	0xb1, 0xf9, 0xc9, 0x1b, 0xcb, 0x87, 0xaa, 0x32, 0x35, 0x54, 0x0b, 0x56, 0xa8, 0xd2, 0x7b, 0x5d,
	0xcc, 0xde, 0x6b, 0x3e, 0x2a, 0x4b, 0x76, 0x54, 0xfe, 0x58, 0x86, 0x87, 0xe7, 0x23, 0xb1, 0x57,
	0x10, 0x9c, 0xff, 0x93, 0x18, 0x3c, 0x02, 0xa7, 0x28, 0x04, 0xba, 0xa5, 0xbf, 0x80, 0x75, 0xb5,
	0x7b, 0x28, 0x4d, 0x30, 0xa1, 0x79, 0x08, 0x4b, 0x97, 0xa3, 0xbe, 0xd0, 0x88, 0x65, 0x74, 0xea,
	0x9d, 0xc5, 0xcb, 0x51, 0xff, 0x25, 0xe6, 0xd8, 0xfd, 0x0c, 0x9a, 0x79, 0x89, 0x71, 0xb5, 0x67,
	0x1c, 0x2b, 0x59, 0x8e, 0x89, 0x04, 0xed, 0x90, 0x21, 0xbd, 0xce, 0x1f, 0xe4, 0x6e, 0x8a, 0xee,
	0x99, 0x25, 0xa7, 0xe3, 0x5d, 0xf3, 0x28, 0x0e, 0x48, 0x4f, 0xf7, 0x14, 0x96, 0x31, 0x4c, 0x97,
	0x21, 0x6b, 0x95, 0x76, 0xe6, 0x44, 0x5b, 0x55, 0x75, 0xc8, 0xdc, 0x3f, 0x95, 0xa0, 0x9e, 0x95,
	0x99, 0xfa, 0x24, 0xe5, 0xe2, 0x5c, 0xb6, 0xe2, 0x3c, 0x43, 0xf3, 0x99, 0x5e, 0xf5, 0xee, 0xdf,
	0x4b, 0xb0, 0x61, 0xd9, 0xaf, 0xc3, 0xf4, 0x0e, 0x96, 0x62, 0xfd, 0x5b, 0x3a, 0x50, 0x6b, 0x1f,
	0xe4, 0xc7, 0x9d, 0x42, 0xb1, 0x3d, 0xf3, 0xe3, 0x95, 0xb0, 0xa0, 0x93, 0xaa, 0x70, 0x7e, 0x0d,
	0xcb, 0xb9, 0x2d, 0xf1, 0xa8, 0x5f, 0x91, 0x5b, 0xf3, 0xa8, 0x5f, 0x91, 0x5b, 0xf4, 0x02, 0x2a,
	0xd7, 0x38, 0x4c, 0x94, 0x9b, 0xb5, 0xb6, 0x73, 0xf7, 0x71, 0x1d, 0xc5, 0xf8, 0x45, 0xf9, 0xf3,
	0x92, 0xbb, 0x0f, 0x1b, 0xe7, 0x3a, 0x58, 0x67, 0x04, 0xc7, 0xde, 0xc0, 0xdc, 0xc0, 0x26, 0x2c,
	0x8c, 0x62, 0xd2, 0x0b, 0x7e, 0xa7, 0xcf, 0xd0, 0x2b, 0xf7, 0x04, 0x36, 0x6d, 0x01, 0xed, 0xf2,
	0x4f, 0xa0, 0x22, 0x8e, 0x64, 0xad, 0xb2, 0xf4, 0xf7, 0x81, 0x65, 0x00, 0x66, 0x81, 0x27, 0xa7,
	0x0a, 0xc5, 0xe5, 0xfe, 0x08, 0x1a, 0x87, 0xbe, 0xff, 0x9a, 0x86, 0x21, 0xbd, 0x31, 0x87, 0x16,
	0xcc, 0xb1, 0xee, 0x33, 0x93, 0x51, 0xf7, 0xb3, 0xae, 0xc3, 0xda, 0x09, 0xe1, 0x8a, 0xcf, 0xa4,
	0x92, 0x78, 0x58, 0x0f, 0x7d, 0xff, 0x28, 0xa4, 0xde, 0xd5, 0x34, 0xd9, 0x5d, 0x40, 0xea, 0x98,
	0x7b, 0x39, 0x11, 0x34, 0x4e, 0x08, 0x97, 0x6c, 0x2c, 0x93, 0xdf, 0xe2, 0xe4, 0x24, 0x0c, 0xf3,
	0xf4, 0x3a, 0xc0, 0xd7, 0x6f, 0xd2, 0x6c, 0xff, 0x05, 0x54, 0xd3, 0x30, 0x14, 0xce, 0xec, 0xd9,
	0x54, 0x2e, 0x5b, 0x4f, 0xef, 0xf7, 0xb0, 0x26, 0x85, 0x95, 0x7b, 0xc4, 0xff, 0x6f, 0x94, 0x88,
	0x69, 0xc5, 0x1b, 0xe0, 0x28, 0x22, 0x62, 0x10, 0x93, 0x65, 0xa5, 0x97, 0x2e, 0x83, 0x47, 0x27,
	0x84, 0x1f, 0x7a, 0x3c, 0xb8, 0x26, 0xc7, 0x03, 0xcc, 0x8f, 0x15, 0x9d, 0x65, 0xf2, 0x21, 0x4a,
	0x86, 0x17, 0x24, 0x96, 0x67, 0x55, 0x3a, 0x7a, 0x25, 0xe8, 0xb4, 0xd7, 0x63, 0x84, 0xcb, 0xb3,
	0x2a, 0x1d, 0xbd, 0x42, 0x4f, 0x61, 0x99, 0xd3, 0x44, 0x9e, 0x1a, 0x71, 0xf1, 0x9c, 0xaa, 0xea,
	0xaa, 0x8f, 0x89, 0xa7, 0xbe, 0xfb, 0x87, 0x32, 0xa0, 0xc9, 0x23, 0xd1, 0x4b, 0x58, 0xd2, 0x66,
	0x31, 0x5d, 0x3c, 0xbb, 0xf9, 0x64, 0x9a, 0x94, 0xd9, 0xd3, 0x3f, 0x3a, 0xa9, 0xa4, 0xf3, 0x97,
	0x12, 0x2c, 0x6a, 0x6a, 0x8a, 0xc0, 0x4a, 0x63, 0x04, 0x26, 0xca, 0xdf, 0x0f, 0xd8, 0x28, 0xc4,
	0xb7, 0xd9, 0xf6, 0x50, 0xd3, 0x34, 0xd9, 0x21, 0x1e, 0x43, 0x4d, 0xbe, 0x02, 0x89, 0xec, 0x84,
	0xd2, 0x85, 0xb9, 0x0e, 0x08, 0x92, 0xea, 0x8d, 0xa2, 0x3f, 0x0c, 0x30, 0x33, 0xfb, 0xf3, 0xf2,
	0x4d, 0xaf, 0x0e, 0x30, 0xd3, 0xdb, 0x4f, 0xa0, 0x2e, 0xe5, 0xcd, 0x84, 0xa8, 0xde, 0x01, 0xa9,
	0xf3, 0x9d, 0x9e, 0x12, 0x3f, 0x86, 0xd5, 0x13, 0x22, 0xdc, 0x18, 0xcf, 0x74, 0x99, 0x4b, 0xd2,
	0x23, 0xa5, 0xb9, 0xa4, 0x37, 0x80, 0xb2, 0x09, 0xae, 0x0b, 0xef, 0x33, 0x53, 0x78, 0x2a, 0x56,
	0x8f, 0x0b, 0x0a, 0x2f, 0x9b, 0x34, 0xa6, 0x00, 0x8f, 0x64, 0xb5, 0x98, 0x7c, 0xb5, 0x8b, 0xb8,
	0x34, 0x53, 0x11, 0xb7, 0x61, 0xc3, 0xca, 0x7b, 0xad, 0x67, 0x4a, 0x03, 0x57, 0x55, 0xfa, 0x8e,
	0xfa, 0x6f, 0x03, 0x96, 0x62, 0xa8, 0xdf, 0x4a, 0xcf, 0x52, 0xa2, 0xd6, 0xf2, 0x21, 0xac, 0x60,
	0x7f, 0x18, 0x44, 0x5d, 0x4b, 0x57, 0x5d, 0x52, 0xcf, 0x95, 0x42, 0xb4, 0x03, 0xf5, 0x21, 0xf5,
	0xc7, 0x3c, 0x65, 0xc9, 0x03, 0x43, 0xea, 0x6b, 0x8e, 0xf6, 0x3f, 0x16, 0x60, 0xe3, 0x30, 0xe1,
	0x03, 0x12, 0xf1, 0xc0, 0x93, 0xf3, 0xfb, 0x99, 0xf2, 0x08, 0xbd, 0x84, 0x8a, 0xfc, 0x86, 0x81,
	0x2c, 0x34, 0x6a, 0x7f, 0x83, 0x71, 0xb6, 0xf2, 0xfb, 0xf9, 0x0f, 0x1f, 0x27, 0xb0, 0xa0, 0x10,
	0x20, 0x7a, 0x5c, 0xa8, 0x66, 0x0c, 0x16, 0x9d, 0x47, 0x13, 0x7a, 0x32, 0xc0, 0x11, 0x9d, 0xc3,
	0x8a, 0x40, 0x77, 0x63, 0x34, 0x8b, 0x76, 0xf2, 0xfc, 0x93, 0xf0, 0xd7, 0x79, 0x32, 0x85, 0x43,
	0xab, 0xbd, 0x10, 0xcd, 0x2d, 0xf3, 0xe9, 0x42, 0x7d, 0x3e, 0xf9, 0x71, 0x5e, 0xf0, 0xce, 0xef,
	0x2c, 0xce, 0xd3, 0xa9, 0x8c, 0x53, 0xce, 0x68, 0xcf, 0x7a, 0x46, 0x7b, 0xb6, 0x33, 0xbe, 0x83,
	0x95, 0xfc, 0x77, 0x22, 0x64, 0x89, 0x15, 0x7e, 0xee, 0x72, 0x3e, 0x9c, 0xce, 0xa4, 0x95, 0x0f,
	0xa1, 0x59, 0x84, 0xbc, 0xd1, 0xb3, 0xbc, 0xf4, 0x14, 0x60, 0xef, 0x3c, 0x9f, 0x85, 0x35, 0xf5,
	0x65, 0xd5, 0x02, 0xf2, 0xc8, 0xb2, 0xb3, 0x18, 0xe7, 0x3b, 0xae, 0x75, 0xdf, 0x45, 0x98, 0xdf,
	0x87, 0xf5, 0x02, 0x84, 0x8f, 0x66, 0x10, 0x75, 0x2c, 0x77, 0xa7, 0x7c, 0x28, 0x68, 0x87, 0xe2,
	0x69, 0x1e, 0x63, 0x62, 0x53, 0x53, 0xe7, 0xb0, 0xa4, 0xc8, 0x24, 0x46, 0x1f, 0x4d, 0xd6, 0x43,
	0xc1, 0x67, 0x05, 0xdb, 0xa7, 0x22, 0xa4, 0xdd, 0xfe, 0x5b, 0x25, 0x85, 0xaa, 0xe6, 0xa4, 0x53,
	0x80, 0x13, 0xc2, 0x35, 0x6e, 0x46, 0x56, 0x69, 0xe5, 0xc1, 0xb7, 0xb3, 0x7d, 0xc7, 0xae, 0x8e,
	0xd8, 0x31, 0x2c, 0x89, 0x78, 0x0b, 0x20, 0x88, 0xac, 0xd9, 0x29, 0x0b, 0xb8, 0xed, 0x3e, 0x90,
	0x07, 0xd8, 0xca, 0x1e, 0x33, 0x98, 0x5a, 0xf6, 0xe4, 0x61, 0xb6, 0x6d, 0x8f, 0x8d, 0xaa, 0x7f,
	0x23, 0xd3, 0x23, 0x3b, 0xcc, 0x23, 0xab, 0xd0, 0x0b, 0xb0, 0x8e, 0x1d, 0xc7, 0x42, 0x4c, 0xd8,
	0x07, 0x34, 0x89, 0x14, 0xec, 0x42, 0xbd, 0x13, 0x4e, 0x39, 0xbb, 0xf7, 0x33, 0xa6, 0xcd, 0xac,
	0x9e, 0x85, 0x10, 0xb6, 0xfd, 0x05, 0x80, 0xc4, 0xb6, 0xbf, 0x10, 0x81, 0x9c, 0x43, 0x3d, 0x8b,
	0x25, 0x6c, 0xb5, 0x05, 0xf0, 0x63, 0x32, 0xbd, 0x26, 0xa1, 0x08, 0xfa, 0x4e, 0x8d, 0x75, 0xd9,
	0xb1, 0xdc, 0xae, 0x97, 0x22, 0xa8, 0x62, 0x37, 0xae, 0xc2, 0xb9, 0xbe, 0xfd, 0x03, 0xac, 0x1f,
	0x26, 0x9c, 0x7a, 0x74, 0x38, 0x0a, 0x09, 0x4f, 0xf3, 0xf7, 0x5b, 0x58, 0x16, 0x8f, 0xbf, 0xa2,
	0x06, 0x34, 0xb2, 0xdb, 0x59, 0xe1, 0x68, 0x6e, 0xb7, 0xb3, 0xe2, 0x71, 0xbc, 0xfd, 0xd7, 0x05,
	0x68, 0x9c, 0x51, 0x2f, 0xc0, 0x61, 0xf0, 0xfb, 0xf4, 0xc0, 0x57, 0x50, 0x4d, 0x87, 0x6e, 0xfb,
	0xc9, 0xb3, 0xa7, 0x71, 0xa7, 0x95, 0xdf, 0x1f, 0x0f, 0xb2, 0xe8, 0x8d, 0xb9, 0x02, 0xad, 0xa9,
	0xf0, 0x0a, 0x66, 0x55, 0xf6, 0xb5, 0x2c, 0x1a, 0x3d, 0xd4, 0xd8, 0x0f, 0xe8, 0xc4, 0x3c, 0xef,
	0xec, 0xdc, 0xcd, 0x30, 0x2e, 0x65, 0x33, 0xf1, 0xa3, 0xed, 0x09, 0x1f, 0xb3, 0xf3, 0xfd, 0x14,
	0xab, 0x4e, 0xa1, 0x96, 0xc1, 0x03, 0xf6, 0x33, 0x3c, 0x09, 0x15, 0xa6, 0xa8, 0x7a, 0x0b, 0xd5,
	0x74, 0xd0, 0xb2, 0x83, 0x6e, 0x23, 0x09, 0xe7, 0xf1, 0x9d, 0xfb, 0x69, 0x63, 0x58, 0xce, 0x8d,
	0x5c, 0x76, 0x92, 0x16, 0xe1, 0x10, 0x3b, 0x49, 0x8b, 0x67, 0x36, 0x22, 0x87, 0xb9, 0x82, 0x79,
	0xfc, 0xf9, 0x84, 0xf4, 0x9d, 0x38, 0xc1, 0xbe, 0x9e, 0x02, 0x6d, 0xaf, 0xe5, 0xa8, 0x27, 0x27,
	0xde, 0xd7, 0x34, 0x36, 0x13, 0xfa, 0xf6, 0xc4, 0x19, 0xd9, 0x99, 0xd8, 0x59, 0xdb, 0x0b, 0x46,
	0x9e, 0x78, 0xb9, 0xcd, 0xe0, 0xcc, 0x74, 0xde, 0xe8, 0x91, 0xb1, 0x20, 0x6f, 0xf2, 0x13, 0x66,
	0x41, 0xde, 0x58, 0xd3, 0xe6, 0xd1, 0xe7, 0xdf, 0xfe, 0xac, 0x1f, 0xf0, 0x41, 0x72, 0xb1, 0xe7,
	0xd1, 0xe1, 0xbe, 0x4f, 0x87, 0x41, 0x44, 0x0f, 0x7e, 0xba, 0x1f, 0x06, 0x62, 0x4c, 0x60, 0xfb,
	0xf1, 0xc8, 0xdb, 0x2f, 0xfe, 0xbf, 0xef, 0x62, 0x41, 0xd2, 0x3e, 0xfd, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xed, 0x09, 0xdc, 0x7b, 0x10, 0x1c, 0x00, 0x00,
}
