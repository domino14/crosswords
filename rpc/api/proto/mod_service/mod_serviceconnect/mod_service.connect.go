// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/mod_service/mod_service.proto

package mod_serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	mod_service "github.com/woogles-io/liwords/rpc/api/proto/mod_service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ModServiceName is the fully-qualified name of the ModService service.
	ModServiceName = "mod_service.ModService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ModServiceApplyActionsProcedure is the fully-qualified name of the ModService's ApplyActions RPC.
	ModServiceApplyActionsProcedure = "/mod_service.ModService/ApplyActions"
	// ModServiceRemoveActionsProcedure is the fully-qualified name of the ModService's RemoveActions
	// RPC.
	ModServiceRemoveActionsProcedure = "/mod_service.ModService/RemoveActions"
	// ModServiceGetActionsProcedure is the fully-qualified name of the ModService's GetActions RPC.
	ModServiceGetActionsProcedure = "/mod_service.ModService/GetActions"
	// ModServiceGetActionHistoryProcedure is the fully-qualified name of the ModService's
	// GetActionHistory RPC.
	ModServiceGetActionHistoryProcedure = "/mod_service.ModService/GetActionHistory"
	// ModServiceGetNotorietyReportProcedure is the fully-qualified name of the ModService's
	// GetNotorietyReport RPC.
	ModServiceGetNotorietyReportProcedure = "/mod_service.ModService/GetNotorietyReport"
	// ModServiceResetNotorietyProcedure is the fully-qualified name of the ModService's ResetNotoriety
	// RPC.
	ModServiceResetNotorietyProcedure = "/mod_service.ModService/ResetNotoriety"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	modServiceServiceDescriptor                  = mod_service.File_proto_mod_service_mod_service_proto.Services().ByName("ModService")
	modServiceApplyActionsMethodDescriptor       = modServiceServiceDescriptor.Methods().ByName("ApplyActions")
	modServiceRemoveActionsMethodDescriptor      = modServiceServiceDescriptor.Methods().ByName("RemoveActions")
	modServiceGetActionsMethodDescriptor         = modServiceServiceDescriptor.Methods().ByName("GetActions")
	modServiceGetActionHistoryMethodDescriptor   = modServiceServiceDescriptor.Methods().ByName("GetActionHistory")
	modServiceGetNotorietyReportMethodDescriptor = modServiceServiceDescriptor.Methods().ByName("GetNotorietyReport")
	modServiceResetNotorietyMethodDescriptor     = modServiceServiceDescriptor.Methods().ByName("ResetNotoriety")
)

// ModServiceClient is a client for the mod_service.ModService service.
type ModServiceClient interface {
	ApplyActions(context.Context, *connect.Request[mod_service.ModActionsList]) (*connect.Response[mod_service.ModActionResponse], error)
	RemoveActions(context.Context, *connect.Request[mod_service.ModActionsList]) (*connect.Response[mod_service.ModActionResponse], error)
	GetActions(context.Context, *connect.Request[mod_service.GetActionsRequest]) (*connect.Response[mod_service.ModActionsMap], error)
	GetActionHistory(context.Context, *connect.Request[mod_service.GetActionsRequest]) (*connect.Response[mod_service.ModActionsList], error)
	GetNotorietyReport(context.Context, *connect.Request[mod_service.GetNotorietyReportRequest]) (*connect.Response[mod_service.NotorietyReport], error)
	ResetNotoriety(context.Context, *connect.Request[mod_service.ResetNotorietyRequest]) (*connect.Response[mod_service.ResetNotorietyResponse], error)
}

// NewModServiceClient constructs a client for the mod_service.ModService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewModServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ModServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &modServiceClient{
		applyActions: connect.NewClient[mod_service.ModActionsList, mod_service.ModActionResponse](
			httpClient,
			baseURL+ModServiceApplyActionsProcedure,
			connect.WithSchema(modServiceApplyActionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeActions: connect.NewClient[mod_service.ModActionsList, mod_service.ModActionResponse](
			httpClient,
			baseURL+ModServiceRemoveActionsProcedure,
			connect.WithSchema(modServiceRemoveActionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getActions: connect.NewClient[mod_service.GetActionsRequest, mod_service.ModActionsMap](
			httpClient,
			baseURL+ModServiceGetActionsProcedure,
			connect.WithSchema(modServiceGetActionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getActionHistory: connect.NewClient[mod_service.GetActionsRequest, mod_service.ModActionsList](
			httpClient,
			baseURL+ModServiceGetActionHistoryProcedure,
			connect.WithSchema(modServiceGetActionHistoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNotorietyReport: connect.NewClient[mod_service.GetNotorietyReportRequest, mod_service.NotorietyReport](
			httpClient,
			baseURL+ModServiceGetNotorietyReportProcedure,
			connect.WithSchema(modServiceGetNotorietyReportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resetNotoriety: connect.NewClient[mod_service.ResetNotorietyRequest, mod_service.ResetNotorietyResponse](
			httpClient,
			baseURL+ModServiceResetNotorietyProcedure,
			connect.WithSchema(modServiceResetNotorietyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// modServiceClient implements ModServiceClient.
type modServiceClient struct {
	applyActions       *connect.Client[mod_service.ModActionsList, mod_service.ModActionResponse]
	removeActions      *connect.Client[mod_service.ModActionsList, mod_service.ModActionResponse]
	getActions         *connect.Client[mod_service.GetActionsRequest, mod_service.ModActionsMap]
	getActionHistory   *connect.Client[mod_service.GetActionsRequest, mod_service.ModActionsList]
	getNotorietyReport *connect.Client[mod_service.GetNotorietyReportRequest, mod_service.NotorietyReport]
	resetNotoriety     *connect.Client[mod_service.ResetNotorietyRequest, mod_service.ResetNotorietyResponse]
}

// ApplyActions calls mod_service.ModService.ApplyActions.
func (c *modServiceClient) ApplyActions(ctx context.Context, req *connect.Request[mod_service.ModActionsList]) (*connect.Response[mod_service.ModActionResponse], error) {
	return c.applyActions.CallUnary(ctx, req)
}

// RemoveActions calls mod_service.ModService.RemoveActions.
func (c *modServiceClient) RemoveActions(ctx context.Context, req *connect.Request[mod_service.ModActionsList]) (*connect.Response[mod_service.ModActionResponse], error) {
	return c.removeActions.CallUnary(ctx, req)
}

// GetActions calls mod_service.ModService.GetActions.
func (c *modServiceClient) GetActions(ctx context.Context, req *connect.Request[mod_service.GetActionsRequest]) (*connect.Response[mod_service.ModActionsMap], error) {
	return c.getActions.CallUnary(ctx, req)
}

// GetActionHistory calls mod_service.ModService.GetActionHistory.
func (c *modServiceClient) GetActionHistory(ctx context.Context, req *connect.Request[mod_service.GetActionsRequest]) (*connect.Response[mod_service.ModActionsList], error) {
	return c.getActionHistory.CallUnary(ctx, req)
}

// GetNotorietyReport calls mod_service.ModService.GetNotorietyReport.
func (c *modServiceClient) GetNotorietyReport(ctx context.Context, req *connect.Request[mod_service.GetNotorietyReportRequest]) (*connect.Response[mod_service.NotorietyReport], error) {
	return c.getNotorietyReport.CallUnary(ctx, req)
}

// ResetNotoriety calls mod_service.ModService.ResetNotoriety.
func (c *modServiceClient) ResetNotoriety(ctx context.Context, req *connect.Request[mod_service.ResetNotorietyRequest]) (*connect.Response[mod_service.ResetNotorietyResponse], error) {
	return c.resetNotoriety.CallUnary(ctx, req)
}

// ModServiceHandler is an implementation of the mod_service.ModService service.
type ModServiceHandler interface {
	ApplyActions(context.Context, *connect.Request[mod_service.ModActionsList]) (*connect.Response[mod_service.ModActionResponse], error)
	RemoveActions(context.Context, *connect.Request[mod_service.ModActionsList]) (*connect.Response[mod_service.ModActionResponse], error)
	GetActions(context.Context, *connect.Request[mod_service.GetActionsRequest]) (*connect.Response[mod_service.ModActionsMap], error)
	GetActionHistory(context.Context, *connect.Request[mod_service.GetActionsRequest]) (*connect.Response[mod_service.ModActionsList], error)
	GetNotorietyReport(context.Context, *connect.Request[mod_service.GetNotorietyReportRequest]) (*connect.Response[mod_service.NotorietyReport], error)
	ResetNotoriety(context.Context, *connect.Request[mod_service.ResetNotorietyRequest]) (*connect.Response[mod_service.ResetNotorietyResponse], error)
}

// NewModServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewModServiceHandler(svc ModServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	modServiceApplyActionsHandler := connect.NewUnaryHandler(
		ModServiceApplyActionsProcedure,
		svc.ApplyActions,
		connect.WithSchema(modServiceApplyActionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	modServiceRemoveActionsHandler := connect.NewUnaryHandler(
		ModServiceRemoveActionsProcedure,
		svc.RemoveActions,
		connect.WithSchema(modServiceRemoveActionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	modServiceGetActionsHandler := connect.NewUnaryHandler(
		ModServiceGetActionsProcedure,
		svc.GetActions,
		connect.WithSchema(modServiceGetActionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	modServiceGetActionHistoryHandler := connect.NewUnaryHandler(
		ModServiceGetActionHistoryProcedure,
		svc.GetActionHistory,
		connect.WithSchema(modServiceGetActionHistoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	modServiceGetNotorietyReportHandler := connect.NewUnaryHandler(
		ModServiceGetNotorietyReportProcedure,
		svc.GetNotorietyReport,
		connect.WithSchema(modServiceGetNotorietyReportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	modServiceResetNotorietyHandler := connect.NewUnaryHandler(
		ModServiceResetNotorietyProcedure,
		svc.ResetNotoriety,
		connect.WithSchema(modServiceResetNotorietyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mod_service.ModService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ModServiceApplyActionsProcedure:
			modServiceApplyActionsHandler.ServeHTTP(w, r)
		case ModServiceRemoveActionsProcedure:
			modServiceRemoveActionsHandler.ServeHTTP(w, r)
		case ModServiceGetActionsProcedure:
			modServiceGetActionsHandler.ServeHTTP(w, r)
		case ModServiceGetActionHistoryProcedure:
			modServiceGetActionHistoryHandler.ServeHTTP(w, r)
		case ModServiceGetNotorietyReportProcedure:
			modServiceGetNotorietyReportHandler.ServeHTTP(w, r)
		case ModServiceResetNotorietyProcedure:
			modServiceResetNotorietyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedModServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedModServiceHandler struct{}

func (UnimplementedModServiceHandler) ApplyActions(context.Context, *connect.Request[mod_service.ModActionsList]) (*connect.Response[mod_service.ModActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mod_service.ModService.ApplyActions is not implemented"))
}

func (UnimplementedModServiceHandler) RemoveActions(context.Context, *connect.Request[mod_service.ModActionsList]) (*connect.Response[mod_service.ModActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mod_service.ModService.RemoveActions is not implemented"))
}

func (UnimplementedModServiceHandler) GetActions(context.Context, *connect.Request[mod_service.GetActionsRequest]) (*connect.Response[mod_service.ModActionsMap], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mod_service.ModService.GetActions is not implemented"))
}

func (UnimplementedModServiceHandler) GetActionHistory(context.Context, *connect.Request[mod_service.GetActionsRequest]) (*connect.Response[mod_service.ModActionsList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mod_service.ModService.GetActionHistory is not implemented"))
}

func (UnimplementedModServiceHandler) GetNotorietyReport(context.Context, *connect.Request[mod_service.GetNotorietyReportRequest]) (*connect.Response[mod_service.NotorietyReport], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mod_service.ModService.GetNotorietyReport is not implemented"))
}

func (UnimplementedModServiceHandler) ResetNotoriety(context.Context, *connect.Request[mod_service.ResetNotorietyRequest]) (*connect.Response[mod_service.ResetNotorietyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mod_service.ModService.ResetNotoriety is not implemented"))
}
