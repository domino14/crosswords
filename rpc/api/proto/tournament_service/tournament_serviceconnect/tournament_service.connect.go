// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/tournament_service/tournament_service.proto

package tournament_serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	ipc "github.com/woogles-io/liwords/rpc/api/proto/ipc"
	tournament_service "github.com/woogles-io/liwords/rpc/api/proto/tournament_service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TournamentServiceName is the fully-qualified name of the TournamentService service.
	TournamentServiceName = "tournament_service.TournamentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TournamentServiceNewTournamentProcedure is the fully-qualified name of the TournamentService's
	// NewTournament RPC.
	TournamentServiceNewTournamentProcedure = "/tournament_service.TournamentService/NewTournament"
	// TournamentServiceGetTournamentMetadataProcedure is the fully-qualified name of the
	// TournamentService's GetTournamentMetadata RPC.
	TournamentServiceGetTournamentMetadataProcedure = "/tournament_service.TournamentService/GetTournamentMetadata"
	// TournamentServiceGetTournamentProcedure is the fully-qualified name of the TournamentService's
	// GetTournament RPC.
	TournamentServiceGetTournamentProcedure = "/tournament_service.TournamentService/GetTournament"
	// TournamentServiceFinishTournamentProcedure is the fully-qualified name of the TournamentService's
	// FinishTournament RPC.
	TournamentServiceFinishTournamentProcedure = "/tournament_service.TournamentService/FinishTournament"
	// TournamentServiceSetTournamentMetadataProcedure is the fully-qualified name of the
	// TournamentService's SetTournamentMetadata RPC.
	TournamentServiceSetTournamentMetadataProcedure = "/tournament_service.TournamentService/SetTournamentMetadata"
	// TournamentServicePairRoundProcedure is the fully-qualified name of the TournamentService's
	// PairRound RPC.
	TournamentServicePairRoundProcedure = "/tournament_service.TournamentService/PairRound"
	// TournamentServiceSetSingleRoundControlsProcedure is the fully-qualified name of the
	// TournamentService's SetSingleRoundControls RPC.
	TournamentServiceSetSingleRoundControlsProcedure = "/tournament_service.TournamentService/SetSingleRoundControls"
	// TournamentServiceSetRoundControlsProcedure is the fully-qualified name of the TournamentService's
	// SetRoundControls RPC.
	TournamentServiceSetRoundControlsProcedure = "/tournament_service.TournamentService/SetRoundControls"
	// TournamentServiceSetDivisionControlsProcedure is the fully-qualified name of the
	// TournamentService's SetDivisionControls RPC.
	TournamentServiceSetDivisionControlsProcedure = "/tournament_service.TournamentService/SetDivisionControls"
	// TournamentServiceAddDirectorsProcedure is the fully-qualified name of the TournamentService's
	// AddDirectors RPC.
	TournamentServiceAddDirectorsProcedure = "/tournament_service.TournamentService/AddDirectors"
	// TournamentServiceRemoveDirectorsProcedure is the fully-qualified name of the TournamentService's
	// RemoveDirectors RPC.
	TournamentServiceRemoveDirectorsProcedure = "/tournament_service.TournamentService/RemoveDirectors"
	// TournamentServiceAddDivisionProcedure is the fully-qualified name of the TournamentService's
	// AddDivision RPC.
	TournamentServiceAddDivisionProcedure = "/tournament_service.TournamentService/AddDivision"
	// TournamentServiceRenameDivisionProcedure is the fully-qualified name of the TournamentService's
	// RenameDivision RPC.
	TournamentServiceRenameDivisionProcedure = "/tournament_service.TournamentService/RenameDivision"
	// TournamentServiceRemoveDivisionProcedure is the fully-qualified name of the TournamentService's
	// RemoveDivision RPC.
	TournamentServiceRemoveDivisionProcedure = "/tournament_service.TournamentService/RemoveDivision"
	// TournamentServiceAddPlayersProcedure is the fully-qualified name of the TournamentService's
	// AddPlayers RPC.
	TournamentServiceAddPlayersProcedure = "/tournament_service.TournamentService/AddPlayers"
	// TournamentServiceRemovePlayersProcedure is the fully-qualified name of the TournamentService's
	// RemovePlayers RPC.
	TournamentServiceRemovePlayersProcedure = "/tournament_service.TournamentService/RemovePlayers"
	// TournamentServiceSetPairingProcedure is the fully-qualified name of the TournamentService's
	// SetPairing RPC.
	TournamentServiceSetPairingProcedure = "/tournament_service.TournamentService/SetPairing"
	// TournamentServiceSetResultProcedure is the fully-qualified name of the TournamentService's
	// SetResult RPC.
	TournamentServiceSetResultProcedure = "/tournament_service.TournamentService/SetResult"
	// TournamentServiceStartRoundCountdownProcedure is the fully-qualified name of the
	// TournamentService's StartRoundCountdown RPC.
	TournamentServiceStartRoundCountdownProcedure = "/tournament_service.TournamentService/StartRoundCountdown"
	// TournamentServiceRecentGamesProcedure is the fully-qualified name of the TournamentService's
	// RecentGames RPC.
	TournamentServiceRecentGamesProcedure = "/tournament_service.TournamentService/RecentGames"
	// TournamentServiceCreateClubSessionProcedure is the fully-qualified name of the
	// TournamentService's CreateClubSession RPC.
	TournamentServiceCreateClubSessionProcedure = "/tournament_service.TournamentService/CreateClubSession"
	// TournamentServiceGetRecentClubSessionsProcedure is the fully-qualified name of the
	// TournamentService's GetRecentClubSessions RPC.
	TournamentServiceGetRecentClubSessionsProcedure = "/tournament_service.TournamentService/GetRecentClubSessions"
	// TournamentServiceUnstartTournamentProcedure is the fully-qualified name of the
	// TournamentService's UnstartTournament RPC.
	TournamentServiceUnstartTournamentProcedure = "/tournament_service.TournamentService/UnstartTournament"
	// TournamentServiceUncheckInProcedure is the fully-qualified name of the TournamentService's
	// UncheckIn RPC.
	TournamentServiceUncheckInProcedure = "/tournament_service.TournamentService/UncheckIn"
	// TournamentServiceCheckInProcedure is the fully-qualified name of the TournamentService's CheckIn
	// RPC.
	TournamentServiceCheckInProcedure = "/tournament_service.TournamentService/CheckIn"
	// TournamentServiceExportTournamentProcedure is the fully-qualified name of the TournamentService's
	// ExportTournament RPC.
	TournamentServiceExportTournamentProcedure = "/tournament_service.TournamentService/ExportTournament"
	// TournamentServiceGetTournamentScorecardsProcedure is the fully-qualified name of the
	// TournamentService's GetTournamentScorecards RPC.
	TournamentServiceGetTournamentScorecardsProcedure = "/tournament_service.TournamentService/GetTournamentScorecards"
	// TournamentServiceImportTournamentProcedure is the fully-qualified name of the TournamentService's
	// ImportTournament RPC.
	TournamentServiceImportTournamentProcedure = "/tournament_service.TournamentService/ImportTournament"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tournamentServiceServiceDescriptor                       = tournament_service.File_proto_tournament_service_tournament_service_proto.Services().ByName("TournamentService")
	tournamentServiceNewTournamentMethodDescriptor           = tournamentServiceServiceDescriptor.Methods().ByName("NewTournament")
	tournamentServiceGetTournamentMetadataMethodDescriptor   = tournamentServiceServiceDescriptor.Methods().ByName("GetTournamentMetadata")
	tournamentServiceGetTournamentMethodDescriptor           = tournamentServiceServiceDescriptor.Methods().ByName("GetTournament")
	tournamentServiceFinishTournamentMethodDescriptor        = tournamentServiceServiceDescriptor.Methods().ByName("FinishTournament")
	tournamentServiceSetTournamentMetadataMethodDescriptor   = tournamentServiceServiceDescriptor.Methods().ByName("SetTournamentMetadata")
	tournamentServicePairRoundMethodDescriptor               = tournamentServiceServiceDescriptor.Methods().ByName("PairRound")
	tournamentServiceSetSingleRoundControlsMethodDescriptor  = tournamentServiceServiceDescriptor.Methods().ByName("SetSingleRoundControls")
	tournamentServiceSetRoundControlsMethodDescriptor        = tournamentServiceServiceDescriptor.Methods().ByName("SetRoundControls")
	tournamentServiceSetDivisionControlsMethodDescriptor     = tournamentServiceServiceDescriptor.Methods().ByName("SetDivisionControls")
	tournamentServiceAddDirectorsMethodDescriptor            = tournamentServiceServiceDescriptor.Methods().ByName("AddDirectors")
	tournamentServiceRemoveDirectorsMethodDescriptor         = tournamentServiceServiceDescriptor.Methods().ByName("RemoveDirectors")
	tournamentServiceAddDivisionMethodDescriptor             = tournamentServiceServiceDescriptor.Methods().ByName("AddDivision")
	tournamentServiceRenameDivisionMethodDescriptor          = tournamentServiceServiceDescriptor.Methods().ByName("RenameDivision")
	tournamentServiceRemoveDivisionMethodDescriptor          = tournamentServiceServiceDescriptor.Methods().ByName("RemoveDivision")
	tournamentServiceAddPlayersMethodDescriptor              = tournamentServiceServiceDescriptor.Methods().ByName("AddPlayers")
	tournamentServiceRemovePlayersMethodDescriptor           = tournamentServiceServiceDescriptor.Methods().ByName("RemovePlayers")
	tournamentServiceSetPairingMethodDescriptor              = tournamentServiceServiceDescriptor.Methods().ByName("SetPairing")
	tournamentServiceSetResultMethodDescriptor               = tournamentServiceServiceDescriptor.Methods().ByName("SetResult")
	tournamentServiceStartRoundCountdownMethodDescriptor     = tournamentServiceServiceDescriptor.Methods().ByName("StartRoundCountdown")
	tournamentServiceRecentGamesMethodDescriptor             = tournamentServiceServiceDescriptor.Methods().ByName("RecentGames")
	tournamentServiceCreateClubSessionMethodDescriptor       = tournamentServiceServiceDescriptor.Methods().ByName("CreateClubSession")
	tournamentServiceGetRecentClubSessionsMethodDescriptor   = tournamentServiceServiceDescriptor.Methods().ByName("GetRecentClubSessions")
	tournamentServiceUnstartTournamentMethodDescriptor       = tournamentServiceServiceDescriptor.Methods().ByName("UnstartTournament")
	tournamentServiceUncheckInMethodDescriptor               = tournamentServiceServiceDescriptor.Methods().ByName("UncheckIn")
	tournamentServiceCheckInMethodDescriptor                 = tournamentServiceServiceDescriptor.Methods().ByName("CheckIn")
	tournamentServiceExportTournamentMethodDescriptor        = tournamentServiceServiceDescriptor.Methods().ByName("ExportTournament")
	tournamentServiceGetTournamentScorecardsMethodDescriptor = tournamentServiceServiceDescriptor.Methods().ByName("GetTournamentScorecards")
	tournamentServiceImportTournamentMethodDescriptor        = tournamentServiceServiceDescriptor.Methods().ByName("ImportTournament")
)

// TournamentServiceClient is a client for the tournament_service.TournamentService service.
type TournamentServiceClient interface {
	NewTournament(context.Context, *connect.Request[tournament_service.NewTournamentRequest]) (*connect.Response[tournament_service.NewTournamentResponse], error)
	GetTournamentMetadata(context.Context, *connect.Request[tournament_service.GetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentMetadataResponse], error)
	GetTournament(context.Context, *connect.Request[tournament_service.GetTournamentRequest]) (*connect.Response[ipc.FullTournamentDivisions], error)
	FinishTournament(context.Context, *connect.Request[tournament_service.FinishTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetTournamentMetadata(context.Context, *connect.Request[tournament_service.SetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	PairRound(context.Context, *connect.Request[tournament_service.PairRoundRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetSingleRoundControls(context.Context, *connect.Request[tournament_service.SingleRoundControlsRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetRoundControls(context.Context, *connect.Request[ipc.DivisionRoundControls]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetDivisionControls(context.Context, *connect.Request[ipc.DivisionControls]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to AddDirectors should be director usernames.
	AddDirectors(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to RemoveDirectors should be director usernames.
	RemoveDirectors(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	AddDivision(context.Context, *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RenameDivision(context.Context, *connect.Request[tournament_service.DivisionRenameRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RemoveDivision(context.Context, *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to AddPlayers should be player usernames
	AddPlayers(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to RemovePlayers should be player usernames
	RemovePlayers(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetPairing(context.Context, *connect.Request[tournament_service.TournamentPairingsRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetResult(context.Context, *connect.Request[tournament_service.TournamentResultOverrideRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	StartRoundCountdown(context.Context, *connect.Request[tournament_service.TournamentStartRoundCountdownRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RecentGames(context.Context, *connect.Request[tournament_service.RecentGamesRequest]) (*connect.Response[tournament_service.RecentGamesResponse], error)
	CreateClubSession(context.Context, *connect.Request[tournament_service.NewClubSessionRequest]) (*connect.Response[tournament_service.ClubSessionResponse], error)
	GetRecentClubSessions(context.Context, *connect.Request[tournament_service.RecentClubSessionsRequest]) (*connect.Response[tournament_service.ClubSessionsResponse], error)
	UnstartTournament(context.Context, *connect.Request[tournament_service.UnstartTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Uncheck everyone in. Use this some time before the beginning of a session.
	UncheckIn(context.Context, *connect.Request[tournament_service.UncheckInRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	// CheckIn allows players to check themselves in.
	CheckIn(context.Context, *connect.Request[tournament_service.CheckinRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	ExportTournament(context.Context, *connect.Request[tournament_service.ExportTournamentRequest]) (*connect.Response[tournament_service.ExportTournamentResponse], error)
	GetTournamentScorecards(context.Context, *connect.Request[tournament_service.TournamentScorecardRequest]) (*connect.Response[tournament_service.TournamentScorecardResponse], error)
	ImportTournament(context.Context, *connect.Request[tournament_service.ImportTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
}

// NewTournamentServiceClient constructs a client for the tournament_service.TournamentService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTournamentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TournamentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tournamentServiceClient{
		newTournament: connect.NewClient[tournament_service.NewTournamentRequest, tournament_service.NewTournamentResponse](
			httpClient,
			baseURL+TournamentServiceNewTournamentProcedure,
			connect.WithSchema(tournamentServiceNewTournamentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTournamentMetadata: connect.NewClient[tournament_service.GetTournamentMetadataRequest, tournament_service.TournamentMetadataResponse](
			httpClient,
			baseURL+TournamentServiceGetTournamentMetadataProcedure,
			connect.WithSchema(tournamentServiceGetTournamentMetadataMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getTournament: connect.NewClient[tournament_service.GetTournamentRequest, ipc.FullTournamentDivisions](
			httpClient,
			baseURL+TournamentServiceGetTournamentProcedure,
			connect.WithSchema(tournamentServiceGetTournamentMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		finishTournament: connect.NewClient[tournament_service.FinishTournamentRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceFinishTournamentProcedure,
			connect.WithSchema(tournamentServiceFinishTournamentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setTournamentMetadata: connect.NewClient[tournament_service.SetTournamentMetadataRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceSetTournamentMetadataProcedure,
			connect.WithSchema(tournamentServiceSetTournamentMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pairRound: connect.NewClient[tournament_service.PairRoundRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServicePairRoundProcedure,
			connect.WithSchema(tournamentServicePairRoundMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setSingleRoundControls: connect.NewClient[tournament_service.SingleRoundControlsRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceSetSingleRoundControlsProcedure,
			connect.WithSchema(tournamentServiceSetSingleRoundControlsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setRoundControls: connect.NewClient[ipc.DivisionRoundControls, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceSetRoundControlsProcedure,
			connect.WithSchema(tournamentServiceSetRoundControlsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setDivisionControls: connect.NewClient[ipc.DivisionControls, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceSetDivisionControlsProcedure,
			connect.WithSchema(tournamentServiceSetDivisionControlsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addDirectors: connect.NewClient[ipc.TournamentPersons, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceAddDirectorsProcedure,
			connect.WithSchema(tournamentServiceAddDirectorsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeDirectors: connect.NewClient[ipc.TournamentPersons, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceRemoveDirectorsProcedure,
			connect.WithSchema(tournamentServiceRemoveDirectorsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addDivision: connect.NewClient[tournament_service.TournamentDivisionRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceAddDivisionProcedure,
			connect.WithSchema(tournamentServiceAddDivisionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		renameDivision: connect.NewClient[tournament_service.DivisionRenameRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceRenameDivisionProcedure,
			connect.WithSchema(tournamentServiceRenameDivisionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeDivision: connect.NewClient[tournament_service.TournamentDivisionRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceRemoveDivisionProcedure,
			connect.WithSchema(tournamentServiceRemoveDivisionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addPlayers: connect.NewClient[ipc.TournamentPersons, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceAddPlayersProcedure,
			connect.WithSchema(tournamentServiceAddPlayersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removePlayers: connect.NewClient[ipc.TournamentPersons, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceRemovePlayersProcedure,
			connect.WithSchema(tournamentServiceRemovePlayersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setPairing: connect.NewClient[tournament_service.TournamentPairingsRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceSetPairingProcedure,
			connect.WithSchema(tournamentServiceSetPairingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setResult: connect.NewClient[tournament_service.TournamentResultOverrideRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceSetResultProcedure,
			connect.WithSchema(tournamentServiceSetResultMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startRoundCountdown: connect.NewClient[tournament_service.TournamentStartRoundCountdownRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceStartRoundCountdownProcedure,
			connect.WithSchema(tournamentServiceStartRoundCountdownMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		recentGames: connect.NewClient[tournament_service.RecentGamesRequest, tournament_service.RecentGamesResponse](
			httpClient,
			baseURL+TournamentServiceRecentGamesProcedure,
			connect.WithSchema(tournamentServiceRecentGamesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createClubSession: connect.NewClient[tournament_service.NewClubSessionRequest, tournament_service.ClubSessionResponse](
			httpClient,
			baseURL+TournamentServiceCreateClubSessionProcedure,
			connect.WithSchema(tournamentServiceCreateClubSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRecentClubSessions: connect.NewClient[tournament_service.RecentClubSessionsRequest, tournament_service.ClubSessionsResponse](
			httpClient,
			baseURL+TournamentServiceGetRecentClubSessionsProcedure,
			connect.WithSchema(tournamentServiceGetRecentClubSessionsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		unstartTournament: connect.NewClient[tournament_service.UnstartTournamentRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceUnstartTournamentProcedure,
			connect.WithSchema(tournamentServiceUnstartTournamentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uncheckIn: connect.NewClient[tournament_service.UncheckInRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceUncheckInProcedure,
			connect.WithSchema(tournamentServiceUncheckInMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkIn: connect.NewClient[tournament_service.CheckinRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceCheckInProcedure,
			connect.WithSchema(tournamentServiceCheckInMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exportTournament: connect.NewClient[tournament_service.ExportTournamentRequest, tournament_service.ExportTournamentResponse](
			httpClient,
			baseURL+TournamentServiceExportTournamentProcedure,
			connect.WithSchema(tournamentServiceExportTournamentMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getTournamentScorecards: connect.NewClient[tournament_service.TournamentScorecardRequest, tournament_service.TournamentScorecardResponse](
			httpClient,
			baseURL+TournamentServiceGetTournamentScorecardsProcedure,
			connect.WithSchema(tournamentServiceGetTournamentScorecardsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		importTournament: connect.NewClient[tournament_service.ImportTournamentRequest, tournament_service.TournamentResponse](
			httpClient,
			baseURL+TournamentServiceImportTournamentProcedure,
			connect.WithSchema(tournamentServiceImportTournamentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tournamentServiceClient implements TournamentServiceClient.
type tournamentServiceClient struct {
	newTournament           *connect.Client[tournament_service.NewTournamentRequest, tournament_service.NewTournamentResponse]
	getTournamentMetadata   *connect.Client[tournament_service.GetTournamentMetadataRequest, tournament_service.TournamentMetadataResponse]
	getTournament           *connect.Client[tournament_service.GetTournamentRequest, ipc.FullTournamentDivisions]
	finishTournament        *connect.Client[tournament_service.FinishTournamentRequest, tournament_service.TournamentResponse]
	setTournamentMetadata   *connect.Client[tournament_service.SetTournamentMetadataRequest, tournament_service.TournamentResponse]
	pairRound               *connect.Client[tournament_service.PairRoundRequest, tournament_service.TournamentResponse]
	setSingleRoundControls  *connect.Client[tournament_service.SingleRoundControlsRequest, tournament_service.TournamentResponse]
	setRoundControls        *connect.Client[ipc.DivisionRoundControls, tournament_service.TournamentResponse]
	setDivisionControls     *connect.Client[ipc.DivisionControls, tournament_service.TournamentResponse]
	addDirectors            *connect.Client[ipc.TournamentPersons, tournament_service.TournamentResponse]
	removeDirectors         *connect.Client[ipc.TournamentPersons, tournament_service.TournamentResponse]
	addDivision             *connect.Client[tournament_service.TournamentDivisionRequest, tournament_service.TournamentResponse]
	renameDivision          *connect.Client[tournament_service.DivisionRenameRequest, tournament_service.TournamentResponse]
	removeDivision          *connect.Client[tournament_service.TournamentDivisionRequest, tournament_service.TournamentResponse]
	addPlayers              *connect.Client[ipc.TournamentPersons, tournament_service.TournamentResponse]
	removePlayers           *connect.Client[ipc.TournamentPersons, tournament_service.TournamentResponse]
	setPairing              *connect.Client[tournament_service.TournamentPairingsRequest, tournament_service.TournamentResponse]
	setResult               *connect.Client[tournament_service.TournamentResultOverrideRequest, tournament_service.TournamentResponse]
	startRoundCountdown     *connect.Client[tournament_service.TournamentStartRoundCountdownRequest, tournament_service.TournamentResponse]
	recentGames             *connect.Client[tournament_service.RecentGamesRequest, tournament_service.RecentGamesResponse]
	createClubSession       *connect.Client[tournament_service.NewClubSessionRequest, tournament_service.ClubSessionResponse]
	getRecentClubSessions   *connect.Client[tournament_service.RecentClubSessionsRequest, tournament_service.ClubSessionsResponse]
	unstartTournament       *connect.Client[tournament_service.UnstartTournamentRequest, tournament_service.TournamentResponse]
	uncheckIn               *connect.Client[tournament_service.UncheckInRequest, tournament_service.TournamentResponse]
	checkIn                 *connect.Client[tournament_service.CheckinRequest, tournament_service.TournamentResponse]
	exportTournament        *connect.Client[tournament_service.ExportTournamentRequest, tournament_service.ExportTournamentResponse]
	getTournamentScorecards *connect.Client[tournament_service.TournamentScorecardRequest, tournament_service.TournamentScorecardResponse]
	importTournament        *connect.Client[tournament_service.ImportTournamentRequest, tournament_service.TournamentResponse]
}

// NewTournament calls tournament_service.TournamentService.NewTournament.
func (c *tournamentServiceClient) NewTournament(ctx context.Context, req *connect.Request[tournament_service.NewTournamentRequest]) (*connect.Response[tournament_service.NewTournamentResponse], error) {
	return c.newTournament.CallUnary(ctx, req)
}

// GetTournamentMetadata calls tournament_service.TournamentService.GetTournamentMetadata.
func (c *tournamentServiceClient) GetTournamentMetadata(ctx context.Context, req *connect.Request[tournament_service.GetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentMetadataResponse], error) {
	return c.getTournamentMetadata.CallUnary(ctx, req)
}

// GetTournament calls tournament_service.TournamentService.GetTournament.
func (c *tournamentServiceClient) GetTournament(ctx context.Context, req *connect.Request[tournament_service.GetTournamentRequest]) (*connect.Response[ipc.FullTournamentDivisions], error) {
	return c.getTournament.CallUnary(ctx, req)
}

// FinishTournament calls tournament_service.TournamentService.FinishTournament.
func (c *tournamentServiceClient) FinishTournament(ctx context.Context, req *connect.Request[tournament_service.FinishTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.finishTournament.CallUnary(ctx, req)
}

// SetTournamentMetadata calls tournament_service.TournamentService.SetTournamentMetadata.
func (c *tournamentServiceClient) SetTournamentMetadata(ctx context.Context, req *connect.Request[tournament_service.SetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.setTournamentMetadata.CallUnary(ctx, req)
}

// PairRound calls tournament_service.TournamentService.PairRound.
func (c *tournamentServiceClient) PairRound(ctx context.Context, req *connect.Request[tournament_service.PairRoundRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.pairRound.CallUnary(ctx, req)
}

// SetSingleRoundControls calls tournament_service.TournamentService.SetSingleRoundControls.
func (c *tournamentServiceClient) SetSingleRoundControls(ctx context.Context, req *connect.Request[tournament_service.SingleRoundControlsRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.setSingleRoundControls.CallUnary(ctx, req)
}

// SetRoundControls calls tournament_service.TournamentService.SetRoundControls.
func (c *tournamentServiceClient) SetRoundControls(ctx context.Context, req *connect.Request[ipc.DivisionRoundControls]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.setRoundControls.CallUnary(ctx, req)
}

// SetDivisionControls calls tournament_service.TournamentService.SetDivisionControls.
func (c *tournamentServiceClient) SetDivisionControls(ctx context.Context, req *connect.Request[ipc.DivisionControls]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.setDivisionControls.CallUnary(ctx, req)
}

// AddDirectors calls tournament_service.TournamentService.AddDirectors.
func (c *tournamentServiceClient) AddDirectors(ctx context.Context, req *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.addDirectors.CallUnary(ctx, req)
}

// RemoveDirectors calls tournament_service.TournamentService.RemoveDirectors.
func (c *tournamentServiceClient) RemoveDirectors(ctx context.Context, req *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.removeDirectors.CallUnary(ctx, req)
}

// AddDivision calls tournament_service.TournamentService.AddDivision.
func (c *tournamentServiceClient) AddDivision(ctx context.Context, req *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.addDivision.CallUnary(ctx, req)
}

// RenameDivision calls tournament_service.TournamentService.RenameDivision.
func (c *tournamentServiceClient) RenameDivision(ctx context.Context, req *connect.Request[tournament_service.DivisionRenameRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.renameDivision.CallUnary(ctx, req)
}

// RemoveDivision calls tournament_service.TournamentService.RemoveDivision.
func (c *tournamentServiceClient) RemoveDivision(ctx context.Context, req *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.removeDivision.CallUnary(ctx, req)
}

// AddPlayers calls tournament_service.TournamentService.AddPlayers.
func (c *tournamentServiceClient) AddPlayers(ctx context.Context, req *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.addPlayers.CallUnary(ctx, req)
}

// RemovePlayers calls tournament_service.TournamentService.RemovePlayers.
func (c *tournamentServiceClient) RemovePlayers(ctx context.Context, req *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.removePlayers.CallUnary(ctx, req)
}

// SetPairing calls tournament_service.TournamentService.SetPairing.
func (c *tournamentServiceClient) SetPairing(ctx context.Context, req *connect.Request[tournament_service.TournamentPairingsRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.setPairing.CallUnary(ctx, req)
}

// SetResult calls tournament_service.TournamentService.SetResult.
func (c *tournamentServiceClient) SetResult(ctx context.Context, req *connect.Request[tournament_service.TournamentResultOverrideRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.setResult.CallUnary(ctx, req)
}

// StartRoundCountdown calls tournament_service.TournamentService.StartRoundCountdown.
func (c *tournamentServiceClient) StartRoundCountdown(ctx context.Context, req *connect.Request[tournament_service.TournamentStartRoundCountdownRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.startRoundCountdown.CallUnary(ctx, req)
}

// RecentGames calls tournament_service.TournamentService.RecentGames.
func (c *tournamentServiceClient) RecentGames(ctx context.Context, req *connect.Request[tournament_service.RecentGamesRequest]) (*connect.Response[tournament_service.RecentGamesResponse], error) {
	return c.recentGames.CallUnary(ctx, req)
}

// CreateClubSession calls tournament_service.TournamentService.CreateClubSession.
func (c *tournamentServiceClient) CreateClubSession(ctx context.Context, req *connect.Request[tournament_service.NewClubSessionRequest]) (*connect.Response[tournament_service.ClubSessionResponse], error) {
	return c.createClubSession.CallUnary(ctx, req)
}

// GetRecentClubSessions calls tournament_service.TournamentService.GetRecentClubSessions.
func (c *tournamentServiceClient) GetRecentClubSessions(ctx context.Context, req *connect.Request[tournament_service.RecentClubSessionsRequest]) (*connect.Response[tournament_service.ClubSessionsResponse], error) {
	return c.getRecentClubSessions.CallUnary(ctx, req)
}

// UnstartTournament calls tournament_service.TournamentService.UnstartTournament.
func (c *tournamentServiceClient) UnstartTournament(ctx context.Context, req *connect.Request[tournament_service.UnstartTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.unstartTournament.CallUnary(ctx, req)
}

// UncheckIn calls tournament_service.TournamentService.UncheckIn.
func (c *tournamentServiceClient) UncheckIn(ctx context.Context, req *connect.Request[tournament_service.UncheckInRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.uncheckIn.CallUnary(ctx, req)
}

// CheckIn calls tournament_service.TournamentService.CheckIn.
func (c *tournamentServiceClient) CheckIn(ctx context.Context, req *connect.Request[tournament_service.CheckinRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.checkIn.CallUnary(ctx, req)
}

// ExportTournament calls tournament_service.TournamentService.ExportTournament.
func (c *tournamentServiceClient) ExportTournament(ctx context.Context, req *connect.Request[tournament_service.ExportTournamentRequest]) (*connect.Response[tournament_service.ExportTournamentResponse], error) {
	return c.exportTournament.CallUnary(ctx, req)
}

// GetTournamentScorecards calls tournament_service.TournamentService.GetTournamentScorecards.
func (c *tournamentServiceClient) GetTournamentScorecards(ctx context.Context, req *connect.Request[tournament_service.TournamentScorecardRequest]) (*connect.Response[tournament_service.TournamentScorecardResponse], error) {
	return c.getTournamentScorecards.CallUnary(ctx, req)
}

// ImportTournament calls tournament_service.TournamentService.ImportTournament.
func (c *tournamentServiceClient) ImportTournament(ctx context.Context, req *connect.Request[tournament_service.ImportTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return c.importTournament.CallUnary(ctx, req)
}

// TournamentServiceHandler is an implementation of the tournament_service.TournamentService
// service.
type TournamentServiceHandler interface {
	NewTournament(context.Context, *connect.Request[tournament_service.NewTournamentRequest]) (*connect.Response[tournament_service.NewTournamentResponse], error)
	GetTournamentMetadata(context.Context, *connect.Request[tournament_service.GetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentMetadataResponse], error)
	GetTournament(context.Context, *connect.Request[tournament_service.GetTournamentRequest]) (*connect.Response[ipc.FullTournamentDivisions], error)
	FinishTournament(context.Context, *connect.Request[tournament_service.FinishTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetTournamentMetadata(context.Context, *connect.Request[tournament_service.SetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	PairRound(context.Context, *connect.Request[tournament_service.PairRoundRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetSingleRoundControls(context.Context, *connect.Request[tournament_service.SingleRoundControlsRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetRoundControls(context.Context, *connect.Request[ipc.DivisionRoundControls]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetDivisionControls(context.Context, *connect.Request[ipc.DivisionControls]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to AddDirectors should be director usernames.
	AddDirectors(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to RemoveDirectors should be director usernames.
	RemoveDirectors(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	AddDivision(context.Context, *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RenameDivision(context.Context, *connect.Request[tournament_service.DivisionRenameRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RemoveDivision(context.Context, *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to AddPlayers should be player usernames
	AddPlayers(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Input to RemovePlayers should be player usernames
	RemovePlayers(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetPairing(context.Context, *connect.Request[tournament_service.TournamentPairingsRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	SetResult(context.Context, *connect.Request[tournament_service.TournamentResultOverrideRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	StartRoundCountdown(context.Context, *connect.Request[tournament_service.TournamentStartRoundCountdownRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	RecentGames(context.Context, *connect.Request[tournament_service.RecentGamesRequest]) (*connect.Response[tournament_service.RecentGamesResponse], error)
	CreateClubSession(context.Context, *connect.Request[tournament_service.NewClubSessionRequest]) (*connect.Response[tournament_service.ClubSessionResponse], error)
	GetRecentClubSessions(context.Context, *connect.Request[tournament_service.RecentClubSessionsRequest]) (*connect.Response[tournament_service.ClubSessionsResponse], error)
	UnstartTournament(context.Context, *connect.Request[tournament_service.UnstartTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	// Uncheck everyone in. Use this some time before the beginning of a session.
	UncheckIn(context.Context, *connect.Request[tournament_service.UncheckInRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	// CheckIn allows players to check themselves in.
	CheckIn(context.Context, *connect.Request[tournament_service.CheckinRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
	ExportTournament(context.Context, *connect.Request[tournament_service.ExportTournamentRequest]) (*connect.Response[tournament_service.ExportTournamentResponse], error)
	GetTournamentScorecards(context.Context, *connect.Request[tournament_service.TournamentScorecardRequest]) (*connect.Response[tournament_service.TournamentScorecardResponse], error)
	ImportTournament(context.Context, *connect.Request[tournament_service.ImportTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error)
}

// NewTournamentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTournamentServiceHandler(svc TournamentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tournamentServiceNewTournamentHandler := connect.NewUnaryHandler(
		TournamentServiceNewTournamentProcedure,
		svc.NewTournament,
		connect.WithSchema(tournamentServiceNewTournamentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceGetTournamentMetadataHandler := connect.NewUnaryHandler(
		TournamentServiceGetTournamentMetadataProcedure,
		svc.GetTournamentMetadata,
		connect.WithSchema(tournamentServiceGetTournamentMetadataMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceGetTournamentHandler := connect.NewUnaryHandler(
		TournamentServiceGetTournamentProcedure,
		svc.GetTournament,
		connect.WithSchema(tournamentServiceGetTournamentMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceFinishTournamentHandler := connect.NewUnaryHandler(
		TournamentServiceFinishTournamentProcedure,
		svc.FinishTournament,
		connect.WithSchema(tournamentServiceFinishTournamentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceSetTournamentMetadataHandler := connect.NewUnaryHandler(
		TournamentServiceSetTournamentMetadataProcedure,
		svc.SetTournamentMetadata,
		connect.WithSchema(tournamentServiceSetTournamentMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServicePairRoundHandler := connect.NewUnaryHandler(
		TournamentServicePairRoundProcedure,
		svc.PairRound,
		connect.WithSchema(tournamentServicePairRoundMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceSetSingleRoundControlsHandler := connect.NewUnaryHandler(
		TournamentServiceSetSingleRoundControlsProcedure,
		svc.SetSingleRoundControls,
		connect.WithSchema(tournamentServiceSetSingleRoundControlsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceSetRoundControlsHandler := connect.NewUnaryHandler(
		TournamentServiceSetRoundControlsProcedure,
		svc.SetRoundControls,
		connect.WithSchema(tournamentServiceSetRoundControlsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceSetDivisionControlsHandler := connect.NewUnaryHandler(
		TournamentServiceSetDivisionControlsProcedure,
		svc.SetDivisionControls,
		connect.WithSchema(tournamentServiceSetDivisionControlsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceAddDirectorsHandler := connect.NewUnaryHandler(
		TournamentServiceAddDirectorsProcedure,
		svc.AddDirectors,
		connect.WithSchema(tournamentServiceAddDirectorsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceRemoveDirectorsHandler := connect.NewUnaryHandler(
		TournamentServiceRemoveDirectorsProcedure,
		svc.RemoveDirectors,
		connect.WithSchema(tournamentServiceRemoveDirectorsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceAddDivisionHandler := connect.NewUnaryHandler(
		TournamentServiceAddDivisionProcedure,
		svc.AddDivision,
		connect.WithSchema(tournamentServiceAddDivisionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceRenameDivisionHandler := connect.NewUnaryHandler(
		TournamentServiceRenameDivisionProcedure,
		svc.RenameDivision,
		connect.WithSchema(tournamentServiceRenameDivisionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceRemoveDivisionHandler := connect.NewUnaryHandler(
		TournamentServiceRemoveDivisionProcedure,
		svc.RemoveDivision,
		connect.WithSchema(tournamentServiceRemoveDivisionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceAddPlayersHandler := connect.NewUnaryHandler(
		TournamentServiceAddPlayersProcedure,
		svc.AddPlayers,
		connect.WithSchema(tournamentServiceAddPlayersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceRemovePlayersHandler := connect.NewUnaryHandler(
		TournamentServiceRemovePlayersProcedure,
		svc.RemovePlayers,
		connect.WithSchema(tournamentServiceRemovePlayersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceSetPairingHandler := connect.NewUnaryHandler(
		TournamentServiceSetPairingProcedure,
		svc.SetPairing,
		connect.WithSchema(tournamentServiceSetPairingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceSetResultHandler := connect.NewUnaryHandler(
		TournamentServiceSetResultProcedure,
		svc.SetResult,
		connect.WithSchema(tournamentServiceSetResultMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceStartRoundCountdownHandler := connect.NewUnaryHandler(
		TournamentServiceStartRoundCountdownProcedure,
		svc.StartRoundCountdown,
		connect.WithSchema(tournamentServiceStartRoundCountdownMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceRecentGamesHandler := connect.NewUnaryHandler(
		TournamentServiceRecentGamesProcedure,
		svc.RecentGames,
		connect.WithSchema(tournamentServiceRecentGamesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceCreateClubSessionHandler := connect.NewUnaryHandler(
		TournamentServiceCreateClubSessionProcedure,
		svc.CreateClubSession,
		connect.WithSchema(tournamentServiceCreateClubSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceGetRecentClubSessionsHandler := connect.NewUnaryHandler(
		TournamentServiceGetRecentClubSessionsProcedure,
		svc.GetRecentClubSessions,
		connect.WithSchema(tournamentServiceGetRecentClubSessionsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceUnstartTournamentHandler := connect.NewUnaryHandler(
		TournamentServiceUnstartTournamentProcedure,
		svc.UnstartTournament,
		connect.WithSchema(tournamentServiceUnstartTournamentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceUncheckInHandler := connect.NewUnaryHandler(
		TournamentServiceUncheckInProcedure,
		svc.UncheckIn,
		connect.WithSchema(tournamentServiceUncheckInMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceCheckInHandler := connect.NewUnaryHandler(
		TournamentServiceCheckInProcedure,
		svc.CheckIn,
		connect.WithSchema(tournamentServiceCheckInMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceExportTournamentHandler := connect.NewUnaryHandler(
		TournamentServiceExportTournamentProcedure,
		svc.ExportTournament,
		connect.WithSchema(tournamentServiceExportTournamentMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceGetTournamentScorecardsHandler := connect.NewUnaryHandler(
		TournamentServiceGetTournamentScorecardsProcedure,
		svc.GetTournamentScorecards,
		connect.WithSchema(tournamentServiceGetTournamentScorecardsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	tournamentServiceImportTournamentHandler := connect.NewUnaryHandler(
		TournamentServiceImportTournamentProcedure,
		svc.ImportTournament,
		connect.WithSchema(tournamentServiceImportTournamentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/tournament_service.TournamentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TournamentServiceNewTournamentProcedure:
			tournamentServiceNewTournamentHandler.ServeHTTP(w, r)
		case TournamentServiceGetTournamentMetadataProcedure:
			tournamentServiceGetTournamentMetadataHandler.ServeHTTP(w, r)
		case TournamentServiceGetTournamentProcedure:
			tournamentServiceGetTournamentHandler.ServeHTTP(w, r)
		case TournamentServiceFinishTournamentProcedure:
			tournamentServiceFinishTournamentHandler.ServeHTTP(w, r)
		case TournamentServiceSetTournamentMetadataProcedure:
			tournamentServiceSetTournamentMetadataHandler.ServeHTTP(w, r)
		case TournamentServicePairRoundProcedure:
			tournamentServicePairRoundHandler.ServeHTTP(w, r)
		case TournamentServiceSetSingleRoundControlsProcedure:
			tournamentServiceSetSingleRoundControlsHandler.ServeHTTP(w, r)
		case TournamentServiceSetRoundControlsProcedure:
			tournamentServiceSetRoundControlsHandler.ServeHTTP(w, r)
		case TournamentServiceSetDivisionControlsProcedure:
			tournamentServiceSetDivisionControlsHandler.ServeHTTP(w, r)
		case TournamentServiceAddDirectorsProcedure:
			tournamentServiceAddDirectorsHandler.ServeHTTP(w, r)
		case TournamentServiceRemoveDirectorsProcedure:
			tournamentServiceRemoveDirectorsHandler.ServeHTTP(w, r)
		case TournamentServiceAddDivisionProcedure:
			tournamentServiceAddDivisionHandler.ServeHTTP(w, r)
		case TournamentServiceRenameDivisionProcedure:
			tournamentServiceRenameDivisionHandler.ServeHTTP(w, r)
		case TournamentServiceRemoveDivisionProcedure:
			tournamentServiceRemoveDivisionHandler.ServeHTTP(w, r)
		case TournamentServiceAddPlayersProcedure:
			tournamentServiceAddPlayersHandler.ServeHTTP(w, r)
		case TournamentServiceRemovePlayersProcedure:
			tournamentServiceRemovePlayersHandler.ServeHTTP(w, r)
		case TournamentServiceSetPairingProcedure:
			tournamentServiceSetPairingHandler.ServeHTTP(w, r)
		case TournamentServiceSetResultProcedure:
			tournamentServiceSetResultHandler.ServeHTTP(w, r)
		case TournamentServiceStartRoundCountdownProcedure:
			tournamentServiceStartRoundCountdownHandler.ServeHTTP(w, r)
		case TournamentServiceRecentGamesProcedure:
			tournamentServiceRecentGamesHandler.ServeHTTP(w, r)
		case TournamentServiceCreateClubSessionProcedure:
			tournamentServiceCreateClubSessionHandler.ServeHTTP(w, r)
		case TournamentServiceGetRecentClubSessionsProcedure:
			tournamentServiceGetRecentClubSessionsHandler.ServeHTTP(w, r)
		case TournamentServiceUnstartTournamentProcedure:
			tournamentServiceUnstartTournamentHandler.ServeHTTP(w, r)
		case TournamentServiceUncheckInProcedure:
			tournamentServiceUncheckInHandler.ServeHTTP(w, r)
		case TournamentServiceCheckInProcedure:
			tournamentServiceCheckInHandler.ServeHTTP(w, r)
		case TournamentServiceExportTournamentProcedure:
			tournamentServiceExportTournamentHandler.ServeHTTP(w, r)
		case TournamentServiceGetTournamentScorecardsProcedure:
			tournamentServiceGetTournamentScorecardsHandler.ServeHTTP(w, r)
		case TournamentServiceImportTournamentProcedure:
			tournamentServiceImportTournamentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTournamentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTournamentServiceHandler struct{}

func (UnimplementedTournamentServiceHandler) NewTournament(context.Context, *connect.Request[tournament_service.NewTournamentRequest]) (*connect.Response[tournament_service.NewTournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.NewTournament is not implemented"))
}

func (UnimplementedTournamentServiceHandler) GetTournamentMetadata(context.Context, *connect.Request[tournament_service.GetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.GetTournamentMetadata is not implemented"))
}

func (UnimplementedTournamentServiceHandler) GetTournament(context.Context, *connect.Request[tournament_service.GetTournamentRequest]) (*connect.Response[ipc.FullTournamentDivisions], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.GetTournament is not implemented"))
}

func (UnimplementedTournamentServiceHandler) FinishTournament(context.Context, *connect.Request[tournament_service.FinishTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.FinishTournament is not implemented"))
}

func (UnimplementedTournamentServiceHandler) SetTournamentMetadata(context.Context, *connect.Request[tournament_service.SetTournamentMetadataRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.SetTournamentMetadata is not implemented"))
}

func (UnimplementedTournamentServiceHandler) PairRound(context.Context, *connect.Request[tournament_service.PairRoundRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.PairRound is not implemented"))
}

func (UnimplementedTournamentServiceHandler) SetSingleRoundControls(context.Context, *connect.Request[tournament_service.SingleRoundControlsRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.SetSingleRoundControls is not implemented"))
}

func (UnimplementedTournamentServiceHandler) SetRoundControls(context.Context, *connect.Request[ipc.DivisionRoundControls]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.SetRoundControls is not implemented"))
}

func (UnimplementedTournamentServiceHandler) SetDivisionControls(context.Context, *connect.Request[ipc.DivisionControls]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.SetDivisionControls is not implemented"))
}

func (UnimplementedTournamentServiceHandler) AddDirectors(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.AddDirectors is not implemented"))
}

func (UnimplementedTournamentServiceHandler) RemoveDirectors(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.RemoveDirectors is not implemented"))
}

func (UnimplementedTournamentServiceHandler) AddDivision(context.Context, *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.AddDivision is not implemented"))
}

func (UnimplementedTournamentServiceHandler) RenameDivision(context.Context, *connect.Request[tournament_service.DivisionRenameRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.RenameDivision is not implemented"))
}

func (UnimplementedTournamentServiceHandler) RemoveDivision(context.Context, *connect.Request[tournament_service.TournamentDivisionRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.RemoveDivision is not implemented"))
}

func (UnimplementedTournamentServiceHandler) AddPlayers(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.AddPlayers is not implemented"))
}

func (UnimplementedTournamentServiceHandler) RemovePlayers(context.Context, *connect.Request[ipc.TournamentPersons]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.RemovePlayers is not implemented"))
}

func (UnimplementedTournamentServiceHandler) SetPairing(context.Context, *connect.Request[tournament_service.TournamentPairingsRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.SetPairing is not implemented"))
}

func (UnimplementedTournamentServiceHandler) SetResult(context.Context, *connect.Request[tournament_service.TournamentResultOverrideRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.SetResult is not implemented"))
}

func (UnimplementedTournamentServiceHandler) StartRoundCountdown(context.Context, *connect.Request[tournament_service.TournamentStartRoundCountdownRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.StartRoundCountdown is not implemented"))
}

func (UnimplementedTournamentServiceHandler) RecentGames(context.Context, *connect.Request[tournament_service.RecentGamesRequest]) (*connect.Response[tournament_service.RecentGamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.RecentGames is not implemented"))
}

func (UnimplementedTournamentServiceHandler) CreateClubSession(context.Context, *connect.Request[tournament_service.NewClubSessionRequest]) (*connect.Response[tournament_service.ClubSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.CreateClubSession is not implemented"))
}

func (UnimplementedTournamentServiceHandler) GetRecentClubSessions(context.Context, *connect.Request[tournament_service.RecentClubSessionsRequest]) (*connect.Response[tournament_service.ClubSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.GetRecentClubSessions is not implemented"))
}

func (UnimplementedTournamentServiceHandler) UnstartTournament(context.Context, *connect.Request[tournament_service.UnstartTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.UnstartTournament is not implemented"))
}

func (UnimplementedTournamentServiceHandler) UncheckIn(context.Context, *connect.Request[tournament_service.UncheckInRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.UncheckIn is not implemented"))
}

func (UnimplementedTournamentServiceHandler) CheckIn(context.Context, *connect.Request[tournament_service.CheckinRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.CheckIn is not implemented"))
}

func (UnimplementedTournamentServiceHandler) ExportTournament(context.Context, *connect.Request[tournament_service.ExportTournamentRequest]) (*connect.Response[tournament_service.ExportTournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.ExportTournament is not implemented"))
}

func (UnimplementedTournamentServiceHandler) GetTournamentScorecards(context.Context, *connect.Request[tournament_service.TournamentScorecardRequest]) (*connect.Response[tournament_service.TournamentScorecardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.GetTournamentScorecards is not implemented"))
}

func (UnimplementedTournamentServiceHandler) ImportTournament(context.Context, *connect.Request[tournament_service.ImportTournamentRequest]) (*connect.Response[tournament_service.TournamentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tournament_service.TournamentService.ImportTournament is not implemented"))
}
