// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: api/proto/tournament_service/tournament_service.proto

package tournament_service

import (
	realtime "github.com/domino14/liwords/rpc/api/proto/realtime"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TType int32

const (
	// A Standard tournament
	TType_STANDARD TType = 0
	// A new "clubhouse"
	TType_CLUB TType = 1
	// A club session
	TType_CLUB_SESSION TType = 2
)

// Enum value maps for TType.
var (
	TType_name = map[int32]string{
		0: "STANDARD",
		1: "CLUB",
		2: "CLUB_SESSION",
	}
	TType_value = map[string]int32{
		"STANDARD":     0,
		"CLUB":         1,
		"CLUB_SESSION": 2,
	}
)

func (x TType) Enum() *TType {
	p := new(TType)
	*p = x
	return p
}

func (x TType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_tournament_service_tournament_service_proto_enumTypes[0].Descriptor()
}

func (TType) Type() protoreflect.EnumType {
	return &file_api_proto_tournament_service_tournament_service_proto_enumTypes[0]
}

func (x TType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TType.Descriptor instead.
func (TType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{0}
}

type StartRoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId string `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Round        int32  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *StartRoundRequest) Reset() {
	*x = StartRoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRoundRequest) ProtoMessage() {}

func (x *StartRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRoundRequest.ProtoReflect.Descriptor instead.
func (*StartRoundRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{0}
}

func (x *StartRoundRequest) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *StartRoundRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type NewTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If slug is not assigned, a random ID will be chosen.
	Slug        string   `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DirectorIds []string `protobuf:"bytes,4,rep,name=director_ids,json=directorIds,proto3" json:"director_ids,omitempty"`
	Type        TType    `protobuf:"varint,5,opt,name=type,proto3,enum=tournament_service.TType" json:"type,omitempty"`
}

func (x *NewTournamentRequest) Reset() {
	*x = NewTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTournamentRequest) ProtoMessage() {}

func (x *NewTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTournamentRequest.ProtoReflect.Descriptor instead.
func (*NewTournamentRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{1}
}

func (x *NewTournamentRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *NewTournamentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewTournamentRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewTournamentRequest) GetDirectorIds() []string {
	if x != nil {
		return x.DirectorIds
	}
	return nil
}

func (x *NewTournamentRequest) GetType() TType {
	if x != nil {
		return x.Type
	}
	return TType_STANDARD
}

type TournamentMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Slug        string `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Type        TType  `protobuf:"varint,5,opt,name=type,proto3,enum=tournament_service.TType" json:"type,omitempty"`
}

func (x *TournamentMetadataRequest) Reset() {
	*x = TournamentMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentMetadataRequest) ProtoMessage() {}

func (x *TournamentMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentMetadataRequest.ProtoReflect.Descriptor instead.
func (*TournamentMetadataRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{2}
}

func (x *TournamentMetadataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentMetadataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TournamentMetadataRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TournamentMetadataRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *TournamentMetadataRequest) GetType() TType {
	if x != nil {
		return x.Type
	}
	return TType_STANDARD
}

type SingleRoundControls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PairingMethod               int32 `protobuf:"varint,1,opt,name=pairing_method,json=pairingMethod,proto3" json:"pairing_method,omitempty"`
	FirstMethod                 int32 `protobuf:"varint,2,opt,name=first_method,json=firstMethod,proto3" json:"first_method,omitempty"`
	GamesPerRound               int32 `protobuf:"varint,3,opt,name=games_per_round,json=gamesPerRound,proto3" json:"games_per_round,omitempty"`
	Round                       int32 `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	Factor                      int32 `protobuf:"varint,5,opt,name=factor,proto3" json:"factor,omitempty"`
	InitialFontes               int32 `protobuf:"varint,6,opt,name=initial_fontes,json=initialFontes,proto3" json:"initial_fontes,omitempty"`
	MaxRepeats                  int32 `protobuf:"varint,7,opt,name=max_repeats,json=maxRepeats,proto3" json:"max_repeats,omitempty"`
	AllowOverMaxRepeats         bool  `protobuf:"varint,8,opt,name=allow_over_max_repeats,json=allowOverMaxRepeats,proto3" json:"allow_over_max_repeats,omitempty"`
	RepeatRelativeWeight        int32 `protobuf:"varint,9,opt,name=repeat_relative_weight,json=repeatRelativeWeight,proto3" json:"repeat_relative_weight,omitempty"`
	WinDifferenceRelativeWeight int32 `protobuf:"varint,10,opt,name=win_difference_relative_weight,json=winDifferenceRelativeWeight,proto3" json:"win_difference_relative_weight,omitempty"`
}

func (x *SingleRoundControls) Reset() {
	*x = SingleRoundControls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleRoundControls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRoundControls) ProtoMessage() {}

func (x *SingleRoundControls) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRoundControls.ProtoReflect.Descriptor instead.
func (*SingleRoundControls) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{3}
}

func (x *SingleRoundControls) GetPairingMethod() int32 {
	if x != nil {
		return x.PairingMethod
	}
	return 0
}

func (x *SingleRoundControls) GetFirstMethod() int32 {
	if x != nil {
		return x.FirstMethod
	}
	return 0
}

func (x *SingleRoundControls) GetGamesPerRound() int32 {
	if x != nil {
		return x.GamesPerRound
	}
	return 0
}

func (x *SingleRoundControls) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *SingleRoundControls) GetFactor() int32 {
	if x != nil {
		return x.Factor
	}
	return 0
}

func (x *SingleRoundControls) GetInitialFontes() int32 {
	if x != nil {
		return x.InitialFontes
	}
	return 0
}

func (x *SingleRoundControls) GetMaxRepeats() int32 {
	if x != nil {
		return x.MaxRepeats
	}
	return 0
}

func (x *SingleRoundControls) GetAllowOverMaxRepeats() bool {
	if x != nil {
		return x.AllowOverMaxRepeats
	}
	return false
}

func (x *SingleRoundControls) GetRepeatRelativeWeight() int32 {
	if x != nil {
		return x.RepeatRelativeWeight
	}
	return 0
}

func (x *SingleRoundControls) GetWinDifferenceRelativeWeight() int32 {
	if x != nil {
		return x.WinDifferenceRelativeWeight
	}
	return 0
}

type SingleRoundControlsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division      string               `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Round         int32                `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	RoundControls *SingleRoundControls `protobuf:"bytes,4,opt,name=round_controls,json=roundControls,proto3" json:"round_controls,omitempty"`
}

func (x *SingleRoundControlsRequest) Reset() {
	*x = SingleRoundControlsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleRoundControlsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRoundControlsRequest) ProtoMessage() {}

func (x *SingleRoundControlsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRoundControlsRequest.ProtoReflect.Descriptor instead.
func (*SingleRoundControlsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{4}
}

func (x *SingleRoundControlsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SingleRoundControlsRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *SingleRoundControlsRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *SingleRoundControlsRequest) GetRoundControls() *SingleRoundControls {
	if x != nil {
		return x.RoundControls
	}
	return nil
}

type TournamentControlsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division       string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	GameRequest    *realtime.GameRequest  `protobuf:"bytes,3,opt,name=game_request,json=gameRequest,proto3" json:"game_request,omitempty"`
	RoundControls  []*SingleRoundControls `protobuf:"bytes,4,rep,name=round_controls,json=roundControls,proto3" json:"round_controls,omitempty"`
	NumberOfRounds int32                  `protobuf:"varint,5,opt,name=number_of_rounds,json=numberOfRounds,proto3" json:"number_of_rounds,omitempty"`
	StartTime      *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *TournamentControlsRequest) Reset() {
	*x = TournamentControlsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentControlsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentControlsRequest) ProtoMessage() {}

func (x *TournamentControlsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentControlsRequest.ProtoReflect.Descriptor instead.
func (*TournamentControlsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{5}
}

func (x *TournamentControlsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentControlsRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentControlsRequest) GetGameRequest() *realtime.GameRequest {
	if x != nil {
		return x.GameRequest
	}
	return nil
}

func (x *TournamentControlsRequest) GetRoundControls() []*SingleRoundControls {
	if x != nil {
		return x.RoundControls
	}
	return nil
}

func (x *TournamentControlsRequest) GetNumberOfRounds() int32 {
	if x != nil {
		return x.NumberOfRounds
	}
	return 0
}

func (x *TournamentControlsRequest) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type PairRoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division string `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Round    int32  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *PairRoundRequest) Reset() {
	*x = PairRoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PairRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairRoundRequest) ProtoMessage() {}

func (x *PairRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairRoundRequest.ProtoReflect.Descriptor instead.
func (*PairRoundRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{6}
}

func (x *PairRoundRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PairRoundRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *PairRoundRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type TournamentPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId  string `protobuf:"bytes,1,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	PersonInt int32  `protobuf:"varint,2,opt,name=person_int,json=personInt,proto3" json:"person_int,omitempty"`
}

func (x *TournamentPerson) Reset() {
	*x = TournamentPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentPerson) ProtoMessage() {}

func (x *TournamentPerson) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentPerson.ProtoReflect.Descriptor instead.
func (*TournamentPerson) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{7}
}

func (x *TournamentPerson) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *TournamentPerson) GetPersonInt() int32 {
	if x != nil {
		return x.PersonInt
	}
	return 0
}

type TournamentPersons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division string              `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Persons  []*TournamentPerson `protobuf:"bytes,3,rep,name=persons,proto3" json:"persons,omitempty"`
}

func (x *TournamentPersons) Reset() {
	*x = TournamentPersons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentPersons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentPersons) ProtoMessage() {}

func (x *TournamentPersons) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentPersons.ProtoReflect.Descriptor instead.
func (*TournamentPersons) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{8}
}

func (x *TournamentPersons) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentPersons) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentPersons) GetPersons() []*TournamentPerson {
	if x != nil {
		return x.Persons
	}
	return nil
}

type TournamentDivisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division string `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
}

func (x *TournamentDivisionRequest) Reset() {
	*x = TournamentDivisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentDivisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentDivisionRequest) ProtoMessage() {}

func (x *TournamentDivisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentDivisionRequest.ProtoReflect.Descriptor instead.
func (*TournamentDivisionRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{9}
}

func (x *TournamentDivisionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentDivisionRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

type TournamentPairingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division    string `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	PlayerOneId string `protobuf:"bytes,3,opt,name=player_one_id,json=playerOneId,proto3" json:"player_one_id,omitempty"`
	PlayerTwoId string `protobuf:"bytes,4,opt,name=player_two_id,json=playerTwoId,proto3" json:"player_two_id,omitempty"`
	Round       int32  `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *TournamentPairingRequest) Reset() {
	*x = TournamentPairingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentPairingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentPairingRequest) ProtoMessage() {}

func (x *TournamentPairingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentPairingRequest.ProtoReflect.Descriptor instead.
func (*TournamentPairingRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{10}
}

func (x *TournamentPairingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentPairingRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentPairingRequest) GetPlayerOneId() string {
	if x != nil {
		return x.PlayerOneId
	}
	return ""
}

func (x *TournamentPairingRequest) GetPlayerTwoId() string {
	if x != nil {
		return x.PlayerTwoId
	}
	return ""
}

func (x *TournamentPairingRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

// TournamentResultOverrideRequest is sent when a score needs to be edited
// or added by a director. Note that player one and player two need to be
// the players that went first and second, respectively; otherwise,
// we will not be able to accurately track firsts/seconds.
type TournamentResultOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division        string                        `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	PlayerOneId     string                        `protobuf:"bytes,3,opt,name=player_one_id,json=playerOneId,proto3" json:"player_one_id,omitempty"`
	PlayerTwoId     string                        `protobuf:"bytes,4,opt,name=player_two_id,json=playerTwoId,proto3" json:"player_two_id,omitempty"`
	Round           int32                         `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	PlayerOneScore  int32                         `protobuf:"varint,6,opt,name=player_one_score,json=playerOneScore,proto3" json:"player_one_score,omitempty"`
	PlayerTwoScore  int32                         `protobuf:"varint,7,opt,name=player_two_score,json=playerTwoScore,proto3" json:"player_two_score,omitempty"`
	PlayerOneResult realtime.TournamentGameResult `protobuf:"varint,8,opt,name=player_one_result,json=playerOneResult,proto3,enum=liwords.TournamentGameResult" json:"player_one_result,omitempty"`
	PlayerTwoResult realtime.TournamentGameResult `protobuf:"varint,9,opt,name=player_two_result,json=playerTwoResult,proto3,enum=liwords.TournamentGameResult" json:"player_two_result,omitempty"`
	GameEndReason   realtime.GameEndReason        `protobuf:"varint,10,opt,name=game_end_reason,json=gameEndReason,proto3,enum=liwords.GameEndReason" json:"game_end_reason,omitempty"`
	Amendment       bool                          `protobuf:"varint,11,opt,name=amendment,proto3" json:"amendment,omitempty"`
	GameIndex       int32                         `protobuf:"varint,12,opt,name=game_index,json=gameIndex,proto3" json:"game_index,omitempty"`
}

func (x *TournamentResultOverrideRequest) Reset() {
	*x = TournamentResultOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentResultOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentResultOverrideRequest) ProtoMessage() {}

func (x *TournamentResultOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentResultOverrideRequest.ProtoReflect.Descriptor instead.
func (*TournamentResultOverrideRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{11}
}

func (x *TournamentResultOverrideRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentResultOverrideRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentResultOverrideRequest) GetPlayerOneId() string {
	if x != nil {
		return x.PlayerOneId
	}
	return ""
}

func (x *TournamentResultOverrideRequest) GetPlayerTwoId() string {
	if x != nil {
		return x.PlayerTwoId
	}
	return ""
}

func (x *TournamentResultOverrideRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TournamentResultOverrideRequest) GetPlayerOneScore() int32 {
	if x != nil {
		return x.PlayerOneScore
	}
	return 0
}

func (x *TournamentResultOverrideRequest) GetPlayerTwoScore() int32 {
	if x != nil {
		return x.PlayerTwoScore
	}
	return 0
}

func (x *TournamentResultOverrideRequest) GetPlayerOneResult() realtime.TournamentGameResult {
	if x != nil {
		return x.PlayerOneResult
	}
	return realtime.TournamentGameResult_NO_RESULT
}

func (x *TournamentResultOverrideRequest) GetPlayerTwoResult() realtime.TournamentGameResult {
	if x != nil {
		return x.PlayerTwoResult
	}
	return realtime.TournamentGameResult_NO_RESULT
}

func (x *TournamentResultOverrideRequest) GetGameEndReason() realtime.GameEndReason {
	if x != nil {
		return x.GameEndReason
	}
	return realtime.GameEndReason_NONE
}

func (x *TournamentResultOverrideRequest) GetAmendment() bool {
	if x != nil {
		return x.Amendment
	}
	return false
}

func (x *TournamentResultOverrideRequest) GetGameIndex() int32 {
	if x != nil {
		return x.GameIndex
	}
	return 0
}

type TournamentStartRoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division string `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Round    int32  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *TournamentStartRoundRequest) Reset() {
	*x = TournamentStartRoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentStartRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentStartRoundRequest) ProtoMessage() {}

func (x *TournamentStartRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentStartRoundRequest.ProtoReflect.Descriptor instead.
func (*TournamentStartRoundRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{12}
}

func (x *TournamentStartRoundRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentStartRoundRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentStartRoundRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type TournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TournamentResponse) Reset() {
	*x = TournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentResponse) ProtoMessage() {}

func (x *TournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentResponse.ProtoReflect.Descriptor instead.
func (*TournamentResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{13}
}

type NewTournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *NewTournamentResponse) Reset() {
	*x = NewTournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTournamentResponse) ProtoMessage() {}

func (x *NewTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTournamentResponse.ProtoReflect.Descriptor instead.
func (*NewTournamentResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{14}
}

func (x *NewTournamentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewTournamentResponse) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type GetTournamentMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User must provide the ID, or the slug (but not both)
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *GetTournamentMetadataRequest) Reset() {
	*x = GetTournamentMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentMetadataRequest) ProtoMessage() {}

func (x *GetTournamentMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentMetadataRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetTournamentMetadataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTournamentMetadataRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type TournamentMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Directors   []string `protobuf:"bytes,3,rep,name=directors,proto3" json:"directors,omitempty"`
	Slug        string   `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Id          string   `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TournamentMetadataResponse) Reset() {
	*x = TournamentMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentMetadataResponse) ProtoMessage() {}

func (x *TournamentMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentMetadataResponse.ProtoReflect.Descriptor instead.
func (*TournamentMetadataResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{16}
}

func (x *TournamentMetadataResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TournamentMetadataResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TournamentMetadataResponse) GetDirectors() []string {
	if x != nil {
		return x.Directors
	}
	return nil
}

func (x *TournamentMetadataResponse) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *TournamentMetadataResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RecentGamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tournament id
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NumGames int32  `protobuf:"varint,2,opt,name=num_games,json=numGames,proto3" json:"num_games,omitempty"`
	Offset   int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *RecentGamesRequest) Reset() {
	*x = RecentGamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentGamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentGamesRequest) ProtoMessage() {}

func (x *RecentGamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentGamesRequest.ProtoReflect.Descriptor instead.
func (*RecentGamesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{17}
}

func (x *RecentGamesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecentGamesRequest) GetNumGames() int32 {
	if x != nil {
		return x.NumGames
	}
	return 0
}

func (x *RecentGamesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type RecentGamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games []*realtime.TournamentGameEndedEvent `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
}

func (x *RecentGamesResponse) Reset() {
	*x = RecentGamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentGamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentGamesResponse) ProtoMessage() {}

func (x *RecentGamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentGamesResponse.ProtoReflect.Descriptor instead.
func (*RecentGamesResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{18}
}

func (x *RecentGamesResponse) GetGames() []*realtime.TournamentGameEndedEvent {
	if x != nil {
		return x.Games
	}
	return nil
}

type NewClubSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// date is the date of the session
	Date   *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	ClubId string               `protobuf:"bytes,2,opt,name=club_id,json=clubId,proto3" json:"club_id,omitempty"`
}

func (x *NewClubSessionRequest) Reset() {
	*x = NewClubSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewClubSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewClubSessionRequest) ProtoMessage() {}

func (x *NewClubSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewClubSessionRequest.ProtoReflect.Descriptor instead.
func (*NewClubSessionRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{19}
}

func (x *NewClubSessionRequest) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *NewClubSessionRequest) GetClubId() string {
	if x != nil {
		return x.ClubId
	}
	return ""
}

type ClubSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note that club sessions are tournaments in our backend. We return
	// the created tournament ID here:
	TournamentId string `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	// slug will look like /club/{club_name}/{date}. It should be
	// case-insensitive.
	Slug string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *ClubSessionResponse) Reset() {
	*x = ClubSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubSessionResponse) ProtoMessage() {}

func (x *ClubSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubSessionResponse.ProtoReflect.Descriptor instead.
func (*ClubSessionResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{20}
}

func (x *ClubSessionResponse) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *ClubSessionResponse) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type RecentClubSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// club_id
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Count  int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Offset int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *RecentClubSessionsRequest) Reset() {
	*x = RecentClubSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentClubSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentClubSessionsRequest) ProtoMessage() {}

func (x *RecentClubSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentClubSessionsRequest.ProtoReflect.Descriptor instead.
func (*RecentClubSessionsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{21}
}

func (x *RecentClubSessionsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecentClubSessionsRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RecentClubSessionsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ClubSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*ClubSessionResponse `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *ClubSessionsResponse) Reset() {
	*x = ClubSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubSessionsResponse) ProtoMessage() {}

func (x *ClubSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubSessionsResponse.ProtoReflect.Descriptor instead.
func (*ClubSessionsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{22}
}

func (x *ClubSessionsResponse) GetSessions() []*ClubSessionResponse {
	if x != nil {
		return x.Sessions
	}
	return nil
}

var File_api_proto_tournament_service_tournament_service_proto protoreflect.FileDescriptor

var file_api_proto_tournament_service_tournament_service_proto_rawDesc = []byte{
	0x0a, 0x35, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x21, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x4e, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22,
	0xb2, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x2d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xad, 0x03, 0x0a, 0x13,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x66,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x77, 0x69, 0x6e, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b,
	0x77, 0x69, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x1a,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x0e,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x0d, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x22, 0xb5, 0x02, 0x0a,
	0x19, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c,
	0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4e, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x10, 0x50, 0x61, 0x69, 0x72, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x4e, 0x0a, 0x10, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x22, 0x7f, 0x0a, 0x11, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x47, 0x0a, 0x19, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x77, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x77, 0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x92, 0x04, 0x0a, 0x1f,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x77,
	0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x77,
	0x6f, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x49, 0x0a,
	0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c,
	0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x5f, 0x0a, 0x1b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x22, 0x14, 0x0a, 0x12, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x22, 0x42, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x1a, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x59, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x4e, 0x0a, 0x13, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x15, 0x4e, 0x65,
	0x77, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x13,
	0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x59, 0x0a, 0x19,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x5b, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x62, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x31, 0x0a, 0x05, 0x54, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43,
	0x4c, 0x55, 0x42, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x55, 0x42, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x32, 0xde, 0x0e, 0x0a, 0x11, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a,
	0x0d, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65,
	0x77, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e,
	0x0a, 0x15, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x09, 0x50, 0x61, 0x69, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x24, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x16, 0x53, 0x65, 0x74,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x73, 0x12, 0x2e, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x15, 0x53,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x73, 0x12, 0x2d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x41,
	0x64, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x73, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x73, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0b,
	0x41, 0x64, 0x64, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x41,
	0x64, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73,
	0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73,
	0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x09,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2f, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x0b, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x75, 0x62, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x31, 0x34, 0x2f,
	0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_tournament_service_tournament_service_proto_rawDescOnce sync.Once
	file_api_proto_tournament_service_tournament_service_proto_rawDescData = file_api_proto_tournament_service_tournament_service_proto_rawDesc
)

func file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP() []byte {
	file_api_proto_tournament_service_tournament_service_proto_rawDescOnce.Do(func() {
		file_api_proto_tournament_service_tournament_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_tournament_service_tournament_service_proto_rawDescData)
	})
	return file_api_proto_tournament_service_tournament_service_proto_rawDescData
}

var file_api_proto_tournament_service_tournament_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_tournament_service_tournament_service_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_api_proto_tournament_service_tournament_service_proto_goTypes = []interface{}{
	(TType)(0),                                // 0: tournament_service.TType
	(*StartRoundRequest)(nil),                 // 1: tournament_service.StartRoundRequest
	(*NewTournamentRequest)(nil),              // 2: tournament_service.NewTournamentRequest
	(*TournamentMetadataRequest)(nil),         // 3: tournament_service.TournamentMetadataRequest
	(*SingleRoundControls)(nil),               // 4: tournament_service.SingleRoundControls
	(*SingleRoundControlsRequest)(nil),        // 5: tournament_service.SingleRoundControlsRequest
	(*TournamentControlsRequest)(nil),         // 6: tournament_service.TournamentControlsRequest
	(*PairRoundRequest)(nil),                  // 7: tournament_service.PairRoundRequest
	(*TournamentPerson)(nil),                  // 8: tournament_service.TournamentPerson
	(*TournamentPersons)(nil),                 // 9: tournament_service.TournamentPersons
	(*TournamentDivisionRequest)(nil),         // 10: tournament_service.TournamentDivisionRequest
	(*TournamentPairingRequest)(nil),          // 11: tournament_service.TournamentPairingRequest
	(*TournamentResultOverrideRequest)(nil),   // 12: tournament_service.TournamentResultOverrideRequest
	(*TournamentStartRoundRequest)(nil),       // 13: tournament_service.TournamentStartRoundRequest
	(*TournamentResponse)(nil),                // 14: tournament_service.TournamentResponse
	(*NewTournamentResponse)(nil),             // 15: tournament_service.NewTournamentResponse
	(*GetTournamentMetadataRequest)(nil),      // 16: tournament_service.GetTournamentMetadataRequest
	(*TournamentMetadataResponse)(nil),        // 17: tournament_service.TournamentMetadataResponse
	(*RecentGamesRequest)(nil),                // 18: tournament_service.RecentGamesRequest
	(*RecentGamesResponse)(nil),               // 19: tournament_service.RecentGamesResponse
	(*NewClubSessionRequest)(nil),             // 20: tournament_service.NewClubSessionRequest
	(*ClubSessionResponse)(nil),               // 21: tournament_service.ClubSessionResponse
	(*RecentClubSessionsRequest)(nil),         // 22: tournament_service.RecentClubSessionsRequest
	(*ClubSessionsResponse)(nil),              // 23: tournament_service.ClubSessionsResponse
	(*realtime.GameRequest)(nil),              // 24: liwords.GameRequest
	(*timestamp.Timestamp)(nil),               // 25: google.protobuf.Timestamp
	(realtime.TournamentGameResult)(0),        // 26: liwords.TournamentGameResult
	(realtime.GameEndReason)(0),               // 27: liwords.GameEndReason
	(*realtime.TournamentGameEndedEvent)(nil), // 28: liwords.TournamentGameEndedEvent
}
var file_api_proto_tournament_service_tournament_service_proto_depIdxs = []int32{
	0,  // 0: tournament_service.NewTournamentRequest.type:type_name -> tournament_service.TType
	0,  // 1: tournament_service.TournamentMetadataRequest.type:type_name -> tournament_service.TType
	4,  // 2: tournament_service.SingleRoundControlsRequest.round_controls:type_name -> tournament_service.SingleRoundControls
	24, // 3: tournament_service.TournamentControlsRequest.game_request:type_name -> liwords.GameRequest
	4,  // 4: tournament_service.TournamentControlsRequest.round_controls:type_name -> tournament_service.SingleRoundControls
	25, // 5: tournament_service.TournamentControlsRequest.start_time:type_name -> google.protobuf.Timestamp
	8,  // 6: tournament_service.TournamentPersons.persons:type_name -> tournament_service.TournamentPerson
	26, // 7: tournament_service.TournamentResultOverrideRequest.player_one_result:type_name -> liwords.TournamentGameResult
	26, // 8: tournament_service.TournamentResultOverrideRequest.player_two_result:type_name -> liwords.TournamentGameResult
	27, // 9: tournament_service.TournamentResultOverrideRequest.game_end_reason:type_name -> liwords.GameEndReason
	28, // 10: tournament_service.RecentGamesResponse.games:type_name -> liwords.TournamentGameEndedEvent
	25, // 11: tournament_service.NewClubSessionRequest.date:type_name -> google.protobuf.Timestamp
	21, // 12: tournament_service.ClubSessionsResponse.sessions:type_name -> tournament_service.ClubSessionResponse
	2,  // 13: tournament_service.TournamentService.NewTournament:input_type -> tournament_service.NewTournamentRequest
	16, // 14: tournament_service.TournamentService.GetTournamentMetadata:input_type -> tournament_service.GetTournamentMetadataRequest
	3,  // 15: tournament_service.TournamentService.SetTournamentMetadata:input_type -> tournament_service.TournamentMetadataRequest
	7,  // 16: tournament_service.TournamentService.PairRound:input_type -> tournament_service.PairRoundRequest
	5,  // 17: tournament_service.TournamentService.SetSingleRoundControls:input_type -> tournament_service.SingleRoundControlsRequest
	6,  // 18: tournament_service.TournamentService.SetTournamentControls:input_type -> tournament_service.TournamentControlsRequest
	9,  // 19: tournament_service.TournamentService.AddDirectors:input_type -> tournament_service.TournamentPersons
	9,  // 20: tournament_service.TournamentService.RemoveDirectors:input_type -> tournament_service.TournamentPersons
	10, // 21: tournament_service.TournamentService.AddDivision:input_type -> tournament_service.TournamentDivisionRequest
	10, // 22: tournament_service.TournamentService.RemoveDivision:input_type -> tournament_service.TournamentDivisionRequest
	9,  // 23: tournament_service.TournamentService.AddPlayers:input_type -> tournament_service.TournamentPersons
	9,  // 24: tournament_service.TournamentService.RemovePlayers:input_type -> tournament_service.TournamentPersons
	11, // 25: tournament_service.TournamentService.SetPairing:input_type -> tournament_service.TournamentPairingRequest
	12, // 26: tournament_service.TournamentService.SetResult:input_type -> tournament_service.TournamentResultOverrideRequest
	13, // 27: tournament_service.TournamentService.StartRound:input_type -> tournament_service.TournamentStartRoundRequest
	18, // 28: tournament_service.TournamentService.RecentGames:input_type -> tournament_service.RecentGamesRequest
	20, // 29: tournament_service.TournamentService.CreateClubSession:input_type -> tournament_service.NewClubSessionRequest
	22, // 30: tournament_service.TournamentService.GetRecentClubSessions:input_type -> tournament_service.RecentClubSessionsRequest
	15, // 31: tournament_service.TournamentService.NewTournament:output_type -> tournament_service.NewTournamentResponse
	17, // 32: tournament_service.TournamentService.GetTournamentMetadata:output_type -> tournament_service.TournamentMetadataResponse
	14, // 33: tournament_service.TournamentService.SetTournamentMetadata:output_type -> tournament_service.TournamentResponse
	14, // 34: tournament_service.TournamentService.PairRound:output_type -> tournament_service.TournamentResponse
	14, // 35: tournament_service.TournamentService.SetSingleRoundControls:output_type -> tournament_service.TournamentResponse
	14, // 36: tournament_service.TournamentService.SetTournamentControls:output_type -> tournament_service.TournamentResponse
	14, // 37: tournament_service.TournamentService.AddDirectors:output_type -> tournament_service.TournamentResponse
	14, // 38: tournament_service.TournamentService.RemoveDirectors:output_type -> tournament_service.TournamentResponse
	14, // 39: tournament_service.TournamentService.AddDivision:output_type -> tournament_service.TournamentResponse
	14, // 40: tournament_service.TournamentService.RemoveDivision:output_type -> tournament_service.TournamentResponse
	14, // 41: tournament_service.TournamentService.AddPlayers:output_type -> tournament_service.TournamentResponse
	14, // 42: tournament_service.TournamentService.RemovePlayers:output_type -> tournament_service.TournamentResponse
	14, // 43: tournament_service.TournamentService.SetPairing:output_type -> tournament_service.TournamentResponse
	14, // 44: tournament_service.TournamentService.SetResult:output_type -> tournament_service.TournamentResponse
	14, // 45: tournament_service.TournamentService.StartRound:output_type -> tournament_service.TournamentResponse
	19, // 46: tournament_service.TournamentService.RecentGames:output_type -> tournament_service.RecentGamesResponse
	21, // 47: tournament_service.TournamentService.CreateClubSession:output_type -> tournament_service.ClubSessionResponse
	23, // 48: tournament_service.TournamentService.GetRecentClubSessions:output_type -> tournament_service.ClubSessionsResponse
	31, // [31:49] is the sub-list for method output_type
	13, // [13:31] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_api_proto_tournament_service_tournament_service_proto_init() }
func file_api_proto_tournament_service_tournament_service_proto_init() {
	if File_api_proto_tournament_service_tournament_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleRoundControls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleRoundControlsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentControlsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PairRoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentPersons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentDivisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentPairingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentResultOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentStartRoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTournamentMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentGamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentGamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewClubSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentClubSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_tournament_service_tournament_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_tournament_service_tournament_service_proto_goTypes,
		DependencyIndexes: file_api_proto_tournament_service_tournament_service_proto_depIdxs,
		EnumInfos:         file_api_proto_tournament_service_tournament_service_proto_enumTypes,
		MessageInfos:      file_api_proto_tournament_service_tournament_service_proto_msgTypes,
	}.Build()
	File_api_proto_tournament_service_tournament_service_proto = out.File
	file_api_proto_tournament_service_tournament_service_proto_rawDesc = nil
	file_api_proto_tournament_service_tournament_service_proto_goTypes = nil
	file_api_proto_tournament_service_tournament_service_proto_depIdxs = nil
}
