// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/puzzle_service/puzzle_service.proto

package puzzle_serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	puzzle_service "github.com/woogles-io/liwords/rpc/api/proto/puzzle_service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PuzzleServiceName is the fully-qualified name of the PuzzleService service.
	PuzzleServiceName = "puzzle_service.PuzzleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PuzzleServiceGetStartPuzzleIdProcedure is the fully-qualified name of the PuzzleService's
	// GetStartPuzzleId RPC.
	PuzzleServiceGetStartPuzzleIdProcedure = "/puzzle_service.PuzzleService/GetStartPuzzleId"
	// PuzzleServiceGetNextPuzzleIdProcedure is the fully-qualified name of the PuzzleService's
	// GetNextPuzzleId RPC.
	PuzzleServiceGetNextPuzzleIdProcedure = "/puzzle_service.PuzzleService/GetNextPuzzleId"
	// PuzzleServiceGetNextClosestRatingPuzzleIdProcedure is the fully-qualified name of the
	// PuzzleService's GetNextClosestRatingPuzzleId RPC.
	PuzzleServiceGetNextClosestRatingPuzzleIdProcedure = "/puzzle_service.PuzzleService/GetNextClosestRatingPuzzleId"
	// PuzzleServiceGetPuzzleProcedure is the fully-qualified name of the PuzzleService's GetPuzzle RPC.
	PuzzleServiceGetPuzzleProcedure = "/puzzle_service.PuzzleService/GetPuzzle"
	// PuzzleServiceSubmitAnswerProcedure is the fully-qualified name of the PuzzleService's
	// SubmitAnswer RPC.
	PuzzleServiceSubmitAnswerProcedure = "/puzzle_service.PuzzleService/SubmitAnswer"
	// PuzzleServiceGetPuzzleAnswerProcedure is the fully-qualified name of the PuzzleService's
	// GetPuzzleAnswer RPC.
	PuzzleServiceGetPuzzleAnswerProcedure = "/puzzle_service.PuzzleService/GetPuzzleAnswer"
	// PuzzleServiceGetPreviousPuzzleIdProcedure is the fully-qualified name of the PuzzleService's
	// GetPreviousPuzzleId RPC.
	PuzzleServiceGetPreviousPuzzleIdProcedure = "/puzzle_service.PuzzleService/GetPreviousPuzzleId"
	// PuzzleServiceSetPuzzleVoteProcedure is the fully-qualified name of the PuzzleService's
	// SetPuzzleVote RPC.
	PuzzleServiceSetPuzzleVoteProcedure = "/puzzle_service.PuzzleService/SetPuzzleVote"
	// PuzzleServiceStartPuzzleGenJobProcedure is the fully-qualified name of the PuzzleService's
	// StartPuzzleGenJob RPC.
	PuzzleServiceStartPuzzleGenJobProcedure = "/puzzle_service.PuzzleService/StartPuzzleGenJob"
	// PuzzleServiceGetPuzzleJobLogsProcedure is the fully-qualified name of the PuzzleService's
	// GetPuzzleJobLogs RPC.
	PuzzleServiceGetPuzzleJobLogsProcedure = "/puzzle_service.PuzzleService/GetPuzzleJobLogs"
)

// PuzzleServiceClient is a client for the puzzle_service.PuzzleService service.
type PuzzleServiceClient interface {
	GetStartPuzzleId(context.Context, *connect.Request[puzzle_service.StartPuzzleIdRequest]) (*connect.Response[puzzle_service.StartPuzzleIdResponse], error)
	GetNextPuzzleId(context.Context, *connect.Request[puzzle_service.NextPuzzleIdRequest]) (*connect.Response[puzzle_service.NextPuzzleIdResponse], error)
	GetNextClosestRatingPuzzleId(context.Context, *connect.Request[puzzle_service.NextClosestRatingPuzzleIdRequest]) (*connect.Response[puzzle_service.NextClosestRatingPuzzleIdResponse], error)
	GetPuzzle(context.Context, *connect.Request[puzzle_service.PuzzleRequest]) (*connect.Response[puzzle_service.PuzzleResponse], error)
	SubmitAnswer(context.Context, *connect.Request[puzzle_service.SubmissionRequest]) (*connect.Response[puzzle_service.SubmissionResponse], error)
	// GetPuzzleAnswer just gets the answer of the puzzle without a submission.
	// It will not work if the user has not tried the puzzle at least once.
	GetPuzzleAnswer(context.Context, *connect.Request[puzzle_service.PuzzleRequest]) (*connect.Response[puzzle_service.AnswerResponse], error)
	GetPreviousPuzzleId(context.Context, *connect.Request[puzzle_service.PreviousPuzzleRequest]) (*connect.Response[puzzle_service.PreviousPuzzleResponse], error)
	SetPuzzleVote(context.Context, *connect.Request[puzzle_service.PuzzleVoteRequest]) (*connect.Response[puzzle_service.PuzzleVoteResponse], error)
	StartPuzzleGenJob(context.Context, *connect.Request[puzzle_service.APIPuzzleGenerationJobRequest]) (*connect.Response[puzzle_service.APIPuzzleGenerationJobResponse], error)
	GetPuzzleJobLogs(context.Context, *connect.Request[puzzle_service.PuzzleJobLogsRequest]) (*connect.Response[puzzle_service.PuzzleJobLogsResponse], error)
}

// NewPuzzleServiceClient constructs a client for the puzzle_service.PuzzleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPuzzleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PuzzleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	puzzleServiceMethods := puzzle_service.File_proto_puzzle_service_puzzle_service_proto.Services().ByName("PuzzleService").Methods()
	return &puzzleServiceClient{
		getStartPuzzleId: connect.NewClient[puzzle_service.StartPuzzleIdRequest, puzzle_service.StartPuzzleIdResponse](
			httpClient,
			baseURL+PuzzleServiceGetStartPuzzleIdProcedure,
			connect.WithSchema(puzzleServiceMethods.ByName("GetStartPuzzleId")),
			connect.WithClientOptions(opts...),
		),
		getNextPuzzleId: connect.NewClient[puzzle_service.NextPuzzleIdRequest, puzzle_service.NextPuzzleIdResponse](
			httpClient,
			baseURL+PuzzleServiceGetNextPuzzleIdProcedure,
			connect.WithSchema(puzzleServiceMethods.ByName("GetNextPuzzleId")),
			connect.WithClientOptions(opts...),
		),
		getNextClosestRatingPuzzleId: connect.NewClient[puzzle_service.NextClosestRatingPuzzleIdRequest, puzzle_service.NextClosestRatingPuzzleIdResponse](
			httpClient,
			baseURL+PuzzleServiceGetNextClosestRatingPuzzleIdProcedure,
			connect.WithSchema(puzzleServiceMethods.ByName("GetNextClosestRatingPuzzleId")),
			connect.WithClientOptions(opts...),
		),
		getPuzzle: connect.NewClient[puzzle_service.PuzzleRequest, puzzle_service.PuzzleResponse](
			httpClient,
			baseURL+PuzzleServiceGetPuzzleProcedure,
			connect.WithSchema(puzzleServiceMethods.ByName("GetPuzzle")),
			connect.WithClientOptions(opts...),
		),
		submitAnswer: connect.NewClient[puzzle_service.SubmissionRequest, puzzle_service.SubmissionResponse](
			httpClient,
			baseURL+PuzzleServiceSubmitAnswerProcedure,
			connect.WithSchema(puzzleServiceMethods.ByName("SubmitAnswer")),
			connect.WithClientOptions(opts...),
		),
		getPuzzleAnswer: connect.NewClient[puzzle_service.PuzzleRequest, puzzle_service.AnswerResponse](
			httpClient,
			baseURL+PuzzleServiceGetPuzzleAnswerProcedure,
			connect.WithSchema(puzzleServiceMethods.ByName("GetPuzzleAnswer")),
			connect.WithClientOptions(opts...),
		),
		getPreviousPuzzleId: connect.NewClient[puzzle_service.PreviousPuzzleRequest, puzzle_service.PreviousPuzzleResponse](
			httpClient,
			baseURL+PuzzleServiceGetPreviousPuzzleIdProcedure,
			connect.WithSchema(puzzleServiceMethods.ByName("GetPreviousPuzzleId")),
			connect.WithClientOptions(opts...),
		),
		setPuzzleVote: connect.NewClient[puzzle_service.PuzzleVoteRequest, puzzle_service.PuzzleVoteResponse](
			httpClient,
			baseURL+PuzzleServiceSetPuzzleVoteProcedure,
			connect.WithSchema(puzzleServiceMethods.ByName("SetPuzzleVote")),
			connect.WithClientOptions(opts...),
		),
		startPuzzleGenJob: connect.NewClient[puzzle_service.APIPuzzleGenerationJobRequest, puzzle_service.APIPuzzleGenerationJobResponse](
			httpClient,
			baseURL+PuzzleServiceStartPuzzleGenJobProcedure,
			connect.WithSchema(puzzleServiceMethods.ByName("StartPuzzleGenJob")),
			connect.WithClientOptions(opts...),
		),
		getPuzzleJobLogs: connect.NewClient[puzzle_service.PuzzleJobLogsRequest, puzzle_service.PuzzleJobLogsResponse](
			httpClient,
			baseURL+PuzzleServiceGetPuzzleJobLogsProcedure,
			connect.WithSchema(puzzleServiceMethods.ByName("GetPuzzleJobLogs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// puzzleServiceClient implements PuzzleServiceClient.
type puzzleServiceClient struct {
	getStartPuzzleId             *connect.Client[puzzle_service.StartPuzzleIdRequest, puzzle_service.StartPuzzleIdResponse]
	getNextPuzzleId              *connect.Client[puzzle_service.NextPuzzleIdRequest, puzzle_service.NextPuzzleIdResponse]
	getNextClosestRatingPuzzleId *connect.Client[puzzle_service.NextClosestRatingPuzzleIdRequest, puzzle_service.NextClosestRatingPuzzleIdResponse]
	getPuzzle                    *connect.Client[puzzle_service.PuzzleRequest, puzzle_service.PuzzleResponse]
	submitAnswer                 *connect.Client[puzzle_service.SubmissionRequest, puzzle_service.SubmissionResponse]
	getPuzzleAnswer              *connect.Client[puzzle_service.PuzzleRequest, puzzle_service.AnswerResponse]
	getPreviousPuzzleId          *connect.Client[puzzle_service.PreviousPuzzleRequest, puzzle_service.PreviousPuzzleResponse]
	setPuzzleVote                *connect.Client[puzzle_service.PuzzleVoteRequest, puzzle_service.PuzzleVoteResponse]
	startPuzzleGenJob            *connect.Client[puzzle_service.APIPuzzleGenerationJobRequest, puzzle_service.APIPuzzleGenerationJobResponse]
	getPuzzleJobLogs             *connect.Client[puzzle_service.PuzzleJobLogsRequest, puzzle_service.PuzzleJobLogsResponse]
}

// GetStartPuzzleId calls puzzle_service.PuzzleService.GetStartPuzzleId.
func (c *puzzleServiceClient) GetStartPuzzleId(ctx context.Context, req *connect.Request[puzzle_service.StartPuzzleIdRequest]) (*connect.Response[puzzle_service.StartPuzzleIdResponse], error) {
	return c.getStartPuzzleId.CallUnary(ctx, req)
}

// GetNextPuzzleId calls puzzle_service.PuzzleService.GetNextPuzzleId.
func (c *puzzleServiceClient) GetNextPuzzleId(ctx context.Context, req *connect.Request[puzzle_service.NextPuzzleIdRequest]) (*connect.Response[puzzle_service.NextPuzzleIdResponse], error) {
	return c.getNextPuzzleId.CallUnary(ctx, req)
}

// GetNextClosestRatingPuzzleId calls puzzle_service.PuzzleService.GetNextClosestRatingPuzzleId.
func (c *puzzleServiceClient) GetNextClosestRatingPuzzleId(ctx context.Context, req *connect.Request[puzzle_service.NextClosestRatingPuzzleIdRequest]) (*connect.Response[puzzle_service.NextClosestRatingPuzzleIdResponse], error) {
	return c.getNextClosestRatingPuzzleId.CallUnary(ctx, req)
}

// GetPuzzle calls puzzle_service.PuzzleService.GetPuzzle.
func (c *puzzleServiceClient) GetPuzzle(ctx context.Context, req *connect.Request[puzzle_service.PuzzleRequest]) (*connect.Response[puzzle_service.PuzzleResponse], error) {
	return c.getPuzzle.CallUnary(ctx, req)
}

// SubmitAnswer calls puzzle_service.PuzzleService.SubmitAnswer.
func (c *puzzleServiceClient) SubmitAnswer(ctx context.Context, req *connect.Request[puzzle_service.SubmissionRequest]) (*connect.Response[puzzle_service.SubmissionResponse], error) {
	return c.submitAnswer.CallUnary(ctx, req)
}

// GetPuzzleAnswer calls puzzle_service.PuzzleService.GetPuzzleAnswer.
func (c *puzzleServiceClient) GetPuzzleAnswer(ctx context.Context, req *connect.Request[puzzle_service.PuzzleRequest]) (*connect.Response[puzzle_service.AnswerResponse], error) {
	return c.getPuzzleAnswer.CallUnary(ctx, req)
}

// GetPreviousPuzzleId calls puzzle_service.PuzzleService.GetPreviousPuzzleId.
func (c *puzzleServiceClient) GetPreviousPuzzleId(ctx context.Context, req *connect.Request[puzzle_service.PreviousPuzzleRequest]) (*connect.Response[puzzle_service.PreviousPuzzleResponse], error) {
	return c.getPreviousPuzzleId.CallUnary(ctx, req)
}

// SetPuzzleVote calls puzzle_service.PuzzleService.SetPuzzleVote.
func (c *puzzleServiceClient) SetPuzzleVote(ctx context.Context, req *connect.Request[puzzle_service.PuzzleVoteRequest]) (*connect.Response[puzzle_service.PuzzleVoteResponse], error) {
	return c.setPuzzleVote.CallUnary(ctx, req)
}

// StartPuzzleGenJob calls puzzle_service.PuzzleService.StartPuzzleGenJob.
func (c *puzzleServiceClient) StartPuzzleGenJob(ctx context.Context, req *connect.Request[puzzle_service.APIPuzzleGenerationJobRequest]) (*connect.Response[puzzle_service.APIPuzzleGenerationJobResponse], error) {
	return c.startPuzzleGenJob.CallUnary(ctx, req)
}

// GetPuzzleJobLogs calls puzzle_service.PuzzleService.GetPuzzleJobLogs.
func (c *puzzleServiceClient) GetPuzzleJobLogs(ctx context.Context, req *connect.Request[puzzle_service.PuzzleJobLogsRequest]) (*connect.Response[puzzle_service.PuzzleJobLogsResponse], error) {
	return c.getPuzzleJobLogs.CallUnary(ctx, req)
}

// PuzzleServiceHandler is an implementation of the puzzle_service.PuzzleService service.
type PuzzleServiceHandler interface {
	GetStartPuzzleId(context.Context, *connect.Request[puzzle_service.StartPuzzleIdRequest]) (*connect.Response[puzzle_service.StartPuzzleIdResponse], error)
	GetNextPuzzleId(context.Context, *connect.Request[puzzle_service.NextPuzzleIdRequest]) (*connect.Response[puzzle_service.NextPuzzleIdResponse], error)
	GetNextClosestRatingPuzzleId(context.Context, *connect.Request[puzzle_service.NextClosestRatingPuzzleIdRequest]) (*connect.Response[puzzle_service.NextClosestRatingPuzzleIdResponse], error)
	GetPuzzle(context.Context, *connect.Request[puzzle_service.PuzzleRequest]) (*connect.Response[puzzle_service.PuzzleResponse], error)
	SubmitAnswer(context.Context, *connect.Request[puzzle_service.SubmissionRequest]) (*connect.Response[puzzle_service.SubmissionResponse], error)
	// GetPuzzleAnswer just gets the answer of the puzzle without a submission.
	// It will not work if the user has not tried the puzzle at least once.
	GetPuzzleAnswer(context.Context, *connect.Request[puzzle_service.PuzzleRequest]) (*connect.Response[puzzle_service.AnswerResponse], error)
	GetPreviousPuzzleId(context.Context, *connect.Request[puzzle_service.PreviousPuzzleRequest]) (*connect.Response[puzzle_service.PreviousPuzzleResponse], error)
	SetPuzzleVote(context.Context, *connect.Request[puzzle_service.PuzzleVoteRequest]) (*connect.Response[puzzle_service.PuzzleVoteResponse], error)
	StartPuzzleGenJob(context.Context, *connect.Request[puzzle_service.APIPuzzleGenerationJobRequest]) (*connect.Response[puzzle_service.APIPuzzleGenerationJobResponse], error)
	GetPuzzleJobLogs(context.Context, *connect.Request[puzzle_service.PuzzleJobLogsRequest]) (*connect.Response[puzzle_service.PuzzleJobLogsResponse], error)
}

// NewPuzzleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPuzzleServiceHandler(svc PuzzleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	puzzleServiceMethods := puzzle_service.File_proto_puzzle_service_puzzle_service_proto.Services().ByName("PuzzleService").Methods()
	puzzleServiceGetStartPuzzleIdHandler := connect.NewUnaryHandler(
		PuzzleServiceGetStartPuzzleIdProcedure,
		svc.GetStartPuzzleId,
		connect.WithSchema(puzzleServiceMethods.ByName("GetStartPuzzleId")),
		connect.WithHandlerOptions(opts...),
	)
	puzzleServiceGetNextPuzzleIdHandler := connect.NewUnaryHandler(
		PuzzleServiceGetNextPuzzleIdProcedure,
		svc.GetNextPuzzleId,
		connect.WithSchema(puzzleServiceMethods.ByName("GetNextPuzzleId")),
		connect.WithHandlerOptions(opts...),
	)
	puzzleServiceGetNextClosestRatingPuzzleIdHandler := connect.NewUnaryHandler(
		PuzzleServiceGetNextClosestRatingPuzzleIdProcedure,
		svc.GetNextClosestRatingPuzzleId,
		connect.WithSchema(puzzleServiceMethods.ByName("GetNextClosestRatingPuzzleId")),
		connect.WithHandlerOptions(opts...),
	)
	puzzleServiceGetPuzzleHandler := connect.NewUnaryHandler(
		PuzzleServiceGetPuzzleProcedure,
		svc.GetPuzzle,
		connect.WithSchema(puzzleServiceMethods.ByName("GetPuzzle")),
		connect.WithHandlerOptions(opts...),
	)
	puzzleServiceSubmitAnswerHandler := connect.NewUnaryHandler(
		PuzzleServiceSubmitAnswerProcedure,
		svc.SubmitAnswer,
		connect.WithSchema(puzzleServiceMethods.ByName("SubmitAnswer")),
		connect.WithHandlerOptions(opts...),
	)
	puzzleServiceGetPuzzleAnswerHandler := connect.NewUnaryHandler(
		PuzzleServiceGetPuzzleAnswerProcedure,
		svc.GetPuzzleAnswer,
		connect.WithSchema(puzzleServiceMethods.ByName("GetPuzzleAnswer")),
		connect.WithHandlerOptions(opts...),
	)
	puzzleServiceGetPreviousPuzzleIdHandler := connect.NewUnaryHandler(
		PuzzleServiceGetPreviousPuzzleIdProcedure,
		svc.GetPreviousPuzzleId,
		connect.WithSchema(puzzleServiceMethods.ByName("GetPreviousPuzzleId")),
		connect.WithHandlerOptions(opts...),
	)
	puzzleServiceSetPuzzleVoteHandler := connect.NewUnaryHandler(
		PuzzleServiceSetPuzzleVoteProcedure,
		svc.SetPuzzleVote,
		connect.WithSchema(puzzleServiceMethods.ByName("SetPuzzleVote")),
		connect.WithHandlerOptions(opts...),
	)
	puzzleServiceStartPuzzleGenJobHandler := connect.NewUnaryHandler(
		PuzzleServiceStartPuzzleGenJobProcedure,
		svc.StartPuzzleGenJob,
		connect.WithSchema(puzzleServiceMethods.ByName("StartPuzzleGenJob")),
		connect.WithHandlerOptions(opts...),
	)
	puzzleServiceGetPuzzleJobLogsHandler := connect.NewUnaryHandler(
		PuzzleServiceGetPuzzleJobLogsProcedure,
		svc.GetPuzzleJobLogs,
		connect.WithSchema(puzzleServiceMethods.ByName("GetPuzzleJobLogs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/puzzle_service.PuzzleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PuzzleServiceGetStartPuzzleIdProcedure:
			puzzleServiceGetStartPuzzleIdHandler.ServeHTTP(w, r)
		case PuzzleServiceGetNextPuzzleIdProcedure:
			puzzleServiceGetNextPuzzleIdHandler.ServeHTTP(w, r)
		case PuzzleServiceGetNextClosestRatingPuzzleIdProcedure:
			puzzleServiceGetNextClosestRatingPuzzleIdHandler.ServeHTTP(w, r)
		case PuzzleServiceGetPuzzleProcedure:
			puzzleServiceGetPuzzleHandler.ServeHTTP(w, r)
		case PuzzleServiceSubmitAnswerProcedure:
			puzzleServiceSubmitAnswerHandler.ServeHTTP(w, r)
		case PuzzleServiceGetPuzzleAnswerProcedure:
			puzzleServiceGetPuzzleAnswerHandler.ServeHTTP(w, r)
		case PuzzleServiceGetPreviousPuzzleIdProcedure:
			puzzleServiceGetPreviousPuzzleIdHandler.ServeHTTP(w, r)
		case PuzzleServiceSetPuzzleVoteProcedure:
			puzzleServiceSetPuzzleVoteHandler.ServeHTTP(w, r)
		case PuzzleServiceStartPuzzleGenJobProcedure:
			puzzleServiceStartPuzzleGenJobHandler.ServeHTTP(w, r)
		case PuzzleServiceGetPuzzleJobLogsProcedure:
			puzzleServiceGetPuzzleJobLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPuzzleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPuzzleServiceHandler struct{}

func (UnimplementedPuzzleServiceHandler) GetStartPuzzleId(context.Context, *connect.Request[puzzle_service.StartPuzzleIdRequest]) (*connect.Response[puzzle_service.StartPuzzleIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("puzzle_service.PuzzleService.GetStartPuzzleId is not implemented"))
}

func (UnimplementedPuzzleServiceHandler) GetNextPuzzleId(context.Context, *connect.Request[puzzle_service.NextPuzzleIdRequest]) (*connect.Response[puzzle_service.NextPuzzleIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("puzzle_service.PuzzleService.GetNextPuzzleId is not implemented"))
}

func (UnimplementedPuzzleServiceHandler) GetNextClosestRatingPuzzleId(context.Context, *connect.Request[puzzle_service.NextClosestRatingPuzzleIdRequest]) (*connect.Response[puzzle_service.NextClosestRatingPuzzleIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("puzzle_service.PuzzleService.GetNextClosestRatingPuzzleId is not implemented"))
}

func (UnimplementedPuzzleServiceHandler) GetPuzzle(context.Context, *connect.Request[puzzle_service.PuzzleRequest]) (*connect.Response[puzzle_service.PuzzleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("puzzle_service.PuzzleService.GetPuzzle is not implemented"))
}

func (UnimplementedPuzzleServiceHandler) SubmitAnswer(context.Context, *connect.Request[puzzle_service.SubmissionRequest]) (*connect.Response[puzzle_service.SubmissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("puzzle_service.PuzzleService.SubmitAnswer is not implemented"))
}

func (UnimplementedPuzzleServiceHandler) GetPuzzleAnswer(context.Context, *connect.Request[puzzle_service.PuzzleRequest]) (*connect.Response[puzzle_service.AnswerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("puzzle_service.PuzzleService.GetPuzzleAnswer is not implemented"))
}

func (UnimplementedPuzzleServiceHandler) GetPreviousPuzzleId(context.Context, *connect.Request[puzzle_service.PreviousPuzzleRequest]) (*connect.Response[puzzle_service.PreviousPuzzleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("puzzle_service.PuzzleService.GetPreviousPuzzleId is not implemented"))
}

func (UnimplementedPuzzleServiceHandler) SetPuzzleVote(context.Context, *connect.Request[puzzle_service.PuzzleVoteRequest]) (*connect.Response[puzzle_service.PuzzleVoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("puzzle_service.PuzzleService.SetPuzzleVote is not implemented"))
}

func (UnimplementedPuzzleServiceHandler) StartPuzzleGenJob(context.Context, *connect.Request[puzzle_service.APIPuzzleGenerationJobRequest]) (*connect.Response[puzzle_service.APIPuzzleGenerationJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("puzzle_service.PuzzleService.StartPuzzleGenJob is not implemented"))
}

func (UnimplementedPuzzleServiceHandler) GetPuzzleJobLogs(context.Context, *connect.Request[puzzle_service.PuzzleJobLogsRequest]) (*connect.Response[puzzle_service.PuzzleJobLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("puzzle_service.PuzzleService.GetPuzzleJobLogs is not implemented"))
}
