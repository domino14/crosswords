// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: api/proto/puzzle_service/puzzle_service.proto

package puzzle_service

import (
	ipc "github.com/domino14/liwords/rpc/api/proto/ipc"
	macondo "github.com/domino14/macondo/gen/api/proto/macondo"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PuzzleQueryResult int32

const (
	PuzzleQueryResult_UNSEEN     PuzzleQueryResult = 0
	PuzzleQueryResult_UNRATED    PuzzleQueryResult = 1
	PuzzleQueryResult_UNFINISHED PuzzleQueryResult = 2
	PuzzleQueryResult_EXHAUSTED  PuzzleQueryResult = 3
	PuzzleQueryResult_RANDOM     PuzzleQueryResult = 4
	PuzzleQueryResult_START      PuzzleQueryResult = 5
)

// Enum value maps for PuzzleQueryResult.
var (
	PuzzleQueryResult_name = map[int32]string{
		0: "UNSEEN",
		1: "UNRATED",
		2: "UNFINISHED",
		3: "EXHAUSTED",
		4: "RANDOM",
		5: "START",
	}
	PuzzleQueryResult_value = map[string]int32{
		"UNSEEN":     0,
		"UNRATED":    1,
		"UNFINISHED": 2,
		"EXHAUSTED":  3,
		"RANDOM":     4,
		"START":      5,
	}
)

func (x PuzzleQueryResult) Enum() *PuzzleQueryResult {
	p := new(PuzzleQueryResult)
	*p = x
	return p
}

func (x PuzzleQueryResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PuzzleQueryResult) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_puzzle_service_puzzle_service_proto_enumTypes[0].Descriptor()
}

func (PuzzleQueryResult) Type() protoreflect.EnumType {
	return &file_api_proto_puzzle_service_puzzle_service_proto_enumTypes[0]
}

func (x PuzzleQueryResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PuzzleQueryResult.Descriptor instead.
func (PuzzleQueryResult) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{0}
}

type PuzzleStatus int32

const (
	PuzzleStatus_UNANSWERED PuzzleStatus = 0
	PuzzleStatus_CORRECT    PuzzleStatus = 1
	PuzzleStatus_INCORRECT  PuzzleStatus = 2
)

// Enum value maps for PuzzleStatus.
var (
	PuzzleStatus_name = map[int32]string{
		0: "UNANSWERED",
		1: "CORRECT",
		2: "INCORRECT",
	}
	PuzzleStatus_value = map[string]int32{
		"UNANSWERED": 0,
		"CORRECT":    1,
		"INCORRECT":  2,
	}
)

func (x PuzzleStatus) Enum() *PuzzleStatus {
	p := new(PuzzleStatus)
	*p = x
	return p
}

func (x PuzzleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PuzzleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_puzzle_service_puzzle_service_proto_enumTypes[1].Descriptor()
}

func (PuzzleStatus) Type() protoreflect.EnumType {
	return &file_api_proto_puzzle_service_puzzle_service_proto_enumTypes[1]
}

func (x PuzzleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PuzzleStatus.Descriptor instead.
func (PuzzleStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{1}
}

type StartPuzzleIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon string `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
}

func (x *StartPuzzleIdRequest) Reset() {
	*x = StartPuzzleIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartPuzzleIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPuzzleIdRequest) ProtoMessage() {}

func (x *StartPuzzleIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPuzzleIdRequest.ProtoReflect.Descriptor instead.
func (*StartPuzzleIdRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{0}
}

func (x *StartPuzzleIdRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

type StartPuzzleIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PuzzleId    string            `protobuf:"bytes,1,opt,name=puzzle_id,json=puzzleId,proto3" json:"puzzle_id,omitempty"`
	QueryResult PuzzleQueryResult `protobuf:"varint,2,opt,name=query_result,json=queryResult,proto3,enum=puzzle_service.PuzzleQueryResult" json:"query_result,omitempty"`
}

func (x *StartPuzzleIdResponse) Reset() {
	*x = StartPuzzleIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartPuzzleIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPuzzleIdResponse) ProtoMessage() {}

func (x *StartPuzzleIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPuzzleIdResponse.ProtoReflect.Descriptor instead.
func (*StartPuzzleIdResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{1}
}

func (x *StartPuzzleIdResponse) GetPuzzleId() string {
	if x != nil {
		return x.PuzzleId
	}
	return ""
}

func (x *StartPuzzleIdResponse) GetQueryResult() PuzzleQueryResult {
	if x != nil {
		return x.QueryResult
	}
	return PuzzleQueryResult_UNSEEN
}

type NextPuzzleIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon string `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
}

func (x *NextPuzzleIdRequest) Reset() {
	*x = NextPuzzleIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextPuzzleIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextPuzzleIdRequest) ProtoMessage() {}

func (x *NextPuzzleIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextPuzzleIdRequest.ProtoReflect.Descriptor instead.
func (*NextPuzzleIdRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{2}
}

func (x *NextPuzzleIdRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

type NextPuzzleIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PuzzleId    string            `protobuf:"bytes,1,opt,name=puzzle_id,json=puzzleId,proto3" json:"puzzle_id,omitempty"`
	QueryResult PuzzleQueryResult `protobuf:"varint,2,opt,name=query_result,json=queryResult,proto3,enum=puzzle_service.PuzzleQueryResult" json:"query_result,omitempty"`
}

func (x *NextPuzzleIdResponse) Reset() {
	*x = NextPuzzleIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextPuzzleIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextPuzzleIdResponse) ProtoMessage() {}

func (x *NextPuzzleIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextPuzzleIdResponse.ProtoReflect.Descriptor instead.
func (*NextPuzzleIdResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{3}
}

func (x *NextPuzzleIdResponse) GetPuzzleId() string {
	if x != nil {
		return x.PuzzleId
	}
	return ""
}

func (x *NextPuzzleIdResponse) GetQueryResult() PuzzleQueryResult {
	if x != nil {
		return x.QueryResult
	}
	return PuzzleQueryResult_UNSEEN
}

type NextClosestRatingPuzzleIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon string `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
}

func (x *NextClosestRatingPuzzleIdRequest) Reset() {
	*x = NextClosestRatingPuzzleIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextClosestRatingPuzzleIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextClosestRatingPuzzleIdRequest) ProtoMessage() {}

func (x *NextClosestRatingPuzzleIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextClosestRatingPuzzleIdRequest.ProtoReflect.Descriptor instead.
func (*NextClosestRatingPuzzleIdRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{4}
}

func (x *NextClosestRatingPuzzleIdRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

type NextClosestRatingPuzzleIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PuzzleId    string            `protobuf:"bytes,1,opt,name=puzzle_id,json=puzzleId,proto3" json:"puzzle_id,omitempty"`
	QueryResult PuzzleQueryResult `protobuf:"varint,2,opt,name=query_result,json=queryResult,proto3,enum=puzzle_service.PuzzleQueryResult" json:"query_result,omitempty"`
}

func (x *NextClosestRatingPuzzleIdResponse) Reset() {
	*x = NextClosestRatingPuzzleIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextClosestRatingPuzzleIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextClosestRatingPuzzleIdResponse) ProtoMessage() {}

func (x *NextClosestRatingPuzzleIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextClosestRatingPuzzleIdResponse.ProtoReflect.Descriptor instead.
func (*NextClosestRatingPuzzleIdResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{5}
}

func (x *NextClosestRatingPuzzleIdResponse) GetPuzzleId() string {
	if x != nil {
		return x.PuzzleId
	}
	return ""
}

func (x *NextClosestRatingPuzzleIdResponse) GetQueryResult() PuzzleQueryResult {
	if x != nil {
		return x.QueryResult
	}
	return PuzzleQueryResult_UNSEEN
}

type PuzzleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PuzzleId string `protobuf:"bytes,1,opt,name=puzzle_id,json=puzzleId,proto3" json:"puzzle_id,omitempty"`
}

func (x *PuzzleRequest) Reset() {
	*x = PuzzleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuzzleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuzzleRequest) ProtoMessage() {}

func (x *PuzzleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuzzleRequest.ProtoReflect.Descriptor instead.
func (*PuzzleRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{6}
}

func (x *PuzzleRequest) GetPuzzleId() string {
	if x != nil {
		return x.PuzzleId
	}
	return ""
}

type AnswerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrectAnswer    *macondo.GameEvent     `protobuf:"bytes,1,opt,name=correct_answer,json=correctAnswer,proto3" json:"correct_answer,omitempty"`
	Status           PuzzleStatus           `protobuf:"varint,2,opt,name=status,proto3,enum=puzzle_service.PuzzleStatus" json:"status,omitempty"`
	Attempts         int32                  `protobuf:"varint,3,opt,name=attempts,proto3" json:"attempts,omitempty"`
	GameId           string                 `protobuf:"bytes,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	TurnNumber       int32                  `protobuf:"varint,5,opt,name=turn_number,json=turnNumber,proto3" json:"turn_number,omitempty"`
	AfterText        string                 `protobuf:"bytes,6,opt,name=after_text,json=afterText,proto3" json:"after_text,omitempty"`
	NewUserRating    int32                  `protobuf:"varint,7,opt,name=new_user_rating,json=newUserRating,proto3" json:"new_user_rating,omitempty"`
	NewPuzzleRating  int32                  `protobuf:"varint,8,opt,name=new_puzzle_rating,json=newPuzzleRating,proto3" json:"new_puzzle_rating,omitempty"`
	FirstAttemptTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=first_attempt_time,json=firstAttemptTime,proto3" json:"first_attempt_time,omitempty"`
	LastAttemptTime  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_attempt_time,json=lastAttemptTime,proto3" json:"last_attempt_time,omitempty"`
}

func (x *AnswerResponse) Reset() {
	*x = AnswerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerResponse) ProtoMessage() {}

func (x *AnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerResponse.ProtoReflect.Descriptor instead.
func (*AnswerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{7}
}

func (x *AnswerResponse) GetCorrectAnswer() *macondo.GameEvent {
	if x != nil {
		return x.CorrectAnswer
	}
	return nil
}

func (x *AnswerResponse) GetStatus() PuzzleStatus {
	if x != nil {
		return x.Status
	}
	return PuzzleStatus_UNANSWERED
}

func (x *AnswerResponse) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *AnswerResponse) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *AnswerResponse) GetTurnNumber() int32 {
	if x != nil {
		return x.TurnNumber
	}
	return 0
}

func (x *AnswerResponse) GetAfterText() string {
	if x != nil {
		return x.AfterText
	}
	return ""
}

func (x *AnswerResponse) GetNewUserRating() int32 {
	if x != nil {
		return x.NewUserRating
	}
	return 0
}

func (x *AnswerResponse) GetNewPuzzleRating() int32 {
	if x != nil {
		return x.NewPuzzleRating
	}
	return 0
}

func (x *AnswerResponse) GetFirstAttemptTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstAttemptTime
	}
	return nil
}

func (x *AnswerResponse) GetLastAttemptTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAttemptTime
	}
	return nil
}

type PuzzleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History    *macondo.GameHistory `protobuf:"bytes,1,opt,name=history,proto3" json:"history,omitempty"`
	BeforeText string               `protobuf:"bytes,2,opt,name=before_text,json=beforeText,proto3" json:"before_text,omitempty"`
	Answer     *AnswerResponse      `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *PuzzleResponse) Reset() {
	*x = PuzzleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuzzleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuzzleResponse) ProtoMessage() {}

func (x *PuzzleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuzzleResponse.ProtoReflect.Descriptor instead.
func (*PuzzleResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{8}
}

func (x *PuzzleResponse) GetHistory() *macondo.GameHistory {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *PuzzleResponse) GetBeforeText() string {
	if x != nil {
		return x.BeforeText
	}
	return ""
}

func (x *PuzzleResponse) GetAnswer() *AnswerResponse {
	if x != nil {
		return x.Answer
	}
	return nil
}

type SubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PuzzleId     string                   `protobuf:"bytes,1,opt,name=puzzle_id,json=puzzleId,proto3" json:"puzzle_id,omitempty"`
	Answer       *ipc.ClientGameplayEvent `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	ShowSolution bool                     `protobuf:"varint,3,opt,name=show_solution,json=showSolution,proto3" json:"show_solution,omitempty"`
}

func (x *SubmissionRequest) Reset() {
	*x = SubmissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionRequest) ProtoMessage() {}

func (x *SubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionRequest.ProtoReflect.Descriptor instead.
func (*SubmissionRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{9}
}

func (x *SubmissionRequest) GetPuzzleId() string {
	if x != nil {
		return x.PuzzleId
	}
	return ""
}

func (x *SubmissionRequest) GetAnswer() *ipc.ClientGameplayEvent {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *SubmissionRequest) GetShowSolution() bool {
	if x != nil {
		return x.ShowSolution
	}
	return false
}

type SubmissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIsCorrect bool            `protobuf:"varint,1,opt,name=user_is_correct,json=userIsCorrect,proto3" json:"user_is_correct,omitempty"`
	Answer        *AnswerResponse `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *SubmissionResponse) Reset() {
	*x = SubmissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionResponse) ProtoMessage() {}

func (x *SubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionResponse.ProtoReflect.Descriptor instead.
func (*SubmissionResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{10}
}

func (x *SubmissionResponse) GetUserIsCorrect() bool {
	if x != nil {
		return x.UserIsCorrect
	}
	return false
}

func (x *SubmissionResponse) GetAnswer() *AnswerResponse {
	if x != nil {
		return x.Answer
	}
	return nil
}

type PreviousPuzzleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PuzzleId string `protobuf:"bytes,1,opt,name=puzzle_id,json=puzzleId,proto3" json:"puzzle_id,omitempty"`
}

func (x *PreviousPuzzleRequest) Reset() {
	*x = PreviousPuzzleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviousPuzzleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviousPuzzleRequest) ProtoMessage() {}

func (x *PreviousPuzzleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviousPuzzleRequest.ProtoReflect.Descriptor instead.
func (*PreviousPuzzleRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{11}
}

func (x *PreviousPuzzleRequest) GetPuzzleId() string {
	if x != nil {
		return x.PuzzleId
	}
	return ""
}

type PreviousPuzzleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PuzzleId string `protobuf:"bytes,1,opt,name=puzzle_id,json=puzzleId,proto3" json:"puzzle_id,omitempty"`
}

func (x *PreviousPuzzleResponse) Reset() {
	*x = PreviousPuzzleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviousPuzzleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviousPuzzleResponse) ProtoMessage() {}

func (x *PreviousPuzzleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviousPuzzleResponse.ProtoReflect.Descriptor instead.
func (*PreviousPuzzleResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{12}
}

func (x *PreviousPuzzleResponse) GetPuzzleId() string {
	if x != nil {
		return x.PuzzleId
	}
	return ""
}

type PuzzleVoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PuzzleId string `protobuf:"bytes,1,opt,name=puzzle_id,json=puzzleId,proto3" json:"puzzle_id,omitempty"`
	Vote     int32  `protobuf:"varint,2,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *PuzzleVoteRequest) Reset() {
	*x = PuzzleVoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuzzleVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuzzleVoteRequest) ProtoMessage() {}

func (x *PuzzleVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuzzleVoteRequest.ProtoReflect.Descriptor instead.
func (*PuzzleVoteRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{13}
}

func (x *PuzzleVoteRequest) GetPuzzleId() string {
	if x != nil {
		return x.PuzzleId
	}
	return ""
}

func (x *PuzzleVoteRequest) GetVote() int32 {
	if x != nil {
		return x.Vote
	}
	return 0
}

type PuzzleVoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PuzzleVoteResponse) Reset() {
	*x = PuzzleVoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuzzleVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuzzleVoteResponse) ProtoMessage() {}

func (x *PuzzleVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuzzleVoteResponse.ProtoReflect.Descriptor instead.
func (*PuzzleVoteResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{14}
}

type PuzzleGenerationJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotVsBot               bool                             `protobuf:"varint,1,opt,name=bot_vs_bot,json=botVsBot,proto3" json:"bot_vs_bot,omitempty"`
	Lexicon                string                           `protobuf:"bytes,2,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	LetterDistribution     string                           `protobuf:"bytes,3,opt,name=letter_distribution,json=letterDistribution,proto3" json:"letter_distribution,omitempty"`
	SqlOffset              int32                            `protobuf:"varint,4,opt,name=sql_offset,json=sqlOffset,proto3" json:"sql_offset,omitempty"`
	GameConsiderationLimit int32                            `protobuf:"varint,5,opt,name=game_consideration_limit,json=gameConsiderationLimit,proto3" json:"game_consideration_limit,omitempty"`
	GameCreationLimit      int32                            `protobuf:"varint,6,opt,name=game_creation_limit,json=gameCreationLimit,proto3" json:"game_creation_limit,omitempty"`
	Request                *macondo.PuzzleGenerationRequest `protobuf:"bytes,7,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *PuzzleGenerationJobRequest) Reset() {
	*x = PuzzleGenerationJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuzzleGenerationJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuzzleGenerationJobRequest) ProtoMessage() {}

func (x *PuzzleGenerationJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuzzleGenerationJobRequest.ProtoReflect.Descriptor instead.
func (*PuzzleGenerationJobRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{15}
}

func (x *PuzzleGenerationJobRequest) GetBotVsBot() bool {
	if x != nil {
		return x.BotVsBot
	}
	return false
}

func (x *PuzzleGenerationJobRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *PuzzleGenerationJobRequest) GetLetterDistribution() string {
	if x != nil {
		return x.LetterDistribution
	}
	return ""
}

func (x *PuzzleGenerationJobRequest) GetSqlOffset() int32 {
	if x != nil {
		return x.SqlOffset
	}
	return 0
}

func (x *PuzzleGenerationJobRequest) GetGameConsiderationLimit() int32 {
	if x != nil {
		return x.GameConsiderationLimit
	}
	return 0
}

func (x *PuzzleGenerationJobRequest) GetGameCreationLimit() int32 {
	if x != nil {
		return x.GameCreationLimit
	}
	return 0
}

func (x *PuzzleGenerationJobRequest) GetRequest() *macondo.PuzzleGenerationRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type APIPuzzleGenerationJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Started bool `protobuf:"varint,1,opt,name=started,proto3" json:"started,omitempty"`
}

func (x *APIPuzzleGenerationJobResponse) Reset() {
	*x = APIPuzzleGenerationJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIPuzzleGenerationJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIPuzzleGenerationJobResponse) ProtoMessage() {}

func (x *APIPuzzleGenerationJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIPuzzleGenerationJobResponse.ProtoReflect.Descriptor instead.
func (*APIPuzzleGenerationJobResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{16}
}

func (x *APIPuzzleGenerationJobResponse) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

type APIPuzzleGenerationJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request   *PuzzleGenerationJobRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	SecretKey string                      `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *APIPuzzleGenerationJobRequest) Reset() {
	*x = APIPuzzleGenerationJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIPuzzleGenerationJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIPuzzleGenerationJobRequest) ProtoMessage() {}

func (x *APIPuzzleGenerationJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIPuzzleGenerationJobRequest.ProtoReflect.Descriptor instead.
func (*APIPuzzleGenerationJobRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{17}
}

func (x *APIPuzzleGenerationJobRequest) GetRequest() *PuzzleGenerationJobRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *APIPuzzleGenerationJobRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type PuzzleJobLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PuzzleJobLogsRequest) Reset() {
	*x = PuzzleJobLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuzzleJobLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuzzleJobLogsRequest) ProtoMessage() {}

func (x *PuzzleJobLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuzzleJobLogsRequest.ProtoReflect.Descriptor instead.
func (*PuzzleJobLogsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{18}
}

func (x *PuzzleJobLogsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PuzzleJobLogsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type PuzzleJobLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Request     *PuzzleGenerationJobRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Fulfilled   bool                        `protobuf:"varint,3,opt,name=fulfilled,proto3" json:"fulfilled,omitempty"`
	ErrorStatus string                      `protobuf:"bytes,4,opt,name=error_status,json=errorStatus,proto3" json:"error_status,omitempty"`
	CreatedAt   *timestamppb.Timestamp      `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CompletedAt *timestamppb.Timestamp      `protobuf:"bytes,6,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
}

func (x *PuzzleJobLog) Reset() {
	*x = PuzzleJobLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuzzleJobLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuzzleJobLog) ProtoMessage() {}

func (x *PuzzleJobLog) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuzzleJobLog.ProtoReflect.Descriptor instead.
func (*PuzzleJobLog) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{19}
}

func (x *PuzzleJobLog) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PuzzleJobLog) GetRequest() *PuzzleGenerationJobRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *PuzzleJobLog) GetFulfilled() bool {
	if x != nil {
		return x.Fulfilled
	}
	return false
}

func (x *PuzzleJobLog) GetErrorStatus() string {
	if x != nil {
		return x.ErrorStatus
	}
	return ""
}

func (x *PuzzleJobLog) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PuzzleJobLog) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

type PuzzleJobLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*PuzzleJobLog `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *PuzzleJobLogsResponse) Reset() {
	*x = PuzzleJobLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuzzleJobLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuzzleJobLogsResponse) ProtoMessage() {}

func (x *PuzzleJobLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuzzleJobLogsResponse.ProtoReflect.Descriptor instead.
func (*PuzzleJobLogsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP(), []int{20}
}

func (x *PuzzleJobLogsResponse) GetLogs() []*PuzzleJobLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

var File_api_proto_puzzle_service_puzzle_service_proto protoreflect.FileDescriptor

var file_api_proto_puzzle_service_puzzle_service_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x27, 0x6d, 0x61, 0x63, 0x6f, 0x6e, 0x64, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x63, 0x6f, 0x6e, 0x64, 0x6f, 0x2f, 0x6d, 0x61, 0x63, 0x6f, 0x6e,
	0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x70, 0x63, 0x2f, 0x6f, 0x6d, 0x67, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x15, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2f, 0x0a, 0x13, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x75, 0x7a,
	0x7a, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x14, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x3c, 0x0a, 0x20, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x22,
	0x86, 0x01, 0x0a, 0x21, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2c, 0x0a, 0x0d, 0x50, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x7a,
	0x7a, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xdc, 0x03, 0x0a, 0x0e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x63, 0x6f, 0x6e, 0x64, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x66, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x63, 0x6f,
	0x6e, 0x64, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x12, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x22, 0x34, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x75, 0x7a,
	0x7a, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x44,
	0x0a, 0x11, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x76, 0x6f, 0x74, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x1a, 0x50,
	0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x6f, 0x74,
	0x5f, 0x76, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62,
	0x6f, 0x74, 0x56, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x38, 0x0a, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x61, 0x63, 0x6f, 0x6e, 0x64, 0x6f, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x1e, 0x41, 0x50, 0x49, 0x50, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x1d, 0x41, 0x50, 0x49, 0x50, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x44, 0x0a, 0x14, 0x50, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x9f, 0x02, 0x0a, 0x0c, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x4c, 0x6f,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x49, 0x0a, 0x15, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x4a, 0x6f, 0x62, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x2a, 0x62, 0x0a,
	0x11, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x53, 0x45, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55,
	0x4e, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x58, 0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41,
	0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x05, 0x2a, 0x3a, 0x0a, 0x0c, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10, 0x02, 0x32, 0xdc, 0x07,
	0x0a, 0x0d, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x5f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x23, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x30, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x12, 0x1d, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x21, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x70, 0x75, 0x7a,
	0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x25, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x56, 0x6f, 0x74, 0x65,
	0x12, 0x21, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x47, 0x65, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x2d, 0x2e, 0x70,
	0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x50,
	0x49, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x50, 0x49,
	0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x4c, 0x6f, 0x67, 0x73, 0x12,
	0x24, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x4a, 0x6f, 0x62,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3a, 0x5a, 0x38,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x6d, 0x69, 0x6e,
	0x6f, 0x31, 0x34, 0x2f, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_puzzle_service_puzzle_service_proto_rawDescOnce sync.Once
	file_api_proto_puzzle_service_puzzle_service_proto_rawDescData = file_api_proto_puzzle_service_puzzle_service_proto_rawDesc
)

func file_api_proto_puzzle_service_puzzle_service_proto_rawDescGZIP() []byte {
	file_api_proto_puzzle_service_puzzle_service_proto_rawDescOnce.Do(func() {
		file_api_proto_puzzle_service_puzzle_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_puzzle_service_puzzle_service_proto_rawDescData)
	})
	return file_api_proto_puzzle_service_puzzle_service_proto_rawDescData
}

var file_api_proto_puzzle_service_puzzle_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_proto_puzzle_service_puzzle_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_api_proto_puzzle_service_puzzle_service_proto_goTypes = []interface{}{
	(PuzzleQueryResult)(0),                    // 0: puzzle_service.PuzzleQueryResult
	(PuzzleStatus)(0),                         // 1: puzzle_service.PuzzleStatus
	(*StartPuzzleIdRequest)(nil),              // 2: puzzle_service.StartPuzzleIdRequest
	(*StartPuzzleIdResponse)(nil),             // 3: puzzle_service.StartPuzzleIdResponse
	(*NextPuzzleIdRequest)(nil),               // 4: puzzle_service.NextPuzzleIdRequest
	(*NextPuzzleIdResponse)(nil),              // 5: puzzle_service.NextPuzzleIdResponse
	(*NextClosestRatingPuzzleIdRequest)(nil),  // 6: puzzle_service.NextClosestRatingPuzzleIdRequest
	(*NextClosestRatingPuzzleIdResponse)(nil), // 7: puzzle_service.NextClosestRatingPuzzleIdResponse
	(*PuzzleRequest)(nil),                     // 8: puzzle_service.PuzzleRequest
	(*AnswerResponse)(nil),                    // 9: puzzle_service.AnswerResponse
	(*PuzzleResponse)(nil),                    // 10: puzzle_service.PuzzleResponse
	(*SubmissionRequest)(nil),                 // 11: puzzle_service.SubmissionRequest
	(*SubmissionResponse)(nil),                // 12: puzzle_service.SubmissionResponse
	(*PreviousPuzzleRequest)(nil),             // 13: puzzle_service.PreviousPuzzleRequest
	(*PreviousPuzzleResponse)(nil),            // 14: puzzle_service.PreviousPuzzleResponse
	(*PuzzleVoteRequest)(nil),                 // 15: puzzle_service.PuzzleVoteRequest
	(*PuzzleVoteResponse)(nil),                // 16: puzzle_service.PuzzleVoteResponse
	(*PuzzleGenerationJobRequest)(nil),        // 17: puzzle_service.PuzzleGenerationJobRequest
	(*APIPuzzleGenerationJobResponse)(nil),    // 18: puzzle_service.APIPuzzleGenerationJobResponse
	(*APIPuzzleGenerationJobRequest)(nil),     // 19: puzzle_service.APIPuzzleGenerationJobRequest
	(*PuzzleJobLogsRequest)(nil),              // 20: puzzle_service.PuzzleJobLogsRequest
	(*PuzzleJobLog)(nil),                      // 21: puzzle_service.PuzzleJobLog
	(*PuzzleJobLogsResponse)(nil),             // 22: puzzle_service.PuzzleJobLogsResponse
	(*macondo.GameEvent)(nil),                 // 23: macondo.GameEvent
	(*timestamppb.Timestamp)(nil),             // 24: google.protobuf.Timestamp
	(*macondo.GameHistory)(nil),               // 25: macondo.GameHistory
	(*ipc.ClientGameplayEvent)(nil),           // 26: ipc.ClientGameplayEvent
	(*macondo.PuzzleGenerationRequest)(nil),   // 27: macondo.PuzzleGenerationRequest
}
var file_api_proto_puzzle_service_puzzle_service_proto_depIdxs = []int32{
	0,  // 0: puzzle_service.StartPuzzleIdResponse.query_result:type_name -> puzzle_service.PuzzleQueryResult
	0,  // 1: puzzle_service.NextPuzzleIdResponse.query_result:type_name -> puzzle_service.PuzzleQueryResult
	0,  // 2: puzzle_service.NextClosestRatingPuzzleIdResponse.query_result:type_name -> puzzle_service.PuzzleQueryResult
	23, // 3: puzzle_service.AnswerResponse.correct_answer:type_name -> macondo.GameEvent
	1,  // 4: puzzle_service.AnswerResponse.status:type_name -> puzzle_service.PuzzleStatus
	24, // 5: puzzle_service.AnswerResponse.first_attempt_time:type_name -> google.protobuf.Timestamp
	24, // 6: puzzle_service.AnswerResponse.last_attempt_time:type_name -> google.protobuf.Timestamp
	25, // 7: puzzle_service.PuzzleResponse.history:type_name -> macondo.GameHistory
	9,  // 8: puzzle_service.PuzzleResponse.answer:type_name -> puzzle_service.AnswerResponse
	26, // 9: puzzle_service.SubmissionRequest.answer:type_name -> ipc.ClientGameplayEvent
	9,  // 10: puzzle_service.SubmissionResponse.answer:type_name -> puzzle_service.AnswerResponse
	27, // 11: puzzle_service.PuzzleGenerationJobRequest.request:type_name -> macondo.PuzzleGenerationRequest
	17, // 12: puzzle_service.APIPuzzleGenerationJobRequest.request:type_name -> puzzle_service.PuzzleGenerationJobRequest
	17, // 13: puzzle_service.PuzzleJobLog.request:type_name -> puzzle_service.PuzzleGenerationJobRequest
	24, // 14: puzzle_service.PuzzleJobLog.created_at:type_name -> google.protobuf.Timestamp
	24, // 15: puzzle_service.PuzzleJobLog.completed_at:type_name -> google.protobuf.Timestamp
	21, // 16: puzzle_service.PuzzleJobLogsResponse.logs:type_name -> puzzle_service.PuzzleJobLog
	2,  // 17: puzzle_service.PuzzleService.GetStartPuzzleId:input_type -> puzzle_service.StartPuzzleIdRequest
	4,  // 18: puzzle_service.PuzzleService.GetNextPuzzleId:input_type -> puzzle_service.NextPuzzleIdRequest
	6,  // 19: puzzle_service.PuzzleService.GetNextClosestRatingPuzzleId:input_type -> puzzle_service.NextClosestRatingPuzzleIdRequest
	8,  // 20: puzzle_service.PuzzleService.GetPuzzle:input_type -> puzzle_service.PuzzleRequest
	11, // 21: puzzle_service.PuzzleService.SubmitAnswer:input_type -> puzzle_service.SubmissionRequest
	8,  // 22: puzzle_service.PuzzleService.GetPuzzleAnswer:input_type -> puzzle_service.PuzzleRequest
	13, // 23: puzzle_service.PuzzleService.GetPreviousPuzzleId:input_type -> puzzle_service.PreviousPuzzleRequest
	15, // 24: puzzle_service.PuzzleService.SetPuzzleVote:input_type -> puzzle_service.PuzzleVoteRequest
	19, // 25: puzzle_service.PuzzleService.StartPuzzleGenJob:input_type -> puzzle_service.APIPuzzleGenerationJobRequest
	20, // 26: puzzle_service.PuzzleService.GetPuzzleJobLogs:input_type -> puzzle_service.PuzzleJobLogsRequest
	3,  // 27: puzzle_service.PuzzleService.GetStartPuzzleId:output_type -> puzzle_service.StartPuzzleIdResponse
	5,  // 28: puzzle_service.PuzzleService.GetNextPuzzleId:output_type -> puzzle_service.NextPuzzleIdResponse
	7,  // 29: puzzle_service.PuzzleService.GetNextClosestRatingPuzzleId:output_type -> puzzle_service.NextClosestRatingPuzzleIdResponse
	10, // 30: puzzle_service.PuzzleService.GetPuzzle:output_type -> puzzle_service.PuzzleResponse
	12, // 31: puzzle_service.PuzzleService.SubmitAnswer:output_type -> puzzle_service.SubmissionResponse
	9,  // 32: puzzle_service.PuzzleService.GetPuzzleAnswer:output_type -> puzzle_service.AnswerResponse
	14, // 33: puzzle_service.PuzzleService.GetPreviousPuzzleId:output_type -> puzzle_service.PreviousPuzzleResponse
	16, // 34: puzzle_service.PuzzleService.SetPuzzleVote:output_type -> puzzle_service.PuzzleVoteResponse
	18, // 35: puzzle_service.PuzzleService.StartPuzzleGenJob:output_type -> puzzle_service.APIPuzzleGenerationJobResponse
	22, // 36: puzzle_service.PuzzleService.GetPuzzleJobLogs:output_type -> puzzle_service.PuzzleJobLogsResponse
	27, // [27:37] is the sub-list for method output_type
	17, // [17:27] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_api_proto_puzzle_service_puzzle_service_proto_init() }
func file_api_proto_puzzle_service_puzzle_service_proto_init() {
	if File_api_proto_puzzle_service_puzzle_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartPuzzleIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartPuzzleIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextPuzzleIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextPuzzleIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextClosestRatingPuzzleIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextClosestRatingPuzzleIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuzzleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuzzleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviousPuzzleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviousPuzzleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuzzleVoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuzzleVoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuzzleGenerationJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIPuzzleGenerationJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIPuzzleGenerationJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuzzleJobLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuzzleJobLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_puzzle_service_puzzle_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuzzleJobLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_puzzle_service_puzzle_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_puzzle_service_puzzle_service_proto_goTypes,
		DependencyIndexes: file_api_proto_puzzle_service_puzzle_service_proto_depIdxs,
		EnumInfos:         file_api_proto_puzzle_service_puzzle_service_proto_enumTypes,
		MessageInfos:      file_api_proto_puzzle_service_puzzle_service_proto_msgTypes,
	}.Build()
	File_api_proto_puzzle_service_puzzle_service_proto = out.File
	file_api_proto_puzzle_service_puzzle_service_proto_rawDesc = nil
	file_api_proto_puzzle_service_puzzle_service_proto_goTypes = nil
	file_api_proto_puzzle_service_puzzle_service_proto_depIdxs = nil
}
