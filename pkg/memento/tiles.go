package memento

import (
	"bytes"
	_ "embed"
	"fmt"
	"image"
	"image/color"
	"image/gif"
	"image/png"
	"math"
	"sort"
	"strconv"
	"strings"

	macondopb "github.com/domino14/macondo/gen/api/proto/macondo"
	"github.com/domino14/word-golib/tilemapping"

	"github.com/domino14/macondo/game"
)

// The "*" is a double-word with a star. Rework needed if the star isn't a double-word square.
// Also, we use runes for consistency.
var standardBoardConfig = [][]rune{
	[]rune("=  '   =   '  ="),
	[]rune(" -   \"   \"   - "),
	[]rune("  -   ' '   -  "),
	[]rune("'  -   '   -  '"),
	[]rune("    -     -    "),
	[]rune(" \"   \"   \"   \" "),
	[]rune("  '   ' '   '  "),
	[]rune("=  '   *   '  ="),
	[]rune("  '   ' '   '  "),
	[]rune(" \"   \"   \"   \" "),
	[]rune("    -     -    "),
	[]rune("'  -   '   -  '"),
	[]rune("  -   ' '   -  "),
	[]rune(" -   \"   \"   - "),
	[]rune("=  '   =   '  ="),
}

var superBoardConfig = [][]rune{
	[]rune("~  '   =  '  =   '  ~"),
	[]rune(" -  \"   -   -   \"  - "),
	[]rune("  -  ^   - -   ^  -  "),
	[]rune("'  =  '   =   '  =  '"),
	[]rune(" \"  -   \"   \"   -  \" "),
	[]rune("  ^  -   ' '   -  ^  "),
	[]rune("   '  -   '   -  '   "),
	[]rune("=      -     -      ="),
	[]rune(" -  \"   \"   \"   \"  - "),
	[]rune("  -  '   ' '   '  -  "),
	[]rune("'  =  '   *   '  =  '"),
	[]rune("  -  '   ' '   '  -  "),
	[]rune(" -  \"   \"   \"   \"  - "),
	[]rune("=      -     -      ="),
	[]rune("   '  -   '   -  '   "),
	[]rune("  ^  -   ' '   -  ^  "),
	[]rune(" \"  -   \"   \"   -  \" "),
	[]rune("'  =  '   =   '  =  '"),
	[]rune("  -  ^   - -   ^  -  "),
	[]rune(" -  \"   -   -   \"  - "),
	[]rune("~  '   =  '  =   '  ~"),
}

// These files must be kept in sync with macondo's data/letterdistribution/.
//
//go:embed letterdistributions/english
var englishLetterDistributionCSVBytes []byte

//go:embed letterdistributions/english_super
var englishSuperLetterDistributionCSVBytes []byte

//go:embed letterdistributions/french
var frenchLetterDistributionCSVBytes []byte

//go:embed letterdistributions/german
var germanLetterDistributionCSVBytes []byte

//go:embed letterdistributions/norwegian
var norwegianLetterDistributionCSVBytes []byte

//go:embed letterdistributions/catalan
var catalanLetterDistributionCSVBytes []byte

//go:embed letterdistributions/polish
var polishLetterDistributionCSVBytes []byte

//go:embed letterdistributions/spanish
var spanishLetterDistributionCSVBytes []byte

// header should be pre-quantized to very few colors (ideally 8)
//
//go:embed header.png
var headerBytes []byte

// tiles should be pre-quantized to very few colors (ideally 48)
//
//go:embed tiles-english.png
var englishTilesBytes []byte

//go:embed tiles-french.png
var frenchTilesBytes []byte

//go:embed tiles-german.png
var germanTilesBytes []byte

//go:embed tiles-norwegian.png
var norwegianTilesBytes []byte

//go:embed tiles-catalan.png
var catalanTilesBytes []byte

//go:embed tiles-polish.png
var polishTilesBytes []byte

const squareDim = 68
const monospacedFontDimX = 24
const monospacedFontDimY = 60

// Content generated by /tile_images from the frontend.
type TilePainterTilesMeta struct {
	TilesBytes  []byte
	Tile0Src    map[byte][2]int
	Tile1Src    map[byte][2]int
	BoardSrc    map[rune][2]int
	TextXSrc    map[rune][2]int
	Text0Src    map[rune][2]int
	Text1Src    map[rune][2]int
	ExpDimXY    [2]int
	BoardConfig [][]rune
}

var tilesMeta = map[string]*TilePainterTilesMeta{
	"english": {
		TilesBytes: englishTilesBytes,
		Tile0Src: map[byte][2]int{
			1: {0, 0}, 2: {68, 0}, 3: {136, 0}, 4: {204, 0}, 5: {272, 0},
			6: {340, 0}, 7: {408, 0}, 8: {476, 0}, 9: {544, 0}, 10: {612, 0},
			11: {680, 0}, 12: {748, 0}, 13: {816, 0}, 14: {884, 0}, 15: {952, 0},
			16: {1020, 0}, 17: {1088, 0}, 18: {1156, 0}, 19: {1224, 0}, 20: {1292, 0},
			21: {0, 68}, 22: {68, 68}, 23: {136, 68}, 24: {204, 68}, 25: {272, 68},
			26: {340, 68}, 129: {408, 68}, 130: {476, 68}, 131: {544, 68}, 132: {612, 68},
			133: {680, 68}, 134: {748, 68}, 135: {816, 68}, 136: {884, 68}, 137: {952, 68},
			138: {1020, 68}, 139: {1088, 68}, 140: {1156, 68}, 141: {1224, 68}, 142: {1292, 68},
			143: {0, 136}, 144: {68, 136}, 145: {136, 136}, 146: {204, 136}, 147: {272, 136},
			148: {340, 136}, 149: {408, 136}, 150: {476, 136}, 151: {544, 136}, 152: {612, 136},
			153: {680, 136}, 154: {748, 136}, 0: {816, 136},
		},
		Tile1Src: map[byte][2]int{
			1: {884, 136}, 2: {952, 136},
			3: {1020, 136}, 4: {1088, 136}, 5: {1156, 136}, 6: {1224, 136}, 7: {1292, 136},
			8: {0, 204}, 9: {68, 204}, 10: {136, 204}, 11: {204, 204}, 12: {272, 204},
			13: {340, 204}, 14: {408, 204}, 15: {476, 204}, 16: {544, 204}, 17: {612, 204},
			18: {680, 204}, 19: {748, 204}, 20: {816, 204}, 21: {884, 204}, 22: {952, 204},
			23: {1020, 204}, 24: {1088, 204}, 25: {1156, 204}, 26: {1224, 204}, 129: {1292, 204},
			130: {0, 272}, 131: {68, 272}, 132: {136, 272}, 133: {204, 272}, 134: {272, 272},
			135: {340, 272}, 136: {408, 272}, 137: {476, 272}, 138: {544, 272}, 139: {612, 272},
			140: {680, 272}, 141: {748, 272}, 142: {816, 272}, 143: {884, 272}, 144: {952, 272},
			145: {1020, 272}, 146: {1088, 272}, 147: {1156, 272}, 148: {1224, 272}, 149: {1292, 272},
			150: {0, 340}, 151: {68, 340}, 152: {136, 340}, 153: {204, 340}, 154: {272, 340},
			0: {340, 340},
		},
		BoardSrc: map[rune][2]int{
			'-': {408, 340}, '=': {476, 340}, '~': {544, 340}, '\'': {612, 340},
			'"': {680, 340}, '^': {748, 340}, '*': {816, 340}, ' ': {884, 340},
		},
		TextXSrc: map[rune][2]int{
			'0': {0, 408}, '1': {24, 408}, '2': {48, 408}, '3': {72, 408}, '4': {96, 408},
			'5': {120, 408}, '6': {144, 408}, '7': {168, 408}, '8': {192, 408}, '9': {216, 408},
			'A': {240, 408}, 'a': {264, 408}, 'B': {288, 408}, 'b': {312, 408}, 'C': {336, 408},
			'c': {360, 408}, 'D': {384, 408}, 'd': {408, 408}, 'E': {432, 408}, 'e': {456, 408},
			'F': {480, 408}, 'f': {504, 408}, 'G': {528, 408}, 'g': {552, 408}, 'H': {576, 408},
			'h': {600, 408}, 'I': {624, 408}, 'i': {648, 408}, 'J': {672, 408}, 'j': {696, 408},
			'K': {720, 408}, 'k': {744, 408}, 'L': {768, 408}, 'l': {792, 408}, 'M': {816, 408},
			'm': {840, 408}, 'N': {864, 408}, 'n': {888, 408}, 'O': {912, 408}, 'o': {936, 408},
			'P': {960, 408}, 'p': {984, 408}, 'Q': {1008, 408}, 'q': {1032, 408}, 'R': {1056, 408},
			'r': {1080, 408}, 'S': {1104, 408}, 's': {1128, 408}, 'T': {1152, 408}, 't': {1176, 408},
			'U': {1200, 408}, 'u': {1224, 408}, 'V': {1248, 408}, 'v': {1272, 408}, 'W': {1296, 408},
			'w': {1320, 408},
			'X': {0, 468}, 'x': {24, 468}, 'Y': {48, 468}, 'y': {72, 468}, 'Z': {96, 468},
			'z': {120, 468}, ' ': {144, 468}, '!': {168, 468}, '"': {192, 468}, '#': {216, 468},
			'$': {240, 468}, '%': {264, 468}, '&': {288, 468}, '\'': {312, 468}, '(': {336, 468},
			')': {360, 468}, '*': {384, 468}, '+': {408, 468}, ',': {432, 468}, '-': {456, 468},
			'.': {480, 468}, '/': {504, 468}, ':': {528, 468}, ';': {552, 468}, '<': {576, 468},
			'=': {600, 468}, '>': {624, 468}, '?': {648, 468}, '@': {672, 468}, '[': {696, 468},
			'\\': {720, 468}, ']': {744, 468}, '^': {768, 468}, '_': {792, 468}, '`': {816, 468},
			'{': {840, 468}, '|': {864, 468}, '}': {888, 468}, '~': {912, 468},
		},
		Text0Src: map[rune][2]int{
			'0': {936, 468},
			'1': {960, 468}, '2': {984, 468}, '3': {1008, 468}, '4': {1032, 468}, '5': {1056, 468},
			'6': {1080, 468}, '7': {1104, 468}, '8': {1128, 468}, '9': {1152, 468}, 'A': {1176, 468},
			'a': {1200, 468}, 'B': {1224, 468}, 'b': {1248, 468}, 'C': {1272, 468}, 'c': {1296, 468},
			'D': {1320, 468},
			'd': {0, 528}, 'E': {24, 528}, 'e': {48, 528}, 'F': {72, 528}, 'f': {96, 528},
			'G': {120, 528}, 'g': {144, 528}, 'H': {168, 528}, 'h': {192, 528}, 'I': {216, 528},
			'i': {240, 528}, 'J': {264, 528}, 'j': {288, 528}, 'K': {312, 528}, 'k': {336, 528},
			'L': {360, 528}, 'l': {384, 528}, 'M': {408, 528}, 'm': {432, 528}, 'N': {456, 528},
			'n': {480, 528}, 'O': {504, 528}, 'o': {528, 528}, 'P': {552, 528}, 'p': {576, 528},
			'Q': {600, 528}, 'q': {624, 528}, 'R': {648, 528}, 'r': {672, 528}, 'S': {696, 528},
			's': {720, 528}, 'T': {744, 528}, 't': {768, 528}, 'U': {792, 528}, 'u': {816, 528},
			'V': {840, 528}, 'v': {864, 528}, 'W': {888, 528}, 'w': {912, 528}, 'X': {936, 528},
			'x': {960, 528}, 'Y': {984, 528}, 'y': {1008, 528}, 'Z': {1032, 528}, 'z': {1056, 528},
			' ': {1080, 528}, '!': {1104, 528}, '"': {1128, 528}, '#': {1152, 528}, '$': {1176, 528},
			'%': {1200, 528}, '&': {1224, 528}, '\'': {1248, 528}, '(': {1272, 528}, ')': {1296, 528},
			'*': {1320, 528},
			'+': {0, 588}, ',': {24, 588}, '-': {48, 588}, '.': {72, 588}, '/': {96, 588},
			':': {120, 588}, ';': {144, 588}, '<': {168, 588}, '=': {192, 588}, '>': {216, 588},
			'?': {240, 588}, '@': {264, 588}, '[': {288, 588}, '\\': {312, 588}, ']': {336, 588},
			'^': {360, 588}, '_': {384, 588}, '`': {408, 588}, '{': {432, 588}, '|': {456, 588},
			'}': {480, 588}, '~': {504, 588},
		},
		Text1Src: map[rune][2]int{
			'0': {528, 588}, '1': {552, 588}, '2': {576, 588},
			'3': {600, 588}, '4': {624, 588}, '5': {648, 588}, '6': {672, 588}, '7': {696, 588},
			'8': {720, 588}, '9': {744, 588}, 'A': {768, 588}, 'a': {792, 588}, 'B': {816, 588},
			'b': {840, 588}, 'C': {864, 588}, 'c': {888, 588}, 'D': {912, 588}, 'd': {936, 588},
			'E': {960, 588}, 'e': {984, 588}, 'F': {1008, 588}, 'f': {1032, 588}, 'G': {1056, 588},
			'g': {1080, 588}, 'H': {1104, 588}, 'h': {1128, 588}, 'I': {1152, 588}, 'i': {1176, 588},
			'J': {1200, 588}, 'j': {1224, 588}, 'K': {1248, 588}, 'k': {1272, 588}, 'L': {1296, 588},
			'l': {1320, 588},
			'M': {0, 648}, 'm': {24, 648}, 'N': {48, 648}, 'n': {72, 648}, 'O': {96, 648},
			'o': {120, 648}, 'P': {144, 648}, 'p': {168, 648}, 'Q': {192, 648}, 'q': {216, 648},
			'R': {240, 648}, 'r': {264, 648}, 'S': {288, 648}, 's': {312, 648}, 'T': {336, 648},
			't': {360, 648}, 'U': {384, 648}, 'u': {408, 648}, 'V': {432, 648}, 'v': {456, 648},
			'W': {480, 648}, 'w': {504, 648}, 'X': {528, 648}, 'x': {552, 648}, 'Y': {576, 648},
			'y': {600, 648}, 'Z': {624, 648}, 'z': {648, 648}, ' ': {672, 648}, '!': {696, 648},
			'"': {720, 648}, '#': {744, 648}, '$': {768, 648}, '%': {792, 648}, '&': {816, 648},
			'\'': {840, 648}, '(': {864, 648}, ')': {888, 648}, '*': {912, 648}, '+': {936, 648},
			',': {960, 648}, '-': {984, 648}, '.': {1008, 648}, '/': {1032, 648}, ':': {1056, 648},
			';': {1080, 648}, '<': {1104, 648}, '=': {1128, 648}, '>': {1152, 648}, '?': {1176, 648},
			'@': {1200, 648}, '[': {1224, 648}, '\\': {1248, 648}, ']': {1272, 648}, '^': {1296, 648},
			'_': {1320, 648},
			'`': {0, 708}, '{': {24, 708}, '|': {48, 708}, '}': {72, 708}, '~': {96, 708},
		},
		ExpDimXY:    [2]int{1360, 768},
		BoardConfig: standardBoardConfig,
	},
	"english_super": {
		TilesBytes: englishTilesBytes,
		Tile0Src: map[byte][2]int{
			1: {0, 0}, 2: {68, 0}, 3: {136, 0}, 4: {204, 0}, 5: {272, 0},
			6: {340, 0}, 7: {408, 0}, 8: {476, 0}, 9: {544, 0}, 10: {612, 0},
			11: {680, 0}, 12: {748, 0}, 13: {816, 0}, 14: {884, 0}, 15: {952, 0},
			16: {1020, 0}, 17: {1088, 0}, 18: {1156, 0}, 19: {1224, 0}, 20: {1292, 0},
			21: {0, 68}, 22: {68, 68}, 23: {136, 68}, 24: {204, 68}, 25: {272, 68},
			26: {340, 68}, 129: {408, 68}, 130: {476, 68}, 131: {544, 68}, 132: {612, 68},
			133: {680, 68}, 134: {748, 68}, 135: {816, 68}, 136: {884, 68}, 137: {952, 68},
			138: {1020, 68}, 139: {1088, 68}, 140: {1156, 68}, 141: {1224, 68}, 142: {1292, 68},
			143: {0, 136}, 144: {68, 136}, 145: {136, 136}, 146: {204, 136}, 147: {272, 136},
			148: {340, 136}, 149: {408, 136}, 150: {476, 136}, 151: {544, 136}, 152: {612, 136},
			153: {680, 136}, 154: {748, 136}, 0: {816, 136},
		},
		Tile1Src: map[byte][2]int{
			1: {884, 136}, 2: {952, 136},
			3: {1020, 136}, 4: {1088, 136}, 5: {1156, 136}, 6: {1224, 136}, 7: {1292, 136},
			8: {0, 204}, 9: {68, 204}, 10: {136, 204}, 11: {204, 204}, 12: {272, 204},
			13: {340, 204}, 14: {408, 204}, 15: {476, 204}, 16: {544, 204}, 17: {612, 204},
			18: {680, 204}, 19: {748, 204}, 20: {816, 204}, 21: {884, 204}, 22: {952, 204},
			23: {1020, 204}, 24: {1088, 204}, 25: {1156, 204}, 26: {1224, 204}, 129: {1292, 204},
			130: {0, 272}, 131: {68, 272}, 132: {136, 272}, 133: {204, 272}, 134: {272, 272},
			135: {340, 272}, 136: {408, 272}, 137: {476, 272}, 138: {544, 272}, 139: {612, 272},
			140: {680, 272}, 141: {748, 272}, 142: {816, 272}, 143: {884, 272}, 144: {952, 272},
			145: {1020, 272}, 146: {1088, 272}, 147: {1156, 272}, 148: {1224, 272}, 149: {1292, 272},
			150: {0, 340}, 151: {68, 340}, 152: {136, 340}, 153: {204, 340}, 154: {272, 340},
			0: {340, 340},
		},
		BoardSrc: map[rune][2]int{
			'-': {408, 340}, '=': {476, 340}, '~': {544, 340}, '\'': {612, 340},
			'"': {680, 340}, '^': {748, 340}, '*': {816, 340}, ' ': {884, 340},
		},
		TextXSrc: map[rune][2]int{
			'0': {0, 408}, '1': {24, 408}, '2': {48, 408}, '3': {72, 408}, '4': {96, 408},
			'5': {120, 408}, '6': {144, 408}, '7': {168, 408}, '8': {192, 408}, '9': {216, 408},
			'A': {240, 408}, 'a': {264, 408}, 'B': {288, 408}, 'b': {312, 408}, 'C': {336, 408},
			'c': {360, 408}, 'D': {384, 408}, 'd': {408, 408}, 'E': {432, 408}, 'e': {456, 408},
			'F': {480, 408}, 'f': {504, 408}, 'G': {528, 408}, 'g': {552, 408}, 'H': {576, 408},
			'h': {600, 408}, 'I': {624, 408}, 'i': {648, 408}, 'J': {672, 408}, 'j': {696, 408},
			'K': {720, 408}, 'k': {744, 408}, 'L': {768, 408}, 'l': {792, 408}, 'M': {816, 408},
			'm': {840, 408}, 'N': {864, 408}, 'n': {888, 408}, 'O': {912, 408}, 'o': {936, 408},
			'P': {960, 408}, 'p': {984, 408}, 'Q': {1008, 408}, 'q': {1032, 408}, 'R': {1056, 408},
			'r': {1080, 408}, 'S': {1104, 408}, 's': {1128, 408}, 'T': {1152, 408}, 't': {1176, 408},
			'U': {1200, 408}, 'u': {1224, 408}, 'V': {1248, 408}, 'v': {1272, 408}, 'W': {1296, 408},
			'w': {1320, 408},
			'X': {0, 468}, 'x': {24, 468}, 'Y': {48, 468}, 'y': {72, 468}, 'Z': {96, 468},
			'z': {120, 468}, ' ': {144, 468}, '!': {168, 468}, '"': {192, 468}, '#': {216, 468},
			'$': {240, 468}, '%': {264, 468}, '&': {288, 468}, '\'': {312, 468}, '(': {336, 468},
			')': {360, 468}, '*': {384, 468}, '+': {408, 468}, ',': {432, 468}, '-': {456, 468},
			'.': {480, 468}, '/': {504, 468}, ':': {528, 468}, ';': {552, 468}, '<': {576, 468},
			'=': {600, 468}, '>': {624, 468}, '?': {648, 468}, '@': {672, 468}, '[': {696, 468},
			'\\': {720, 468}, ']': {744, 468}, '^': {768, 468}, '_': {792, 468}, '`': {816, 468},
			'{': {840, 468}, '|': {864, 468}, '}': {888, 468}, '~': {912, 468},
		},
		Text0Src: map[rune][2]int{
			'0': {936, 468},
			'1': {960, 468}, '2': {984, 468}, '3': {1008, 468}, '4': {1032, 468}, '5': {1056, 468},
			'6': {1080, 468}, '7': {1104, 468}, '8': {1128, 468}, '9': {1152, 468}, 'A': {1176, 468},
			'a': {1200, 468}, 'B': {1224, 468}, 'b': {1248, 468}, 'C': {1272, 468}, 'c': {1296, 468},
			'D': {1320, 468},
			'd': {0, 528}, 'E': {24, 528}, 'e': {48, 528}, 'F': {72, 528}, 'f': {96, 528},
			'G': {120, 528}, 'g': {144, 528}, 'H': {168, 528}, 'h': {192, 528}, 'I': {216, 528},
			'i': {240, 528}, 'J': {264, 528}, 'j': {288, 528}, 'K': {312, 528}, 'k': {336, 528},
			'L': {360, 528}, 'l': {384, 528}, 'M': {408, 528}, 'm': {432, 528}, 'N': {456, 528},
			'n': {480, 528}, 'O': {504, 528}, 'o': {528, 528}, 'P': {552, 528}, 'p': {576, 528},
			'Q': {600, 528}, 'q': {624, 528}, 'R': {648, 528}, 'r': {672, 528}, 'S': {696, 528},
			's': {720, 528}, 'T': {744, 528}, 't': {768, 528}, 'U': {792, 528}, 'u': {816, 528},
			'V': {840, 528}, 'v': {864, 528}, 'W': {888, 528}, 'w': {912, 528}, 'X': {936, 528},
			'x': {960, 528}, 'Y': {984, 528}, 'y': {1008, 528}, 'Z': {1032, 528}, 'z': {1056, 528},
			' ': {1080, 528}, '!': {1104, 528}, '"': {1128, 528}, '#': {1152, 528}, '$': {1176, 528},
			'%': {1200, 528}, '&': {1224, 528}, '\'': {1248, 528}, '(': {1272, 528}, ')': {1296, 528},
			'*': {1320, 528},
			'+': {0, 588}, ',': {24, 588}, '-': {48, 588}, '.': {72, 588}, '/': {96, 588},
			':': {120, 588}, ';': {144, 588}, '<': {168, 588}, '=': {192, 588}, '>': {216, 588},
			'?': {240, 588}, '@': {264, 588}, '[': {288, 588}, '\\': {312, 588}, ']': {336, 588},
			'^': {360, 588}, '_': {384, 588}, '`': {408, 588}, '{': {432, 588}, '|': {456, 588},
			'}': {480, 588}, '~': {504, 588},
		},
		Text1Src: map[rune][2]int{
			'0': {528, 588}, '1': {552, 588}, '2': {576, 588},
			'3': {600, 588}, '4': {624, 588}, '5': {648, 588}, '6': {672, 588}, '7': {696, 588},
			'8': {720, 588}, '9': {744, 588}, 'A': {768, 588}, 'a': {792, 588}, 'B': {816, 588},
			'b': {840, 588}, 'C': {864, 588}, 'c': {888, 588}, 'D': {912, 588}, 'd': {936, 588},
			'E': {960, 588}, 'e': {984, 588}, 'F': {1008, 588}, 'f': {1032, 588}, 'G': {1056, 588},
			'g': {1080, 588}, 'H': {1104, 588}, 'h': {1128, 588}, 'I': {1152, 588}, 'i': {1176, 588},
			'J': {1200, 588}, 'j': {1224, 588}, 'K': {1248, 588}, 'k': {1272, 588}, 'L': {1296, 588},
			'l': {1320, 588},
			'M': {0, 648}, 'm': {24, 648}, 'N': {48, 648}, 'n': {72, 648}, 'O': {96, 648},
			'o': {120, 648}, 'P': {144, 648}, 'p': {168, 648}, 'Q': {192, 648}, 'q': {216, 648},
			'R': {240, 648}, 'r': {264, 648}, 'S': {288, 648}, 's': {312, 648}, 'T': {336, 648},
			't': {360, 648}, 'U': {384, 648}, 'u': {408, 648}, 'V': {432, 648}, 'v': {456, 648},
			'W': {480, 648}, 'w': {504, 648}, 'X': {528, 648}, 'x': {552, 648}, 'Y': {576, 648},
			'y': {600, 648}, 'Z': {624, 648}, 'z': {648, 648}, ' ': {672, 648}, '!': {696, 648},
			'"': {720, 648}, '#': {744, 648}, '$': {768, 648}, '%': {792, 648}, '&': {816, 648},
			'\'': {840, 648}, '(': {864, 648}, ')': {888, 648}, '*': {912, 648}, '+': {936, 648},
			',': {960, 648}, '-': {984, 648}, '.': {1008, 648}, '/': {1032, 648}, ':': {1056, 648},
			';': {1080, 648}, '<': {1104, 648}, '=': {1128, 648}, '>': {1152, 648}, '?': {1176, 648},
			'@': {1200, 648}, '[': {1224, 648}, '\\': {1248, 648}, ']': {1272, 648}, '^': {1296, 648},
			'_': {1320, 648},
			'`': {0, 708}, '{': {24, 708}, '|': {48, 708}, '}': {72, 708}, '~': {96, 708},
		},
		ExpDimXY:    [2]int{1360, 768},
		BoardConfig: superBoardConfig,
	},
	"french": {
		TilesBytes: frenchTilesBytes,
		Tile0Src: map[byte][2]int{
			1: {0, 0}, 2: {68, 0}, 3: {136, 0}, 4: {204, 0}, 5: {272, 0},
			6: {340, 0}, 7: {408, 0}, 8: {476, 0}, 9: {544, 0}, 10: {612, 0},
			11: {680, 0}, 12: {748, 0}, 13: {816, 0}, 14: {884, 0}, 15: {952, 0},
			16: {1020, 0}, 17: {1088, 0}, 18: {1156, 0}, 19: {1224, 0}, 20: {1292, 0},
			21: {0, 68}, 22: {68, 68}, 23: {136, 68}, 24: {204, 68}, 25: {272, 68},
			26: {340, 68}, 129: {408, 68}, 130: {476, 68}, 131: {544, 68}, 132: {612, 68},
			133: {680, 68}, 134: {748, 68}, 135: {816, 68}, 136: {884, 68}, 137: {952, 68},
			138: {1020, 68}, 139: {1088, 68}, 140: {1156, 68}, 141: {1224, 68}, 142: {1292, 68},
			143: {0, 136}, 144: {68, 136}, 145: {136, 136}, 146: {204, 136}, 147: {272, 136},
			148: {340, 136}, 149: {408, 136}, 150: {476, 136}, 151: {544, 136}, 152: {612, 136},
			153: {680, 136}, 154: {748, 136}, 0: {816, 136},
		},
		Tile1Src: map[byte][2]int{
			1: {884, 136}, 2: {952, 136},
			3: {1020, 136}, 4: {1088, 136}, 5: {1156, 136}, 6: {1224, 136}, 7: {1292, 136},
			8: {0, 204}, 9: {68, 204}, 10: {136, 204}, 11: {204, 204}, 12: {272, 204},
			13: {340, 204}, 14: {408, 204}, 15: {476, 204}, 16: {544, 204}, 17: {612, 204},
			18: {680, 204}, 19: {748, 204}, 20: {816, 204}, 21: {884, 204}, 22: {952, 204},
			23: {1020, 204}, 24: {1088, 204}, 25: {1156, 204}, 26: {1224, 204}, 129: {1292, 204},
			130: {0, 272}, 131: {68, 272}, 132: {136, 272}, 133: {204, 272}, 134: {272, 272},
			135: {340, 272}, 136: {408, 272}, 137: {476, 272}, 138: {544, 272}, 139: {612, 272},
			140: {680, 272}, 141: {748, 272}, 142: {816, 272}, 143: {884, 272}, 144: {952, 272},
			145: {1020, 272}, 146: {1088, 272}, 147: {1156, 272}, 148: {1224, 272}, 149: {1292, 272},
			150: {0, 340}, 151: {68, 340}, 152: {136, 340}, 153: {204, 340}, 154: {272, 340},
			0: {340, 340},
		},
		BoardSrc: map[rune][2]int{
			'-': {408, 340}, '=': {476, 340}, '~': {544, 340}, '\'': {612, 340},
			'"': {680, 340}, '^': {748, 340}, '*': {816, 340}, ' ': {884, 340},
		},
		TextXSrc: map[rune][2]int{
			'0': {0, 408}, '1': {24, 408}, '2': {48, 408}, '3': {72, 408}, '4': {96, 408},
			'5': {120, 408}, '6': {144, 408}, '7': {168, 408}, '8': {192, 408}, '9': {216, 408},
			'A': {240, 408}, 'a': {264, 408}, 'B': {288, 408}, 'b': {312, 408}, 'C': {336, 408},
			'c': {360, 408}, 'D': {384, 408}, 'd': {408, 408}, 'E': {432, 408}, 'e': {456, 408},
			'F': {480, 408}, 'f': {504, 408}, 'G': {528, 408}, 'g': {552, 408}, 'H': {576, 408},
			'h': {600, 408}, 'I': {624, 408}, 'i': {648, 408}, 'J': {672, 408}, 'j': {696, 408},
			'K': {720, 408}, 'k': {744, 408}, 'L': {768, 408}, 'l': {792, 408}, 'M': {816, 408},
			'm': {840, 408}, 'N': {864, 408}, 'n': {888, 408}, 'O': {912, 408}, 'o': {936, 408},
			'P': {960, 408}, 'p': {984, 408}, 'Q': {1008, 408}, 'q': {1032, 408}, 'R': {1056, 408},
			'r': {1080, 408}, 'S': {1104, 408}, 's': {1128, 408}, 'T': {1152, 408}, 't': {1176, 408},
			'U': {1200, 408}, 'u': {1224, 408}, 'V': {1248, 408}, 'v': {1272, 408}, 'W': {1296, 408},
			'w': {1320, 408},
			'X': {0, 468}, 'x': {24, 468}, 'Y': {48, 468}, 'y': {72, 468}, 'Z': {96, 468},
			'z': {120, 468}, ' ': {144, 468}, '!': {168, 468}, '"': {192, 468}, '#': {216, 468},
			'$': {240, 468}, '%': {264, 468}, '&': {288, 468}, '\'': {312, 468}, '(': {336, 468},
			')': {360, 468}, '*': {384, 468}, '+': {408, 468}, ',': {432, 468}, '-': {456, 468},
			'.': {480, 468}, '/': {504, 468}, ':': {528, 468}, ';': {552, 468}, '<': {576, 468},
			'=': {600, 468}, '>': {624, 468}, '?': {648, 468}, '@': {672, 468}, '[': {696, 468},
			'\\': {720, 468}, ']': {744, 468}, '^': {768, 468}, '_': {792, 468}, '`': {816, 468},
			'{': {840, 468}, '|': {864, 468}, '}': {888, 468}, '~': {912, 468},
		},
		Text0Src: map[rune][2]int{
			'0': {936, 468},
			'1': {960, 468}, '2': {984, 468}, '3': {1008, 468}, '4': {1032, 468}, '5': {1056, 468},
			'6': {1080, 468}, '7': {1104, 468}, '8': {1128, 468}, '9': {1152, 468}, 'A': {1176, 468},
			'a': {1200, 468}, 'B': {1224, 468}, 'b': {1248, 468}, 'C': {1272, 468}, 'c': {1296, 468},
			'D': {1320, 468},
			'd': {0, 528}, 'E': {24, 528}, 'e': {48, 528}, 'F': {72, 528}, 'f': {96, 528},
			'G': {120, 528}, 'g': {144, 528}, 'H': {168, 528}, 'h': {192, 528}, 'I': {216, 528},
			'i': {240, 528}, 'J': {264, 528}, 'j': {288, 528}, 'K': {312, 528}, 'k': {336, 528},
			'L': {360, 528}, 'l': {384, 528}, 'M': {408, 528}, 'm': {432, 528}, 'N': {456, 528},
			'n': {480, 528}, 'O': {504, 528}, 'o': {528, 528}, 'P': {552, 528}, 'p': {576, 528},
			'Q': {600, 528}, 'q': {624, 528}, 'R': {648, 528}, 'r': {672, 528}, 'S': {696, 528},
			's': {720, 528}, 'T': {744, 528}, 't': {768, 528}, 'U': {792, 528}, 'u': {816, 528},
			'V': {840, 528}, 'v': {864, 528}, 'W': {888, 528}, 'w': {912, 528}, 'X': {936, 528},
			'x': {960, 528}, 'Y': {984, 528}, 'y': {1008, 528}, 'Z': {1032, 528}, 'z': {1056, 528},
			' ': {1080, 528}, '!': {1104, 528}, '"': {1128, 528}, '#': {1152, 528}, '$': {1176, 528},
			'%': {1200, 528}, '&': {1224, 528}, '\'': {1248, 528}, '(': {1272, 528}, ')': {1296, 528},
			'*': {1320, 528},
			'+': {0, 588}, ',': {24, 588}, '-': {48, 588}, '.': {72, 588}, '/': {96, 588},
			':': {120, 588}, ';': {144, 588}, '<': {168, 588}, '=': {192, 588}, '>': {216, 588},
			'?': {240, 588}, '@': {264, 588}, '[': {288, 588}, '\\': {312, 588}, ']': {336, 588},
			'^': {360, 588}, '_': {384, 588}, '`': {408, 588}, '{': {432, 588}, '|': {456, 588},
			'}': {480, 588}, '~': {504, 588},
		},
		Text1Src: map[rune][2]int{
			'0': {528, 588}, '1': {552, 588}, '2': {576, 588},
			'3': {600, 588}, '4': {624, 588}, '5': {648, 588}, '6': {672, 588}, '7': {696, 588},
			'8': {720, 588}, '9': {744, 588}, 'A': {768, 588}, 'a': {792, 588}, 'B': {816, 588},
			'b': {840, 588}, 'C': {864, 588}, 'c': {888, 588}, 'D': {912, 588}, 'd': {936, 588},
			'E': {960, 588}, 'e': {984, 588}, 'F': {1008, 588}, 'f': {1032, 588}, 'G': {1056, 588},
			'g': {1080, 588}, 'H': {1104, 588}, 'h': {1128, 588}, 'I': {1152, 588}, 'i': {1176, 588},
			'J': {1200, 588}, 'j': {1224, 588}, 'K': {1248, 588}, 'k': {1272, 588}, 'L': {1296, 588},
			'l': {1320, 588},
			'M': {0, 648}, 'm': {24, 648}, 'N': {48, 648}, 'n': {72, 648}, 'O': {96, 648},
			'o': {120, 648}, 'P': {144, 648}, 'p': {168, 648}, 'Q': {192, 648}, 'q': {216, 648},
			'R': {240, 648}, 'r': {264, 648}, 'S': {288, 648}, 's': {312, 648}, 'T': {336, 648},
			't': {360, 648}, 'U': {384, 648}, 'u': {408, 648}, 'V': {432, 648}, 'v': {456, 648},
			'W': {480, 648}, 'w': {504, 648}, 'X': {528, 648}, 'x': {552, 648}, 'Y': {576, 648},
			'y': {600, 648}, 'Z': {624, 648}, 'z': {648, 648}, ' ': {672, 648}, '!': {696, 648},
			'"': {720, 648}, '#': {744, 648}, '$': {768, 648}, '%': {792, 648}, '&': {816, 648},
			'\'': {840, 648}, '(': {864, 648}, ')': {888, 648}, '*': {912, 648}, '+': {936, 648},
			',': {960, 648}, '-': {984, 648}, '.': {1008, 648}, '/': {1032, 648}, ':': {1056, 648},
			';': {1080, 648}, '<': {1104, 648}, '=': {1128, 648}, '>': {1152, 648}, '?': {1176, 648},
			'@': {1200, 648}, '[': {1224, 648}, '\\': {1248, 648}, ']': {1272, 648}, '^': {1296, 648},
			'_': {1320, 648},
			'`': {0, 708}, '{': {24, 708}, '|': {48, 708}, '}': {72, 708}, '~': {96, 708},
		},
		ExpDimXY:    [2]int{1360, 768},
		BoardConfig: standardBoardConfig,
	},
	"german": {
		TilesBytes: germanTilesBytes,
		Tile0Src: map[byte][2]int{
			1: {0, 0}, 2: {68, 0}, 3: {136, 0}, 4: {204, 0}, 5: {272, 0},
			6: {340, 0}, 7: {408, 0}, 8: {476, 0}, 9: {544, 0}, 10: {612, 0},
			11: {680, 0}, 12: {748, 0}, 13: {816, 0}, 14: {884, 0}, 15: {952, 0},
			16: {1020, 0}, 17: {1088, 0}, 18: {1156, 0}, 19: {1224, 0}, 20: {1292, 0},
			21: {0, 68}, 22: {68, 68}, 23: {136, 68}, 24: {204, 68}, 25: {272, 68},
			26: {340, 68}, 27: {408, 68}, 28: {476, 68}, 29: {544, 68}, 129: {612, 68},
			130: {680, 68}, 131: {748, 68}, 132: {816, 68}, 133: {884, 68}, 134: {952, 68},
			135: {1020, 68}, 136: {1088, 68}, 137: {1156, 68}, 138: {1224, 68}, 139: {1292, 68},
			140: {0, 136}, 141: {68, 136}, 142: {136, 136}, 143: {204, 136}, 144: {272, 136},
			145: {340, 136}, 146: {408, 136}, 147: {476, 136}, 148: {544, 136}, 149: {612, 136},
			150: {680, 136}, 151: {748, 136}, 152: {816, 136}, 153: {884, 136}, 154: {952, 136},
			155: {1020, 136}, 156: {1088, 136}, 157: {1156, 136}, 0: {1224, 136},
		},
		Tile1Src: map[byte][2]int{
			1: {1292, 136},
			2: {0, 204}, 3: {68, 204}, 4: {136, 204}, 5: {204, 204}, 6: {272, 204},
			7: {340, 204}, 8: {408, 204}, 9: {476, 204}, 10: {544, 204}, 11: {612, 204},
			12: {680, 204}, 13: {748, 204}, 14: {816, 204}, 15: {884, 204}, 16: {952, 204},
			17: {1020, 204}, 18: {1088, 204}, 19: {1156, 204}, 20: {1224, 204}, 21: {1292, 204},
			22: {0, 272}, 23: {68, 272}, 24: {136, 272}, 25: {204, 272}, 26: {272, 272},
			27: {340, 272}, 28: {408, 272}, 29: {476, 272}, 129: {544, 272}, 130: {612, 272},
			131: {680, 272}, 132: {748, 272}, 133: {816, 272}, 134: {884, 272}, 135: {952, 272},
			136: {1020, 272}, 137: {1088, 272}, 138: {1156, 272}, 139: {1224, 272}, 140: {1292, 272},
			141: {0, 340}, 142: {68, 340}, 143: {136, 340}, 144: {204, 340}, 145: {272, 340},
			146: {340, 340}, 147: {408, 340}, 148: {476, 340}, 149: {544, 340}, 150: {612, 340},
			151: {680, 340}, 152: {748, 340}, 153: {816, 340}, 154: {884, 340}, 155: {952, 340},
			156: {1020, 340}, 157: {1088, 340}, 0: {1156, 340},
		},
		BoardSrc: map[rune][2]int{
			'-': {1224, 340}, '=': {1292, 340},
			'~': {0, 408}, '\'': {68, 408}, '"': {136, 408}, '^': {204, 408}, '*': {272, 408},
			' ': {340, 408},
		},
		TextXSrc: map[rune][2]int{
			'0': {0, 476}, '1': {24, 476}, '2': {48, 476}, '3': {72, 476}, '4': {96, 476},
			'5': {120, 476}, '6': {144, 476}, '7': {168, 476}, '8': {192, 476}, '9': {216, 476},
			'A': {240, 476}, 'a': {264, 476}, 'Ä': {288, 476}, 'ä': {312, 476}, 'B': {336, 476},
			'b': {360, 476}, 'C': {384, 476}, 'c': {408, 476}, 'D': {432, 476}, 'd': {456, 476},
			'E': {480, 476}, 'e': {504, 476}, 'F': {528, 476}, 'f': {552, 476}, 'G': {576, 476},
			'g': {600, 476}, 'H': {624, 476}, 'h': {648, 476}, 'I': {672, 476}, 'i': {696, 476},
			'J': {720, 476}, 'j': {744, 476}, 'K': {768, 476}, 'k': {792, 476}, 'L': {816, 476},
			'l': {840, 476}, 'M': {864, 476}, 'm': {888, 476}, 'N': {912, 476}, 'n': {936, 476},
			'O': {960, 476}, 'o': {984, 476}, 'Ö': {1008, 476}, 'ö': {1032, 476}, 'P': {1056, 476},
			'p': {1080, 476}, 'Q': {1104, 476}, 'q': {1128, 476}, 'R': {1152, 476}, 'r': {1176, 476},
			'S': {1200, 476}, 's': {1224, 476}, 'T': {1248, 476}, 't': {1272, 476}, 'U': {1296, 476},
			'u': {1320, 476},
			'Ü': {0, 536}, 'ü': {24, 536}, 'V': {48, 536}, 'v': {72, 536}, 'W': {96, 536},
			'w': {120, 536}, 'X': {144, 536}, 'x': {168, 536}, 'Y': {192, 536}, 'y': {216, 536},
			'Z': {240, 536}, 'z': {264, 536}, ' ': {288, 536}, '!': {312, 536}, '"': {336, 536},
			'#': {360, 536}, '$': {384, 536}, '%': {408, 536}, '&': {432, 536}, '\'': {456, 536},
			'(': {480, 536}, ')': {504, 536}, '*': {528, 536}, '+': {552, 536}, ',': {576, 536},
			'-': {600, 536}, '.': {624, 536}, '/': {648, 536}, ':': {672, 536}, ';': {696, 536},
			'<': {720, 536}, '=': {744, 536}, '>': {768, 536}, '?': {792, 536}, '@': {816, 536},
			'[': {840, 536}, '\\': {864, 536}, ']': {888, 536}, '^': {912, 536}, '_': {936, 536},
			'`': {960, 536}, '{': {984, 536}, '|': {1008, 536}, '}': {1032, 536}, '~': {1056, 536},
		},
		Text0Src: map[rune][2]int{
			'0': {1080, 536}, '1': {1104, 536}, '2': {1128, 536}, '3': {1152, 536}, '4': {1176, 536},
			'5': {1200, 536}, '6': {1224, 536}, '7': {1248, 536}, '8': {1272, 536}, '9': {1296, 536},
			'A': {1320, 536},
			'a': {0, 596}, 'Ä': {24, 596}, 'ä': {48, 596}, 'B': {72, 596}, 'b': {96, 596},
			'C': {120, 596}, 'c': {144, 596}, 'D': {168, 596}, 'd': {192, 596}, 'E': {216, 596},
			'e': {240, 596}, 'F': {264, 596}, 'f': {288, 596}, 'G': {312, 596}, 'g': {336, 596},
			'H': {360, 596}, 'h': {384, 596}, 'I': {408, 596}, 'i': {432, 596}, 'J': {456, 596},
			'j': {480, 596}, 'K': {504, 596}, 'k': {528, 596}, 'L': {552, 596}, 'l': {576, 596},
			'M': {600, 596}, 'm': {624, 596}, 'N': {648, 596}, 'n': {672, 596}, 'O': {696, 596},
			'o': {720, 596}, 'Ö': {744, 596}, 'ö': {768, 596}, 'P': {792, 596}, 'p': {816, 596},
			'Q': {840, 596}, 'q': {864, 596}, 'R': {888, 596}, 'r': {912, 596}, 'S': {936, 596},
			's': {960, 596}, 'T': {984, 596}, 't': {1008, 596}, 'U': {1032, 596}, 'u': {1056, 596},
			'Ü': {1080, 596}, 'ü': {1104, 596}, 'V': {1128, 596}, 'v': {1152, 596}, 'W': {1176, 596},
			'w': {1200, 596}, 'X': {1224, 596}, 'x': {1248, 596}, 'Y': {1272, 596}, 'y': {1296, 596},
			'Z': {1320, 596},
			'z': {0, 656}, ' ': {24, 656}, '!': {48, 656}, '"': {72, 656}, '#': {96, 656},
			'$': {120, 656}, '%': {144, 656}, '&': {168, 656}, '\'': {192, 656}, '(': {216, 656},
			')': {240, 656}, '*': {264, 656}, '+': {288, 656}, ',': {312, 656}, '-': {336, 656},
			'.': {360, 656}, '/': {384, 656}, ':': {408, 656}, ';': {432, 656}, '<': {456, 656},
			'=': {480, 656}, '>': {504, 656}, '?': {528, 656}, '@': {552, 656}, '[': {576, 656},
			'\\': {600, 656}, ']': {624, 656}, '^': {648, 656}, '_': {672, 656}, '`': {696, 656},
			'{': {720, 656}, '|': {744, 656}, '}': {768, 656}, '~': {792, 656},
		},
		Text1Src: map[rune][2]int{
			'0': {816, 656},
			'1': {840, 656}, '2': {864, 656}, '3': {888, 656}, '4': {912, 656}, '5': {936, 656},
			'6': {960, 656}, '7': {984, 656}, '8': {1008, 656}, '9': {1032, 656}, 'A': {1056, 656},
			'a': {1080, 656}, 'Ä': {1104, 656}, 'ä': {1128, 656}, 'B': {1152, 656}, 'b': {1176, 656},
			'C': {1200, 656}, 'c': {1224, 656}, 'D': {1248, 656}, 'd': {1272, 656}, 'E': {1296, 656},
			'e': {1320, 656},
			'F': {0, 716}, 'f': {24, 716}, 'G': {48, 716}, 'g': {72, 716}, 'H': {96, 716},
			'h': {120, 716}, 'I': {144, 716}, 'i': {168, 716}, 'J': {192, 716}, 'j': {216, 716},
			'K': {240, 716}, 'k': {264, 716}, 'L': {288, 716}, 'l': {312, 716}, 'M': {336, 716},
			'm': {360, 716}, 'N': {384, 716}, 'n': {408, 716}, 'O': {432, 716}, 'o': {456, 716},
			'Ö': {480, 716}, 'ö': {504, 716}, 'P': {528, 716}, 'p': {552, 716}, 'Q': {576, 716},
			'q': {600, 716}, 'R': {624, 716}, 'r': {648, 716}, 'S': {672, 716}, 's': {696, 716},
			'T': {720, 716}, 't': {744, 716}, 'U': {768, 716}, 'u': {792, 716}, 'Ü': {816, 716},
			'ü': {840, 716}, 'V': {864, 716}, 'v': {888, 716}, 'W': {912, 716}, 'w': {936, 716},
			'X': {960, 716}, 'x': {984, 716}, 'Y': {1008, 716}, 'y': {1032, 716}, 'Z': {1056, 716},
			'z': {1080, 716}, ' ': {1104, 716}, '!': {1128, 716}, '"': {1152, 716}, '#': {1176, 716},
			'$': {1200, 716}, '%': {1224, 716}, '&': {1248, 716}, '\'': {1272, 716}, '(': {1296, 716},
			')': {1320, 716},
			'*': {0, 776}, '+': {24, 776}, ',': {48, 776}, '-': {72, 776}, '.': {96, 776},
			'/': {120, 776}, ':': {144, 776}, ';': {168, 776}, '<': {192, 776}, '=': {216, 776},
			'>': {240, 776}, '?': {264, 776}, '@': {288, 776}, '[': {312, 776}, '\\': {336, 776},
			']': {360, 776}, '^': {384, 776}, '_': {408, 776}, '`': {432, 776}, '{': {456, 776},
			'|': {480, 776}, '}': {504, 776}, '~': {528, 776},
		},
		ExpDimXY:    [2]int{1360, 836},
		BoardConfig: standardBoardConfig,
	},
	"norwegian": {
		TilesBytes: norwegianTilesBytes,
		Tile0Src: map[byte][2]int{
			1: {0, 0}, 2: {68, 0}, 3: {136, 0}, 4: {204, 0}, 5: {272, 0},
			6: {340, 0}, 7: {408, 0}, 8: {476, 0}, 9: {544, 0}, 10: {612, 0},
			11: {680, 0}, 12: {748, 0}, 13: {816, 0}, 14: {884, 0}, 15: {952, 0},
			16: {1020, 0}, 17: {1088, 0}, 18: {1156, 0}, 19: {1224, 0}, 20: {1292, 0},
			21: {0, 68}, 22: {68, 68}, 23: {136, 68}, 24: {204, 68}, 25: {272, 68},
			26: {340, 68}, 27: {408, 68}, 28: {476, 68}, 29: {544, 68}, 30: {612, 68},
			31: {680, 68}, 32: {748, 68}, 129: {816, 68}, 130: {884, 68}, 131: {952, 68},
			132: {1020, 68}, 133: {1088, 68}, 134: {1156, 68}, 135: {1224, 68}, 136: {1292, 68},
			137: {0, 136}, 138: {68, 136}, 139: {136, 136}, 140: {204, 136}, 141: {272, 136},
			142: {340, 136}, 143: {408, 136}, 144: {476, 136}, 145: {544, 136}, 146: {612, 136},
			147: {680, 136}, 148: {748, 136}, 149: {816, 136}, 150: {884, 136}, 151: {952, 136},
			152: {1020, 136}, 153: {1088, 136}, 154: {1156, 136}, 155: {1224, 136}, 156: {1292, 136},
			157: {0, 204}, 158: {68, 204}, 159: {136, 204}, 160: {204, 204}, 0: {272, 204},
		},
		Tile1Src: map[byte][2]int{
			1: {340, 204}, 2: {408, 204}, 3: {476, 204}, 4: {544, 204}, 5: {612, 204},
			6: {680, 204}, 7: {748, 204}, 8: {816, 204}, 9: {884, 204}, 10: {952, 204},
			11: {1020, 204}, 12: {1088, 204}, 13: {1156, 204}, 14: {1224, 204}, 15: {1292, 204},
			16: {0, 272}, 17: {68, 272}, 18: {136, 272}, 19: {204, 272}, 20: {272, 272},
			21: {340, 272}, 22: {408, 272}, 23: {476, 272}, 24: {544, 272}, 25: {612, 272},
			26: {680, 272}, 27: {748, 272}, 28: {816, 272}, 29: {884, 272}, 30: {952, 272},
			31: {1020, 272}, 32: {1088, 272}, 129: {1156, 272}, 130: {1224, 272}, 131: {1292, 272},
			132: {0, 340}, 133: {68, 340}, 134: {136, 340}, 135: {204, 340}, 136: {272, 340},
			137: {340, 340}, 138: {408, 340}, 139: {476, 340}, 140: {544, 340}, 141: {612, 340},
			142: {680, 340}, 143: {748, 340}, 144: {816, 340}, 145: {884, 340}, 146: {952, 340},
			147: {1020, 340}, 148: {1088, 340}, 149: {1156, 340}, 150: {1224, 340}, 151: {1292, 340},
			152: {0, 408}, 153: {68, 408}, 154: {136, 408}, 155: {204, 408}, 156: {272, 408},
			157: {340, 408}, 158: {408, 408}, 159: {476, 408}, 160: {544, 408}, 0: {612, 408},
		},
		BoardSrc: map[rune][2]int{
			'-': {680, 408}, '=': {748, 408}, '~': {816, 408}, '\'': {884, 408}, '"': {952, 408},
			'^': {1020, 408}, '*': {1088, 408}, ' ': {1156, 408},
		},
		TextXSrc: map[rune][2]int{
			'0': {0, 476}, '1': {24, 476}, '2': {48, 476}, '3': {72, 476}, '4': {96, 476},
			'5': {120, 476}, '6': {144, 476}, '7': {168, 476}, '8': {192, 476}, '9': {216, 476},
			'A': {240, 476}, 'a': {264, 476}, 'B': {288, 476}, 'b': {312, 476}, 'C': {336, 476},
			'c': {360, 476}, 'D': {384, 476}, 'd': {408, 476}, 'E': {432, 476}, 'e': {456, 476},
			'F': {480, 476}, 'f': {504, 476}, 'G': {528, 476}, 'g': {552, 476}, 'H': {576, 476},
			'h': {600, 476}, 'I': {624, 476}, 'i': {648, 476}, 'J': {672, 476}, 'j': {696, 476},
			'K': {720, 476}, 'k': {744, 476}, 'L': {768, 476}, 'l': {792, 476}, 'M': {816, 476},
			'm': {840, 476}, 'N': {864, 476}, 'n': {888, 476}, 'O': {912, 476}, 'o': {936, 476},
			'P': {960, 476}, 'p': {984, 476}, 'Q': {1008, 476}, 'q': {1032, 476}, 'R': {1056, 476},
			'r': {1080, 476}, 'S': {1104, 476}, 's': {1128, 476}, 'T': {1152, 476}, 't': {1176, 476},
			'U': {1200, 476}, 'u': {1224, 476}, 'V': {1248, 476}, 'v': {1272, 476}, 'W': {1296, 476},
			'w': {1320, 476},
			'X': {0, 536}, 'x': {24, 536}, 'Y': {48, 536}, 'y': {72, 536}, 'Ü': {96, 536},
			'ü': {120, 536}, 'Z': {144, 536}, 'z': {168, 536}, 'Æ': {192, 536}, 'æ': {216, 536},
			'Ä': {240, 536}, 'ä': {264, 536}, 'Ø': {288, 536}, 'ø': {312, 536}, 'Ö': {336, 536},
			'ö': {360, 536}, 'Å': {384, 536}, 'å': {408, 536}, ' ': {432, 536}, '!': {456, 536},
			'"': {480, 536}, '#': {504, 536}, '$': {528, 536}, '%': {552, 536}, '&': {576, 536},
			'\'': {600, 536}, '(': {624, 536}, ')': {648, 536}, '*': {672, 536}, '+': {696, 536},
			',': {720, 536}, '-': {744, 536}, '.': {768, 536}, '/': {792, 536}, ':': {816, 536},
			';': {840, 536}, '<': {864, 536}, '=': {888, 536}, '>': {912, 536}, '?': {936, 536},
			'@': {960, 536}, '[': {984, 536}, '\\': {1008, 536}, ']': {1032, 536}, '^': {1056, 536},
			'_': {1080, 536}, '`': {1104, 536}, '{': {1128, 536}, '|': {1152, 536}, '}': {1176, 536},
			'~': {1200, 536},
		},
		Text0Src: map[rune][2]int{
			'0': {1224, 536}, '1': {1248, 536}, '2': {1272, 536}, '3': {1296, 536},
			'4': {1320, 536},
			'5': {0, 596}, '6': {24, 596}, '7': {48, 596}, '8': {72, 596}, '9': {96, 596},
			'A': {120, 596}, 'a': {144, 596}, 'B': {168, 596}, 'b': {192, 596}, 'C': {216, 596},
			'c': {240, 596}, 'D': {264, 596}, 'd': {288, 596}, 'E': {312, 596}, 'e': {336, 596},
			'F': {360, 596}, 'f': {384, 596}, 'G': {408, 596}, 'g': {432, 596}, 'H': {456, 596},
			'h': {480, 596}, 'I': {504, 596}, 'i': {528, 596}, 'J': {552, 596}, 'j': {576, 596},
			'K': {600, 596}, 'k': {624, 596}, 'L': {648, 596}, 'l': {672, 596}, 'M': {696, 596},
			'm': {720, 596}, 'N': {744, 596}, 'n': {768, 596}, 'O': {792, 596}, 'o': {816, 596},
			'P': {840, 596}, 'p': {864, 596}, 'Q': {888, 596}, 'q': {912, 596}, 'R': {936, 596},
			'r': {960, 596}, 'S': {984, 596}, 's': {1008, 596}, 'T': {1032, 596}, 't': {1056, 596},
			'U': {1080, 596}, 'u': {1104, 596}, 'V': {1128, 596}, 'v': {1152, 596}, 'W': {1176, 596},
			'w': {1200, 596}, 'X': {1224, 596}, 'x': {1248, 596}, 'Y': {1272, 596}, 'y': {1296, 596},
			'Ü': {1320, 596},
			'ü': {0, 656}, 'Z': {24, 656}, 'z': {48, 656}, 'Æ': {72, 656}, 'æ': {96, 656},
			'Ä': {120, 656}, 'ä': {144, 656}, 'Ø': {168, 656}, 'ø': {192, 656}, 'Ö': {216, 656},
			'ö': {240, 656}, 'Å': {264, 656}, 'å': {288, 656}, ' ': {312, 656}, '!': {336, 656},
			'"': {360, 656}, '#': {384, 656}, '$': {408, 656}, '%': {432, 656}, '&': {456, 656},
			'\'': {480, 656}, '(': {504, 656}, ')': {528, 656}, '*': {552, 656}, '+': {576, 656},
			',': {600, 656}, '-': {624, 656}, '.': {648, 656}, '/': {672, 656}, ':': {696, 656},
			';': {720, 656}, '<': {744, 656}, '=': {768, 656}, '>': {792, 656}, '?': {816, 656},
			'@': {840, 656}, '[': {864, 656}, '\\': {888, 656}, ']': {912, 656}, '^': {936, 656},
			'_': {960, 656}, '`': {984, 656}, '{': {1008, 656}, '|': {1032, 656}, '}': {1056, 656},
			'~': {1080, 656},
		},
		Text1Src: map[rune][2]int{
			'0': {1104, 656}, '1': {1128, 656}, '2': {1152, 656}, '3': {1176, 656},
			'4': {1200, 656}, '5': {1224, 656}, '6': {1248, 656}, '7': {1272, 656}, '8': {1296, 656},
			'9': {1320, 656},
			'A': {0, 716}, 'a': {24, 716}, 'B': {48, 716}, 'b': {72, 716}, 'C': {96, 716},
			'c': {120, 716}, 'D': {144, 716}, 'd': {168, 716}, 'E': {192, 716}, 'e': {216, 716},
			'F': {240, 716}, 'f': {264, 716}, 'G': {288, 716}, 'g': {312, 716}, 'H': {336, 716},
			'h': {360, 716}, 'I': {384, 716}, 'i': {408, 716}, 'J': {432, 716}, 'j': {456, 716},
			'K': {480, 716}, 'k': {504, 716}, 'L': {528, 716}, 'l': {552, 716}, 'M': {576, 716},
			'm': {600, 716}, 'N': {624, 716}, 'n': {648, 716}, 'O': {672, 716}, 'o': {696, 716},
			'P': {720, 716}, 'p': {744, 716}, 'Q': {768, 716}, 'q': {792, 716}, 'R': {816, 716},
			'r': {840, 716}, 'S': {864, 716}, 's': {888, 716}, 'T': {912, 716}, 't': {936, 716},
			'U': {960, 716}, 'u': {984, 716}, 'V': {1008, 716}, 'v': {1032, 716}, 'W': {1056, 716},
			'w': {1080, 716}, 'X': {1104, 716}, 'x': {1128, 716}, 'Y': {1152, 716}, 'y': {1176, 716},
			'Ü': {1200, 716}, 'ü': {1224, 716}, 'Z': {1248, 716}, 'z': {1272, 716}, 'Æ': {1296, 716},
			'æ': {1320, 716},
			'Ä': {0, 776}, 'ä': {24, 776}, 'Ø': {48, 776}, 'ø': {72, 776}, 'Ö': {96, 776},
			'ö': {120, 776}, 'Å': {144, 776}, 'å': {168, 776}, ' ': {192, 776}, '!': {216, 776},
			'"': {240, 776}, '#': {264, 776}, '$': {288, 776}, '%': {312, 776}, '&': {336, 776},
			'\'': {360, 776}, '(': {384, 776}, ')': {408, 776}, '*': {432, 776}, '+': {456, 776},
			',': {480, 776}, '-': {504, 776}, '.': {528, 776}, '/': {552, 776}, ':': {576, 776},
			';': {600, 776}, '<': {624, 776}, '=': {648, 776}, '>': {672, 776}, '?': {696, 776},
			'@': {720, 776}, '[': {744, 776}, '\\': {768, 776}, ']': {792, 776}, '^': {816, 776},
			'_': {840, 776}, '`': {864, 776}, '{': {888, 776}, '|': {912, 776}, '}': {936, 776},
			'~': {960, 776},
		},
		ExpDimXY:    [2]int{1360, 836},
		BoardConfig: standardBoardConfig,
	},
	"catalan": {
		TilesBytes: catalanTilesBytes,
		Tile0Src: map[byte][2]int{
			1: {0, 0}, 2: {68, 0}, 3: {136, 0}, 4: {204, 0}, 5: {272, 0},
			6: {340, 0}, 7: {408, 0}, 8: {476, 0}, 9: {544, 0}, 10: {612, 0},
			11: {680, 0}, 12: {748, 0}, 13: {816, 0}, 14: {884, 0}, 15: {952, 0},
			16: {1020, 0}, 17: {1088, 0}, 18: {1156, 0}, 19: {1224, 0}, 20: {1292, 0},
			21: {0, 68}, 22: {68, 68}, 23: {136, 68}, 24: {204, 68}, 25: {272, 68},
			26: {340, 68}, 129: {408, 68}, 130: {476, 68}, 131: {544, 68}, 132: {612, 68},
			133: {680, 68}, 134: {748, 68}, 135: {816, 68}, 136: {884, 68}, 137: {952, 68},
			138: {1020, 68}, 139: {1088, 68}, 140: {1156, 68}, 141: {1224, 68}, 142: {1292, 68},
			143: {0, 136}, 144: {68, 136}, 145: {136, 136}, 146: {204, 136}, 147: {272, 136},
			148: {340, 136}, 149: {408, 136}, 150: {476, 136}, 151: {544, 136}, 152: {612, 136},
			153: {680, 136}, 154: {748, 136}, 0: {816, 136},
		},
		Tile1Src: map[byte][2]int{
			1: {884, 136}, 2: {952, 136},
			3: {1020, 136}, 4: {1088, 136}, 5: {1156, 136}, 6: {1224, 136}, 7: {1292, 136},
			8: {0, 204}, 9: {68, 204}, 10: {136, 204}, 11: {204, 204}, 12: {272, 204},
			13: {340, 204}, 14: {408, 204}, 15: {476, 204}, 16: {544, 204}, 17: {612, 204},
			18: {680, 204}, 19: {748, 204}, 20: {816, 204}, 21: {884, 204}, 22: {952, 204},
			23: {1020, 204}, 24: {1088, 204}, 25: {1156, 204}, 26: {1224, 204}, 129: {1292, 204},
			130: {0, 272}, 131: {68, 272}, 132: {136, 272}, 133: {204, 272}, 134: {272, 272},
			135: {340, 272}, 136: {408, 272}, 137: {476, 272}, 138: {544, 272}, 139: {612, 272},
			140: {680, 272}, 141: {748, 272}, 142: {816, 272}, 143: {884, 272}, 144: {952, 272},
			145: {1020, 272}, 146: {1088, 272}, 147: {1156, 272}, 148: {1224, 272}, 149: {1292, 272},
			150: {0, 340}, 151: {68, 340}, 152: {136, 340}, 153: {204, 340}, 154: {272, 340},
			0: {340, 340},
		},
		BoardSrc: map[rune][2]int{
			'-': {408, 340}, '=': {476, 340}, '~': {544, 340}, '\'': {612, 340},
			'"': {680, 340}, '^': {748, 340}, '*': {816, 340}, ' ': {884, 340},
		},
		TextXSrc: map[rune][2]int{
			'0': {0, 408}, '1': {24, 408}, '2': {48, 408}, '3': {72, 408}, '4': {96, 408},
			'5': {120, 408}, '6': {144, 408}, '7': {168, 408}, '8': {192, 408}, '9': {216, 408},
			'A': {240, 408}, 'a': {264, 408}, 'B': {288, 408}, 'b': {312, 408}, 'C': {336, 408},
			'c': {360, 408}, 'Ç': {384, 408}, 'ç': {408, 408}, 'D': {432, 408}, 'd': {456, 408},
			'E': {480, 408}, 'e': {504, 408}, 'F': {528, 408}, 'f': {552, 408}, 'G': {576, 408},
			'g': {600, 408}, 'H': {624, 408}, 'h': {648, 408}, 'I': {672, 408}, 'i': {696, 408},
			'J': {720, 408}, 'j': {744, 408}, 'L': {768, 408}, 'l': {792, 408}, '·': {816, 408},
			'M': {840, 408}, 'm': {864, 408}, 'N': {888, 408}, 'n': {912, 408}, 'Y': {936, 408},
			'y': {960, 408}, 'O': {984, 408}, 'o': {1008, 408}, 'P': {1032, 408}, 'p': {1056, 408},
			'Q': {1080, 408}, 'U': {1104, 408}, 'q': {1128, 408}, 'u': {1152, 408}, 'R': {1176, 408},
			'r': {1200, 408}, 'S': {1224, 408}, 's': {1248, 408}, 'T': {1272, 408}, 't': {1296, 408},
			'V': {1320, 408},
			'v': {0, 468}, 'X': {24, 468}, 'x': {48, 468}, 'Z': {72, 468}, 'z': {96, 468},
			' ': {120, 468}, '!': {144, 468}, '"': {168, 468}, '#': {192, 468}, '$': {216, 468},
			'%': {240, 468}, '&': {264, 468}, '\'': {288, 468}, '(': {312, 468}, ')': {336, 468},
			'*': {360, 468}, '+': {384, 468}, ',': {408, 468}, '-': {432, 468}, '.': {456, 468},
			'/': {480, 468}, ':': {504, 468}, ';': {528, 468}, '<': {552, 468}, '=': {576, 468},
			'>': {600, 468}, '?': {624, 468}, '@': {648, 468}, 'K': {672, 468}, 'W': {696, 468},
			'[': {720, 468}, '\\': {744, 468}, ']': {768, 468}, '^': {792, 468}, '_': {816, 468},
			'`': {840, 468}, 'k': {864, 468}, 'w': {888, 468}, '{': {912, 468}, '|': {936, 468},
			'}': {960, 468}, '~': {984, 468},
		},
		Text0Src: map[rune][2]int{
			'0': {1008, 468}, '1': {1032, 468}, '2': {1056, 468},
			'3': {1080, 468}, '4': {1104, 468}, '5': {1128, 468}, '6': {1152, 468}, '7': {1176, 468},
			'8': {1200, 468}, '9': {1224, 468}, 'A': {1248, 468}, 'a': {1272, 468}, 'B': {1296, 468},
			'b': {1320, 468},
			'C': {0, 528}, 'c': {24, 528}, 'Ç': {48, 528}, 'ç': {72, 528}, 'D': {96, 528},
			'd': {120, 528}, 'E': {144, 528}, 'e': {168, 528}, 'F': {192, 528}, 'f': {216, 528},
			'G': {240, 528}, 'g': {264, 528}, 'H': {288, 528}, 'h': {312, 528}, 'I': {336, 528},
			'i': {360, 528}, 'J': {384, 528}, 'j': {408, 528}, 'L': {432, 528}, 'l': {456, 528},
			'·': {480, 528}, 'M': {504, 528}, 'm': {528, 528}, 'N': {552, 528}, 'n': {576, 528},
			'Y': {600, 528}, 'y': {624, 528}, 'O': {648, 528}, 'o': {672, 528}, 'P': {696, 528},
			'p': {720, 528}, 'Q': {744, 528}, 'U': {768, 528}, 'q': {792, 528}, 'u': {816, 528},
			'R': {840, 528}, 'r': {864, 528}, 'S': {888, 528}, 's': {912, 528}, 'T': {936, 528},
			't': {960, 528}, 'V': {984, 528}, 'v': {1008, 528}, 'X': {1032, 528}, 'x': {1056, 528},
			'Z': {1080, 528}, 'z': {1104, 528}, ' ': {1128, 528}, '!': {1152, 528}, '"': {1176, 528},
			'#': {1200, 528}, '$': {1224, 528}, '%': {1248, 528}, '&': {1272, 528}, '\'': {1296, 528},
			'(': {1320, 528},
			')': {0, 588}, '*': {24, 588}, '+': {48, 588}, ',': {72, 588}, '-': {96, 588},
			'.': {120, 588}, '/': {144, 588}, ':': {168, 588}, ';': {192, 588}, '<': {216, 588},
			'=': {240, 588}, '>': {264, 588}, '?': {288, 588}, '@': {312, 588}, 'K': {336, 588},
			'W': {360, 588}, '[': {384, 588}, '\\': {408, 588}, ']': {432, 588}, '^': {456, 588},
			'_': {480, 588}, '`': {504, 588}, 'k': {528, 588}, 'w': {552, 588}, '{': {576, 588},
			'|': {600, 588}, '}': {624, 588}, '~': {648, 588},
		},
		Text1Src: map[rune][2]int{
			'0': {672, 588}, '1': {696, 588},
			'2': {720, 588}, '3': {744, 588}, '4': {768, 588}, '5': {792, 588}, '6': {816, 588},
			'7': {840, 588}, '8': {864, 588}, '9': {888, 588}, 'A': {912, 588}, 'a': {936, 588},
			'B': {960, 588}, 'b': {984, 588}, 'C': {1008, 588}, 'c': {1032, 588}, 'Ç': {1056, 588},
			'ç': {1080, 588}, 'D': {1104, 588}, 'd': {1128, 588}, 'E': {1152, 588}, 'e': {1176, 588},
			'F': {1200, 588}, 'f': {1224, 588}, 'G': {1248, 588}, 'g': {1272, 588}, 'H': {1296, 588},
			'h': {1320, 588},
			'I': {0, 648}, 'i': {24, 648}, 'J': {48, 648}, 'j': {72, 648}, 'L': {96, 648},
			'l': {120, 648}, '·': {144, 648}, 'M': {168, 648}, 'm': {192, 648}, 'N': {216, 648},
			'n': {240, 648}, 'Y': {264, 648}, 'y': {288, 648}, 'O': {312, 648}, 'o': {336, 648},
			'P': {360, 648}, 'p': {384, 648}, 'Q': {408, 648}, 'U': {432, 648}, 'q': {456, 648},
			'u': {480, 648}, 'R': {504, 648}, 'r': {528, 648}, 'S': {552, 648}, 's': {576, 648},
			'T': {600, 648}, 't': {624, 648}, 'V': {648, 648}, 'v': {672, 648}, 'X': {696, 648},
			'x': {720, 648}, 'Z': {744, 648}, 'z': {768, 648}, ' ': {792, 648}, '!': {816, 648},
			'"': {840, 648}, '#': {864, 648}, '$': {888, 648}, '%': {912, 648}, '&': {936, 648},
			'\'': {960, 648}, '(': {984, 648}, ')': {1008, 648}, '*': {1032, 648}, '+': {1056, 648},
			',': {1080, 648}, '-': {1104, 648}, '.': {1128, 648}, '/': {1152, 648}, ':': {1176, 648},
			';': {1200, 648}, '<': {1224, 648}, '=': {1248, 648}, '>': {1272, 648}, '?': {1296, 648},
			'@': {1320, 648},
			'K': {0, 708}, 'W': {24, 708}, '[': {48, 708}, '\\': {72, 708}, ']': {96, 708},
			'^': {120, 708}, '_': {144, 708}, '`': {168, 708}, 'k': {192, 708}, 'w': {216, 708},
			'{': {240, 708}, '|': {264, 708}, '}': {288, 708}, '~': {312, 708},
		},
		ExpDimXY:    [2]int{1360, 768},
		BoardConfig: standardBoardConfig,
	},
	"polish": {
		TilesBytes: polishTilesBytes,
		Tile0Src: map[byte][2]int{
			1: {0, 0}, 2: {68, 0}, 3: {136, 0}, 4: {204, 0}, 5: {272, 0},
			6: {340, 0}, 7: {408, 0}, 8: {476, 0}, 9: {544, 0}, 10: {612, 0},
			11: {680, 0}, 12: {748, 0}, 13: {816, 0}, 14: {884, 0}, 15: {952, 0},
			16: {1020, 0}, 17: {1088, 0}, 18: {1156, 0}, 19: {1224, 0}, 20: {1292, 0},
			21: {0, 68}, 22: {68, 68}, 23: {136, 68}, 24: {204, 68}, 25: {272, 68},
			26: {340, 68}, 27: {408, 68}, 28: {476, 68}, 29: {544, 68}, 30: {612, 68},
			31: {680, 68}, 32: {748, 68}, 129: {816, 68}, 130: {884, 68}, 131: {952, 68},
			132: {1020, 68}, 133: {1088, 68}, 134: {1156, 68}, 135: {1224, 68}, 136: {1292, 68},
			137: {0, 136}, 138: {68, 136}, 139: {136, 136}, 140: {204, 136}, 141: {272, 136},
			142: {340, 136}, 143: {408, 136}, 144: {476, 136}, 145: {544, 136}, 146: {612, 136},
			147: {680, 136}, 148: {748, 136}, 149: {816, 136}, 150: {884, 136}, 151: {952, 136},
			152: {1020, 136}, 153: {1088, 136}, 154: {1156, 136}, 155: {1224, 136}, 156: {1292, 136},
			157: {0, 204}, 158: {68, 204}, 159: {136, 204}, 160: {204, 204}, 0: {272, 204},
		},
		Tile1Src: map[byte][2]int{
			1: {340, 204}, 2: {408, 204}, 3: {476, 204}, 4: {544, 204}, 5: {612, 204},
			6: {680, 204}, 7: {748, 204}, 8: {816, 204}, 9: {884, 204}, 10: {952, 204},
			11: {1020, 204}, 12: {1088, 204}, 13: {1156, 204}, 14: {1224, 204}, 15: {1292, 204},
			16: {0, 272}, 17: {68, 272}, 18: {136, 272}, 19: {204, 272}, 20: {272, 272},
			21: {340, 272}, 22: {408, 272}, 23: {476, 272}, 24: {544, 272}, 25: {612, 272},
			26: {680, 272}, 27: {748, 272}, 28: {816, 272}, 29: {884, 272}, 30: {952, 272},
			31: {1020, 272}, 32: {1088, 272}, 129: {1156, 272}, 130: {1224, 272}, 131: {1292, 272},
			132: {0, 340}, 133: {68, 340}, 134: {136, 340}, 135: {204, 340}, 136: {272, 340},
			137: {340, 340}, 138: {408, 340}, 139: {476, 340}, 140: {544, 340}, 141: {612, 340},
			142: {680, 340}, 143: {748, 340}, 144: {816, 340}, 145: {884, 340}, 146: {952, 340},
			147: {1020, 340}, 148: {1088, 340}, 149: {1156, 340}, 150: {1224, 340}, 151: {1292, 340},
			152: {0, 408}, 153: {68, 408}, 154: {136, 408}, 155: {204, 408}, 156: {272, 408},
			157: {340, 408}, 158: {408, 408}, 159: {476, 408}, 160: {544, 408}, 0: {612, 408},
		},
		BoardSrc: map[rune][2]int{
			'-': {680, 408}, '=': {748, 408}, '~': {816, 408}, '\'': {884, 408}, '"': {952, 408},
			'^': {1020, 408}, '*': {1088, 408}, ' ': {1156, 408},
		},
		TextXSrc: map[rune][2]int{
			'0': {0, 476}, '1': {24, 476}, '2': {48, 476}, '3': {72, 476}, '4': {96, 476},
			'5': {120, 476}, '6': {144, 476}, '7': {168, 476}, '8': {192, 476}, '9': {216, 476},
			'A': {240, 476}, 'a': {264, 476}, 'Ą': {288, 476}, 'ą': {312, 476}, 'B': {336, 476},
			'b': {360, 476}, 'C': {384, 476}, 'c': {408, 476}, 'Ć': {432, 476}, 'ć': {456, 476},
			'D': {480, 476}, 'd': {504, 476}, 'E': {528, 476}, 'e': {552, 476}, 'Ę': {576, 476},
			'ę': {600, 476}, 'F': {624, 476}, 'f': {648, 476}, 'G': {672, 476}, 'g': {696, 476},
			'H': {720, 476}, 'h': {744, 476}, 'I': {768, 476}, 'i': {792, 476}, 'J': {816, 476},
			'j': {840, 476}, 'K': {864, 476}, 'k': {888, 476}, 'L': {912, 476}, 'l': {936, 476},
			'Ł': {960, 476}, 'ł': {984, 476}, 'M': {1008, 476}, 'm': {1032, 476}, 'N': {1056, 476},
			'n': {1080, 476}, 'Ń': {1104, 476}, 'ń': {1128, 476}, 'O': {1152, 476}, 'o': {1176, 476},
			'Ó': {1200, 476}, 'ó': {1224, 476}, 'P': {1248, 476}, 'p': {1272, 476}, 'R': {1296, 476},
			'r': {1320, 476},
			'S': {0, 536}, 's': {24, 536}, 'Ś': {48, 536}, 'ś': {72, 536}, 'T': {96, 536},
			't': {120, 536}, 'U': {144, 536}, 'u': {168, 536}, 'W': {192, 536}, 'w': {216, 536},
			'Y': {240, 536}, 'y': {264, 536}, 'Z': {288, 536}, 'z': {312, 536}, 'Ź': {336, 536},
			'ź': {360, 536}, 'Ż': {384, 536}, 'ż': {408, 536}, ' ': {432, 536}, '!': {456, 536},
			'"': {480, 536}, '#': {504, 536}, '$': {528, 536}, '%': {552, 536}, '&': {576, 536},
			'\'': {600, 536}, '(': {624, 536}, ')': {648, 536}, '*': {672, 536}, '+': {696, 536},
			',': {720, 536}, '-': {744, 536}, '.': {768, 536}, '/': {792, 536}, ':': {816, 536},
			';': {840, 536}, '<': {864, 536}, '=': {888, 536}, '>': {912, 536}, '?': {936, 536},
			'@': {960, 536}, 'Q': {984, 536}, 'V': {1008, 536}, 'X': {1032, 536}, '[': {1056, 536},
			'\\': {1080, 536}, ']': {1104, 536}, '^': {1128, 536}, '_': {1152, 536}, '`': {1176, 536},
			'q': {1200, 536}, 'v': {1224, 536}, 'x': {1248, 536}, '{': {1272, 536}, '|': {1296, 536},
			'}': {1320, 536},
			'~': {0, 596},
		},
		Text0Src: map[rune][2]int{
			'0': {24, 596}, '1': {48, 596}, '2': {72, 596}, '3': {96, 596},
			'4': {120, 596}, '5': {144, 596}, '6': {168, 596}, '7': {192, 596}, '8': {216, 596},
			'9': {240, 596}, 'A': {264, 596}, 'a': {288, 596}, 'Ą': {312, 596}, 'ą': {336, 596},
			'B': {360, 596}, 'b': {384, 596}, 'C': {408, 596}, 'c': {432, 596}, 'Ć': {456, 596},
			'ć': {480, 596}, 'D': {504, 596}, 'd': {528, 596}, 'E': {552, 596}, 'e': {576, 596},
			'Ę': {600, 596}, 'ę': {624, 596}, 'F': {648, 596}, 'f': {672, 596}, 'G': {696, 596},
			'g': {720, 596}, 'H': {744, 596}, 'h': {768, 596}, 'I': {792, 596}, 'i': {816, 596},
			'J': {840, 596}, 'j': {864, 596}, 'K': {888, 596}, 'k': {912, 596}, 'L': {936, 596},
			'l': {960, 596}, 'Ł': {984, 596}, 'ł': {1008, 596}, 'M': {1032, 596}, 'm': {1056, 596},
			'N': {1080, 596}, 'n': {1104, 596}, 'Ń': {1128, 596}, 'ń': {1152, 596}, 'O': {1176, 596},
			'o': {1200, 596}, 'Ó': {1224, 596}, 'ó': {1248, 596}, 'P': {1272, 596}, 'p': {1296, 596},
			'R': {1320, 596},
			'r': {0, 656}, 'S': {24, 656}, 's': {48, 656}, 'Ś': {72, 656}, 'ś': {96, 656},
			'T': {120, 656}, 't': {144, 656}, 'U': {168, 656}, 'u': {192, 656}, 'W': {216, 656},
			'w': {240, 656}, 'Y': {264, 656}, 'y': {288, 656}, 'Z': {312, 656}, 'z': {336, 656},
			'Ź': {360, 656}, 'ź': {384, 656}, 'Ż': {408, 656}, 'ż': {432, 656}, ' ': {456, 656},
			'!': {480, 656}, '"': {504, 656}, '#': {528, 656}, '$': {552, 656}, '%': {576, 656},
			'&': {600, 656}, '\'': {624, 656}, '(': {648, 656}, ')': {672, 656}, '*': {696, 656},
			'+': {720, 656}, ',': {744, 656}, '-': {768, 656}, '.': {792, 656}, '/': {816, 656},
			':': {840, 656}, ';': {864, 656}, '<': {888, 656}, '=': {912, 656}, '>': {936, 656},
			'?': {960, 656}, '@': {984, 656}, 'Q': {1008, 656}, 'V': {1032, 656}, 'X': {1056, 656},
			'[': {1080, 656}, '\\': {1104, 656}, ']': {1128, 656}, '^': {1152, 656}, '_': {1176, 656},
			'`': {1200, 656}, 'q': {1224, 656}, 'v': {1248, 656}, 'x': {1272, 656}, '{': {1296, 656},
			'|': {1320, 656},
			'}': {0, 716}, '~': {24, 716},
		},
		Text1Src: map[rune][2]int{
			'0': {48, 716}, '1': {72, 716}, '2': {96, 716},
			'3': {120, 716}, '4': {144, 716}, '5': {168, 716}, '6': {192, 716}, '7': {216, 716},
			'8': {240, 716}, '9': {264, 716}, 'A': {288, 716}, 'a': {312, 716}, 'Ą': {336, 716},
			'ą': {360, 716}, 'B': {384, 716}, 'b': {408, 716}, 'C': {432, 716}, 'c': {456, 716},
			'Ć': {480, 716}, 'ć': {504, 716}, 'D': {528, 716}, 'd': {552, 716}, 'E': {576, 716},
			'e': {600, 716}, 'Ę': {624, 716}, 'ę': {648, 716}, 'F': {672, 716}, 'f': {696, 716},
			'G': {720, 716}, 'g': {744, 716}, 'H': {768, 716}, 'h': {792, 716}, 'I': {816, 716},
			'i': {840, 716}, 'J': {864, 716}, 'j': {888, 716}, 'K': {912, 716}, 'k': {936, 716},
			'L': {960, 716}, 'l': {984, 716}, 'Ł': {1008, 716}, 'ł': {1032, 716}, 'M': {1056, 716},
			'm': {1080, 716}, 'N': {1104, 716}, 'n': {1128, 716}, 'Ń': {1152, 716}, 'ń': {1176, 716},
			'O': {1200, 716}, 'o': {1224, 716}, 'Ó': {1248, 716}, 'ó': {1272, 716}, 'P': {1296, 716},
			'p': {1320, 716},
			'R': {0, 776}, 'r': {24, 776}, 'S': {48, 776}, 's': {72, 776}, 'Ś': {96, 776},
			'ś': {120, 776}, 'T': {144, 776}, 't': {168, 776}, 'U': {192, 776}, 'u': {216, 776},
			'W': {240, 776}, 'w': {264, 776}, 'Y': {288, 776}, 'y': {312, 776}, 'Z': {336, 776},
			'z': {360, 776}, 'Ź': {384, 776}, 'ź': {408, 776}, 'Ż': {432, 776}, 'ż': {456, 776},
			' ': {480, 776}, '!': {504, 776}, '"': {528, 776}, '#': {552, 776}, '$': {576, 776},
			'%': {600, 776}, '&': {624, 776}, '\'': {648, 776}, '(': {672, 776}, ')': {696, 776},
			'*': {720, 776}, '+': {744, 776}, ',': {768, 776}, '-': {792, 776}, '.': {816, 776},
			'/': {840, 776}, ':': {864, 776}, ';': {888, 776}, '<': {912, 776}, '=': {936, 776},
			'>': {960, 776}, '?': {984, 776}, '@': {1008, 776}, 'Q': {1032, 776}, 'V': {1056, 776},
			'X': {1080, 776}, '[': {1104, 776}, '\\': {1128, 776}, ']': {1152, 776}, '^': {1176, 776},
			'_': {1200, 776}, '`': {1224, 776}, 'q': {1248, 776}, 'v': {1272, 776}, 'x': {1296, 776},
			'{': {1320, 776},
			'|': {0, 836}, '}': {24, 836}, '~': {48, 836},
		},
		ExpDimXY:    [2]int{1360, 896},
		BoardConfig: standardBoardConfig,
	},
}

// Some diagrams may help understand the rendering code.

// Initial version:
// not to scale:
// +---------------+ - a
// | +-----------+ | - b (b-a = padTop)
// | | header    | |
// | +-----------+ | - c (c-b = headerHeight)
// | +-----------+ | - d (d-c = padHeader)
// | | board     | |
// | |           | |
// | |           | |
// | |           | |
// | +-----------+ | - e
// +---------------+ - f (f-e = padBottom)
// | |           | |
// w x           y z (x-w = padLeft, z-y = padRight)
//
// Board sprites are squareDim * squareDim and are opaque.
// Tile sprites are squareDim * squareDim and are transparent.
//
// header:
// - header.png is left-aligned at x and cropped past y
// - the top-left pixel is used as background (to fill z-y, x-w, f-e,
//   d-c, b-a, and the part to the right of the header)
// - (assumption: the logo has rounded corner)
//
// board:
// - e-d and y-x exactly fit the board, plus one pixel each
// - the board spaces have lines at bottom and left
// - so one pixel high of the bottom row and one pixel wide of the leftmost
//   column of the NoBonus square are repeated as the top and right borders of
//   the board
// - hence, board origin is at (x, d+1) (to account for the additional padding)

// Second version:
// In addition to above.
// +---------------+
// | +-----------+ | - b
// | | header+   | |
// | +-----------+ | - c
// | +-----------+ |
// | | board     | |
// | |           | |
// | |           | |
// | |           | |
// | +-----------+ | - g
// | +-----------+ | - h (h-g = padRack)
// | | rack      | |
// | +-----------+ | - i (i-h = squareDim)
// | +-----------+ | - j (j-i = padSpread)
// | | spread    | |
// | +-----------+ | - k (k-j = spreadHeight)
// +---------------+ - l (l-k = padBottom)
//   |           |
//   x           y
//
// Text sprites are monospacedFontDimX * monospacedFontDimY and are currently opaque.
//
// header+:
// - c-b is the taller of header height and 1 line of text (monospacedFontDimY)
// - header and text are vertically centered here
// - text and thrown tiles may overlap header image
// - header is still left-aligned, but if the header is too short would be centered
// - headerTop and textTop measure from top of image
// - cumulative scores at top right is "[score0] [score1]" (brackets are just colored spaces)
// - score earned this turn is at top center, as signed number ("+0")
// - exchanges and withdrawn tiles go to top center of this region (not necessarily textTop)
// - (assumption: cumulative scores will not overflow the given width, otherwise panic)
//
// rack:
// - current rack is shown centered between y-x
// - tiles have a gap of rackGap (see formula in code)
// - rackY measure from top of image
// - (assumption: rack will not overflow the given width, otherwise panic)
//
// spread:
// - spread bar is centered between y-x
// - it takes spreadMax steps to reach y or x

type BoardDrawer struct {
	Colors             []color.Color // all *image.Paletted in this struct share this palette
	HeaderPalImg       *image.Paletted
	Tile0Sprite        map[byte]*image.Paletted // SubImage of the original tiles sprites
	Tile1Sprite        map[byte]*image.Paletted
	BoardSprite        map[rune]*image.Paletted
	TextXSprite        map[rune]*image.Paletted
	Text0Sprite        map[rune]*image.Paletted
	Text1Sprite        map[rune]*image.Paletted
	BoardConfig        [][]rune
	EmptyBoardPalImg   *image.Paletted
	PadLeft            int
	PadTop             int
	PadRight           int
	PadBottom          int
	PadHeader          int
	PadRack            int
	RackGap            int
	HeaderHeight       int
	PadSpread          int
	SpreadHeight       int
	SpreadMax          int
	PaddingColorIndex  byte
	BackXColorIndex    byte
	Back0ColorIndex    byte
	Back1ColorIndex    byte
	LetterDistribution *tilemapping.LetterDistribution
}

var BoardDrawers map[string]*BoardDrawer

func validateBoardConfig(boardConfig [][]rune) error {
	nRows := len(boardConfig)
	if nRows < 1 {
		return fmt.Errorf("expecting at least 1 row")
	}

	nCols := len(boardConfig[0])
	for i, row := range boardConfig {
		if i > 0 && len(row) != nCols {
			return fmt.Errorf("expecting row %d to have length %d", i+1, nCols)
		}
	}

	return nil
}

func getSprite(sprites map[rune]*image.Paletted, r, d rune) *image.Paletted {
	sprite, ok := sprites[r]
	if !ok {
		sprite = sprites[d]
	}
	return sprite
}

func getTileSprite(sprites map[byte]*image.Paletted, ml tilemapping.MachineLetter) *image.Paletted {
	sprite, ok := sprites[byte(ml)]
	if !ok {
		sprite = sprites[0]
	}
	return sprite
}

// Missed opportunity to use the word unicolor.
// Does not work with empty image.
func isImageOneColor(src *image.Paletted) bool {
	srcP := src.PixOffset(src.Rect.Min.X, src.Rect.Min.Y)
	c := src.Pix[srcP]
	dx, dy := src.Rect.Dx(), src.Rect.Dy()
	for y := 0; y < dy; y++ {
		for x := 0; x < dx; x++ {
			if c != src.Pix[srcP+x] {
				return false
			}
		}
		srcP += src.Stride
	}
	return true
}

var displacementRatioVerA []float64
var displacementRatioVerB []float64
var displacementRatioVerC []float64

func init() {
	// For animation.
	{
		numSteps := 10
		displacementRatioVerA = make([]float64, numSteps+1)
		for i := 1; i < numSteps; i++ {
			// These numbers range from 0.0 (start point) to 1.0 (end point).
			// There are some choices here, such as:
			// "linear": float64(i) / float64(numSteps)
			// "ease-out": math.Sin(float64(math.Pi/2) * float64(i) / float64(numSteps))
			// "ease-in-out": (1 - math.Cos(float64(math.Pi) * float64(i) / float64(numSteps)))/2
			// Reference: https://developers.google.com/web/fundamentals/design-and-ux/animations/the-basics-of-easing
			// This reference explains why ease-out is preferred.
			displacementRatioVerA[i] = math.Sin(float64(math.Pi/2) * float64(i) / float64(numSteps))
		}
		displacementRatioVerA[numSteps] = 1
	}
	{
		numSteps := 5
		displacementRatioVerB = make([]float64, numSteps+1)
		for i := 1; i < numSteps; i++ {
			displacementRatioVerB[i] = math.Sin(float64(math.Pi/2) * float64(i) / float64(numSteps))
		}
		displacementRatioVerB[numSteps] = 1
	}
	{
		numSteps := 15
		displacementRatioVerC = make([]float64, numSteps+1)
		for i := 1; i < numSteps; i++ {
			displacementRatioVerC[i] = math.Sin(float64(math.Pi/2) * float64(i) / float64(numSteps))
		}
		displacementRatioVerC[numSteps] = 1
	}

	if err := validateBoardConfig(standardBoardConfig); err != nil {
		panic(fmt.Errorf("invalid boardConfig: %v", err))
	}
	if err := validateBoardConfig(superBoardConfig); err != nil {
		panic(fmt.Errorf("invalid boardConfig: %v", err))
	}

	lds := make(map[string]*tilemapping.LetterDistribution)
	for _, entry := range []struct {
		name     string
		csvBytes []byte
	}{
		{name: "english", csvBytes: englishLetterDistributionCSVBytes},
		{name: "english_super", csvBytes: englishSuperLetterDistributionCSVBytes},
		{name: "french", csvBytes: frenchLetterDistributionCSVBytes},
		{name: "german", csvBytes: germanLetterDistributionCSVBytes},
		{name: "norwegian", csvBytes: norwegianLetterDistributionCSVBytes},
		{name: "catalan", csvBytes: catalanLetterDistributionCSVBytes},
		{name: "polish", csvBytes: polishLetterDistributionCSVBytes},
		{name: "spanish", csvBytes: spanishLetterDistributionCSVBytes},
	} {
		ld, err := tilemapping.ScanLetterDistribution(bytes.NewReader(entry.csvBytes))
		if err != nil {
			panic(fmt.Errorf("invalid letterDistribution for %s: %v", entry.name, err))
		}
		lds[entry.name] = ld
	}

	headerImg, headerColors, err := loadImageAndDistinctOpaqueColors(headerBytes)
	if err != nil {
		panic(fmt.Errorf("can't load headerImg: %v", err))
	}
	padLeft := 10
	padTop := 10
	padRight := 10
	padBottom := 10
	padHeader := 10
	padRack := 10
	rackGap := int(math.RoundToEven(float64(squareDim) * 0.1))
	padSpread := 10
	spreadHeight := 10
	spreadMax := 200
	headerHeight := headerImg.Bounds().Dy()

	ret := make(map[string]*BoardDrawer)
	for k, tptm := range tilesMeta {
		ld, ok := lds[k]
		if !ok {
			panic(fmt.Errorf("no letterDistribution for %s", k))
		}

		tilesImg, tilesImgColors, err := loadImageAndDistinctOpaqueColors(tptm.TilesBytes)
		if err != nil {
			panic(fmt.Errorf("can't load tilesImg for %s: %v", k, err))
		}
		if tilesImg.Bounds().Max != image.Pt(tptm.ExpDimXY[0], tptm.ExpDimXY[1]) {
			panic(fmt.Errorf("tilesImg for %s has incorrect bounds: %v", k, tilesImg.Bounds()))
		}

		// Add header image's palette to tiles image's palette.
		// There is no requirement that all tiles images have the same palette,
		// so they are mixed separately.
		for c := range headerColors {
			tilesImgColors[c] = struct{}{}
		}

		tilesImgPal, err := serializePalette(tilesImgColors)
		if err != nil {
			panic(fmt.Errorf("can't build palette for %s: %v", k, err))
		}

		headerPalImg := cloneToPaletted(headerImg, tilesImgPal)
		tilesPalImg := cloneToPaletted(tilesImg, tilesImgPal)

		tile0Sprite := make(map[byte]*image.Paletted)
		for kk, vv := range tptm.Tile0Src {
			tile0Sprite[kk] = tilesPalImg.SubImage(image.Rect(vv[0], vv[1], vv[0]+squareDim, vv[1]+squareDim)).(*image.Paletted)
		}
		tile1Sprite := make(map[byte]*image.Paletted)
		for kk, vv := range tptm.Tile1Src {
			tile1Sprite[kk] = tilesPalImg.SubImage(image.Rect(vv[0], vv[1], vv[0]+squareDim, vv[1]+squareDim)).(*image.Paletted)
		}
		boardSprite := make(map[rune]*image.Paletted)
		for kk, vv := range tptm.BoardSrc {
			boardSprite[kk] = tilesPalImg.SubImage(image.Rect(vv[0], vv[1], vv[0]+squareDim, vv[1]+squareDim)).(*image.Paletted)
		}
		textXSprite := make(map[rune]*image.Paletted)
		for kk, vv := range tptm.TextXSrc {
			textXSprite[kk] = tilesPalImg.SubImage(image.Rect(vv[0], vv[1], vv[0]+monospacedFontDimX, vv[1]+monospacedFontDimY)).(*image.Paletted)
		}
		text0Sprite := make(map[rune]*image.Paletted)
		for kk, vv := range tptm.Text0Src {
			text0Sprite[kk] = tilesPalImg.SubImage(image.Rect(vv[0], vv[1], vv[0]+monospacedFontDimX, vv[1]+monospacedFontDimY)).(*image.Paletted)
		}
		text1Sprite := make(map[rune]*image.Paletted)
		for kk, vv := range tptm.Text1Src {
			text1Sprite[kk] = tilesPalImg.SubImage(image.Rect(vv[0], vv[1], vv[0]+monospacedFontDimX, vv[1]+monospacedFontDimY)).(*image.Paletted)
		}

		// Mandatory character.
		if sprite, ok := textXSprite[' ']; !(ok && isImageOneColor(sprite)) {
			panic(fmt.Errorf("textX space for %s is not single color", k))
		}
		if sprite, ok := text0Sprite[' ']; !(ok && isImageOneColor(sprite)) {
			panic(fmt.Errorf("text0 space for %s is not single color", k))
		}
		if sprite, ok := text1Sprite[' ']; !(ok && isImageOneColor(sprite)) {
			panic(fmt.Errorf("text1 space for %s is not single color", k))
		}

		paddingColorIndex := headerPalImg.Pix[0] // use top left pixel color

		nRows := len(tptm.BoardConfig)
		nCols := len(tptm.BoardConfig[0])
		emptyBoardPalImg := image.NewPaletted(image.Rect(0, 0, nCols*squareDim+1, 1+nRows*squareDim), tilesImgPal)
		defaultBoardSpace := boardSprite[' ']
		for r := 0; r < nRows; r++ {
			for c := 0; c < nCols; c++ {
				fastSpriteDrawSrc(emptyBoardPalImg, image.Pt(c*squareDim, 1+r*squareDim), getSprite(boardSprite, tptm.BoardConfig[r][c], ' '))
			}
		}

		// Missing borders. Add 1 px at top and right.
		// The default board space sprite has bottom and left borders.
		sprite := defaultBoardSpace.SubImage(image.Rect(0, squareDim-1, squareDim, squareDim).Add(defaultBoardSpace.Bounds().Min)).(*image.Paletted)
		// Copy bottom border to top of board.
		// This must be what aboveboard means.
		x, y := 0, 0
		for c := 0; c < nCols; c++ {
			fastSpriteDrawSrc(emptyBoardPalImg, image.Pt(x, y), sprite)
			x += squareDim
		}
		// Copy bottom-left pixel of sample to top right of board.
		sprite = defaultBoardSpace.SubImage(image.Rect(0, squareDim-1, 1, squareDim).Add(defaultBoardSpace.Bounds().Min)).(*image.Paletted)
		fastSpriteDrawSrc(emptyBoardPalImg, image.Pt(x, y), sprite)
		y++
		sprite = defaultBoardSpace.SubImage(image.Rect(0, 0, 1, squareDim).Add(defaultBoardSpace.Bounds().Min)).(*image.Paletted)
		// Copy left border to right.
		for r := 0; r < nRows; r++ {
			fastSpriteDrawSrc(emptyBoardPalImg, image.Pt(x, y), sprite)
			y += squareDim
		}

		ret[k] = &BoardDrawer{
			Colors:             tilesImgPal,
			HeaderPalImg:       headerPalImg,
			Tile0Sprite:        tile0Sprite,
			Tile1Sprite:        tile1Sprite,
			BoardSprite:        boardSprite,
			TextXSprite:        textXSprite,
			Text0Sprite:        text0Sprite,
			Text1Sprite:        text1Sprite,
			BoardConfig:        tptm.BoardConfig,
			EmptyBoardPalImg:   emptyBoardPalImg,
			PadLeft:            padLeft,
			PadTop:             padTop,
			PadRight:           padRight,
			PadBottom:          padBottom,
			PadHeader:          padHeader,
			PadRack:            padRack,
			RackGap:            rackGap,
			HeaderHeight:       headerHeight,
			PadSpread:          padSpread,
			SpreadHeight:       spreadHeight,
			SpreadMax:          spreadMax,
			PaddingColorIndex:  paddingColorIndex,
			BackXColorIndex:    textXSprite[' '].Pix[0],
			Back0ColorIndex:    text0Sprite[' '].Pix[0],
			Back1ColorIndex:    text1Sprite[' '].Pix[0],
			LetterDistribution: ld,
		}
	}

	BoardDrawers = ret
}

// The previous index. Should work for any number of players.
func previousPlayerIndex(history *macondopb.GameHistory, which int) int {
	if which == 0 {
		return len(history.Players) - 1
	}
	return which - 1
}

// Player index within history.Players.
func playerIndex(history *macondopb.GameHistory, evt *macondopb.GameEvent) int {
	return int(evt.PlayerIndex)
}

// Blank tiles are undeclared unless they are on board.
func reblank(ml tilemapping.MachineLetter) tilemapping.MachineLetter {
	return tilemapping.MachineLetter(byte(ml) &^ byte(int8(ml)>>7))
}

func sortRack(rack string, tm *tilemapping.TileMapping) ([]tilemapping.MachineLetter, error) {
	// Sort the rack according to its letter distribution's ordering.
	mls, err := tilemapping.ToMachineLetters(rack, tm)
	if err != nil {
		return nil, err
	}
	sort.Slice(mls, func(i, j int) bool {
		// blanks at end
		return (mls[i] - 1) < (mls[j] - 1)
	})
	// do not convert back to user-visible
	return mls, nil
}

func RenderImage(history *macondopb.GameHistory, wf WhichFile) ([]byte, error) {
	ver2Board := wf.Version == 2
	if ver2Board && history.PlayState != macondopb.PlayState_GAME_OVER {
		return nil, fmt.Errorf("game is not over yet")
	}

	isAnimatedB := wf.FileType == "animated-gif-b"
	isAnimatedC := wf.FileType == "animated-gif-c"
	isAnimated := isAnimatedB || isAnimatedC || wf.FileType == "animated-gif"
	numEvents := math.MaxInt
	if wf.HasNextEventNum {
		numEvents = wf.NextEventNum - 1
	}

	_, letterDistributionName, _ := game.HistoryToVariant(history)
	lang := strings.ToLower(letterDistributionName)
	bd, ok := BoardDrawers[lang]
	if !ok {
		return nil, fmt.Errorf("missing boardDrawer: %s", lang)
	}

	numPlayers := len(history.Players)
	if len(history.LastKnownRacks) != numPlayers {
		return nil, fmt.Errorf("invalid len(lastKnownRacks): %v racks for %v players", len(history.LastKnownRacks), numPlayers)
	}

	// For 0 <= turn < len(history.Events), [turn] is pre-turn and [turn+1] is post-turn.
	whoseTurn := make([]int, len(history.Events)+1) // [0] == 0.
	{
		canHaveActiveAction := true
		contestedTilePlacementMoveIdx := -1
		for i, evt := range history.Events {
			expectedPlayerIndex := whoseTurn[i]
			whoseTurn[i+1] = expectedPlayerIndex
			isActiveAction := true
			switch evt.Type {
			case
				macondopb.GameEvent_TILE_PLACEMENT_MOVE,
				macondopb.GameEvent_PASS,
				macondopb.GameEvent_EXCHANGE,
				macondopb.GameEvent_UNSUCCESSFUL_CHALLENGE_TURN_LOSS:
				// The player spends the turn.
				whoseTurn[i+1] = (expectedPlayerIndex + 1) % numPlayers
			case
				macondopb.GameEvent_PHONY_TILES_RETURNED,
				macondopb.GameEvent_CHALLENGE_BONUS:
				// The player on turn keeps the turn, but the event is attributed to the previous player.
				expectedPlayerIndex = previousPlayerIndex(history, expectedPlayerIndex)
			case
				macondopb.GameEvent_END_RACK_PTS,
				macondopb.GameEvent_TIME_PENALTY,
				macondopb.GameEvent_END_RACK_PENALTY:
				// These are not actual actions.
				// Nonetheless, the event should still be attributed to one of the players.
				isActiveAction = false
				expectedPlayerIndex = playerIndex(history, evt)
				if expectedPlayerIndex < 0 || expectedPlayerIndex > numPlayers {
					return nil, fmt.Errorf("invalid nickname in event[%v]: %v", i, evt)
				}
				// For TIME_PENALTY, whose turn it is does not change.
				// For END_RACK_PTS/END_RACK_PENALTY, set turn to rack owner.
				// This works because active actions are no longer allowed after this.
				switch evt.Type {
				case macondopb.GameEvent_END_RACK_PTS:
					// For END_RACK_PTS, assume the rack belongs to the immediately preceding player.
					whoseTurn[i] = (expectedPlayerIndex + numPlayers - 1) % numPlayers
					whoseTurn[i+1] = whoseTurn[i]
				case macondopb.GameEvent_END_RACK_PENALTY:
					whoseTurn[i] = expectedPlayerIndex
					whoseTurn[i+1] = whoseTurn[i]
				}
			default:
				// Mistake-proof in case the jigglypuff evolves.
				// * protobuf
				return nil, fmt.Errorf("unknown event[%v]: %v", i, evt)
			}
			if isActiveAction {
				if !canHaveActiveAction {
					return nil, fmt.Errorf("invalid active action in event[%v]: %v", i, evt)
				}
			} else {
				canHaveActiveAction = false // Passive actions cannot be followed by active actions.
			}
			switch evt.Type {
			case
				macondopb.GameEvent_UNSUCCESSFUL_CHALLENGE_TURN_LOSS,
				macondopb.GameEvent_PHONY_TILES_RETURNED,
				macondopb.GameEvent_CHALLENGE_BONUS:
				if contestedTilePlacementMoveIdx < 0 {
					return nil, fmt.Errorf("no relevant TILE_PLACEMENT_MOVE in event[%v]: %v", i, evt)
				}
			}
			contestedTilePlacementMoveIdx = -1
			if evt.Type == macondopb.GameEvent_TILE_PLACEMENT_MOVE {
				contestedTilePlacementMoveIdx = i
			}
		}
	}

	colorMapping := make([]int, numPlayers)
	for i := range colorMapping {
		colorMapping[i] = 1
	}
	colorMapping[whoseTurn[0]] = 0
	if wf.WhichColor >= 0 && wf.WhichColor <= 1 {
		for i := range colorMapping {
			colorMapping[i] = wf.WhichColor
		}
	}

	// For 0 <= turn < len(history.Events), [turn] is pre-turn and [turn+1] is post-turn.
	cumes := make([][]int32, len(history.Events)+1)
	cumes[0] = make([]int32, numPlayers) // Zeros.
	for i, evt := range history.Events {
		cumes[i+1] = make([]int32, numPlayers)
		copy(cumes[i+1], cumes[i])
		cumes[i+1][playerIndex(history, evt)] = evt.Cumulative
	}

	// For 0 <= turn < len(history.Events), [turn] is pre-turn and [turn+1] is post-turn.
	racks := make([][][]tilemapping.MachineLetter, len(history.Events)+1)
	{
		racki := make([][]tilemapping.MachineLetter, numPlayers)
		for p := 0; p < numPlayers; p++ {
			// Racks may not always be pre-sorted.
			sorted, err := sortRack(history.LastKnownRacks[p], bd.LetterDistribution.TileMapping())
			if err != nil {
				return nil, err
			}
			racki[p] = sorted
		}
		racks[len(history.Events)] = racki
	}
	for t := len(history.Events) - 1; t >= 0; t-- {
		evt := history.Events[t]
		switch evt.Type {
		case
			macondopb.GameEvent_END_RACK_PTS,     // This event has Opponent's Rack, which is already correct.
			macondopb.GameEvent_TIME_PENALTY,     // This event should not change the rack.
			macondopb.GameEvent_END_RACK_PENALTY: // This event should not change the rack.
			racks[t] = racks[t+1]
		default:
			racki := make([][]tilemapping.MachineLetter, numPlayers)
			copy(racki, racks[t+1])

			// Racks may not always be pre-sorted.
			sorted, err := sortRack(evt.Rack, bd.LetterDistribution.TileMapping())
			if err != nil {
				return nil, err
			}
			racki[playerIndex(history, evt)] = sorted
			racks[t] = racki
		}
	}

	nRows := len(bd.BoardConfig)
	nCols := len(bd.BoardConfig[0])
	onBoard := func(r, c int) bool {
		return r >= 0 && r < nRows && c >= 0 && c < nCols
	}

	// This is just the board. It gets translated differently depending on the layout version.
	emptyBoardPalImg := bd.EmptyBoardPalImg

	boardOrigin := image.Pt(bd.PadLeft, bd.PadTop+bd.HeaderHeight+bd.PadHeader+1)
	twiceHeaderAreaMiddle := 2*bd.PadTop + bd.HeaderHeight
	if ver2Board {
		// Ensure enough height for 1 line of text.
		addHeight := monospacedFontDimY - bd.HeaderHeight
		if addHeight > 0 {
			boardOrigin.Y += addHeight
			twiceHeaderAreaMiddle += addHeight
		}
	}
	desiredBounds := image.Rect(0, 0, boardOrigin.X+emptyBoardPalImg.Bounds().Dx()+bd.PadRight, boardOrigin.Y+emptyBoardPalImg.Bounds().Dy()+bd.PadBottom)
	if ver2Board {
		desiredBounds.Max.Y += bd.PadRack + squareDim + bd.PadSpread + bd.SpreadHeight
	}
	canvasPalImg := image.NewPaletted(desiredBounds, bd.Colors)
	canvasPalImg.Pix[0] = bd.PaddingColorIndex
	fillPaletted(canvasPalImg)
	headerImgRight := bd.PadLeft + bd.HeaderPalImg.Bounds().Dx()
	headerImgRightCannotExceed := desiredBounds.Dx() - bd.PadRight
	if headerImgRightCannotExceed < headerImgRight {
		headerImgRight = headerImgRightCannotExceed
	}
	headerTop := (twiceHeaderAreaMiddle - bd.HeaderHeight) / 2
	fastDrawOver(canvasPalImg, image.Rect(bd.PadLeft, headerTop, headerImgRight, headerTop+bd.HeaderHeight), bd.HeaderPalImg, image.Point{})
	textTop := (twiceHeaderAreaMiddle - monospacedFontDimY) / 2
	fastSpriteDrawSrc(canvasPalImg, image.Pt(boardOrigin.X, boardOrigin.Y-1), emptyBoardPalImg)
	rackY := desiredBounds.Dy() - (squareDim + bd.PadSpread + bd.SpreadHeight + bd.PadBottom)

	patchImage := func(evt *macondopb.GameEvent, callback func(r, c int, ml tilemapping.MachineLetter)) {
		r, c := int(evt.Row), int(evt.Column)
		dr, dc := 0, 1
		if evt.Direction == macondopb.GameEvent_VERTICAL {
			dr, dc = 1, 0
		}
		mls, err := tilemapping.ToMachineLetters(evt.PlayedTiles, bd.LetterDistribution.TileMapping()) // this allocates :-(
		if err != nil {
			mls = nil // cannot return error here :-(
		}
		for _, ml := range mls {
			if ml != 0 && onBoard(r, c) {
				callback(r, c, ml)
			}
			r, c = r+dr, c+dc
		}
	}
	textSprite := func(which int) map[rune]*image.Paletted {
		if colorMapping[which] != 0 {
			return bd.Text1Sprite
		}
		return bd.Text0Sprite
	}
	tileSprite := func(which int) map[byte]*image.Paletted {
		if colorMapping[which] != 0 {
			return bd.Tile1Sprite
		}
		return bd.Tile0Sprite
	}
	backColorIndex := func(which int) byte {
		if colorMapping[which] != 0 {
			return bd.Back1ColorIndex
		}
		return bd.Back0ColorIndex
	}
	type flyingSprite struct {
		pt0 image.Point
		pt1 image.Point
		src *image.Paletted
		ml  tilemapping.MachineLetter
	}
	var flyingSpritesBuf []flyingSprite
	// Home rack refers to the tiles at the rack, where they most feel at home, before being sent anywhere.
	// Pass a slice to append to, to avoid reallocating each time.
	buildHomeRack := func(turn int, arr []flyingSprite) []flyingSprite {
		// The rack of the turn-to-move. This can be different from the event's nickname.
		which := whoseTurn[turn]
		sprites := tileSprite(which)
		rack := racks[turn][which]
		pt := image.Pt((bd.PadLeft+canvasPalImg.Bounds().Dx()-bd.PadRight-len(rack)*(squareDim+bd.RackGap)+bd.RackGap)/2, rackY)
		for _, ml := range rack {
			arr = append(arr, flyingSprite{pt0: pt, pt1: pt, src: getTileSprite(sprites, ml), ml: ml})
			pt.X += squareDim + bd.RackGap
		}
		return arr
	}
	var cumeBuf0 []byte
	var cumeBuf1 []byte
	paintCumes := func(turn int) image.Rectangle {
		// This function attempts to not crash when numPlayers != 2.
		if numPlayers <= 0 {
			return image.Rectangle{}
		}
		cumeBuf0 = strconv.AppendInt(cumeBuf0[:0], int64(cumes[turn][0]), 10)
		cumeBuf1 = cumeBuf1[:0]
		if numPlayers > 1 {
			cumeBuf1 = strconv.AppendInt(cumeBuf1, int64(cumes[turn][1]), 10)
		}
		cumeBuf0Index := 0
		gap := 2
		if numPlayers > 1 {
			gap += 3
		}
		pt := image.Pt(canvasPalImg.Bounds().Dx()-bd.PadRight-(len(cumeBuf0)+gap+len(cumeBuf1))*monospacedFontDimX, textTop)
		startX := pt.X
		sprite := textSprite(cumeBuf0Index)
		// We have established that spaces have a single color, but it is still easier to draw text normally.
		fastSpriteDrawSrc(canvasPalImg, pt, sprite[' '])
		pt.X += monospacedFontDimX
		for _, ch := range cumeBuf0 {
			fastSpriteDrawSrc(canvasPalImg, pt, getSprite(sprite, rune(ch), ' '))
			pt.X += monospacedFontDimX
		}
		fastSpriteDrawSrc(canvasPalImg, pt, sprite[' '])
		pt.X += monospacedFontDimX
		if numPlayers > 1 {
			fastSpriteDrawSrc(canvasPalImg, pt, bd.TextXSprite[' '])
			pt.X += monospacedFontDimX
			sprite = textSprite(cumeBuf0Index ^ 1)
			fastSpriteDrawSrc(canvasPalImg, pt, sprite[' '])
			pt.X += monospacedFontDimX
			for _, ch := range cumeBuf1 {
				fastSpriteDrawSrc(canvasPalImg, pt, getSprite(sprite, rune(ch), ' '))
				pt.X += monospacedFontDimX
			}
			fastSpriteDrawSrc(canvasPalImg, pt, sprite[' '])
			pt.X += monospacedFontDimX
		}
		return image.Rect(startX, pt.Y, pt.X, pt.Y+monospacedFontDimY)
	}
	paintSpread := func(turn int) image.Rectangle {
		// This function attempts to not crash when numPlayers != 2.
		if numPlayers <= 0 {
			return image.Rectangle{}
		}
		spread := -int(cumes[turn][0])
		if numPlayers > 1 {
			spread += int(cumes[turn][1])
		}
		if spread == 0 {
			return image.Rectangle{}
		}
		negativeIndex := 0
		twiceSpreadMidX := bd.PadLeft + canvasPalImg.Bounds().Dx() - bd.PadRight
		twiceSpreadWidth := canvasPalImg.Bounds().Dx() - (bd.PadLeft + bd.PadRight)
		spreadBottomY := canvasPalImg.Bounds().Dy() - bd.PadBottom
		spreadTopY := spreadBottomY - bd.SpreadHeight
		var rect image.Rectangle
		if spread > 0 {
			cappedAbsSpread := spread
			if cappedAbsSpread > bd.SpreadMax {
				cappedAbsSpread = bd.SpreadMax
			}
			barWidth := int(math.RoundToEven(float64(twiceSpreadWidth) * float64(cappedAbsSpread) / float64(bd.SpreadMax)))
			rect = image.Rect(twiceSpreadMidX/2, spreadTopY, (twiceSpreadMidX+barWidth)/2, spreadBottomY)
			fillPalettedRect(canvasPalImg, rect, backColorIndex(negativeIndex^1))
		} else {
			cappedAbsSpread := -spread
			if cappedAbsSpread > bd.SpreadMax {
				cappedAbsSpread = bd.SpreadMax
			}
			barWidth := int(math.RoundToEven(float64(twiceSpreadWidth) * float64(cappedAbsSpread) / float64(bd.SpreadMax)))
			rect = image.Rect((twiceSpreadMidX-barWidth)/2, spreadTopY, twiceSpreadMidX/2, spreadBottomY)
			fillPalettedRect(canvasPalImg, rect, backColorIndex(negativeIndex))
		}
		return rect
	}
	paintScoreDiff := func(turn int) image.Rectangle {
		// For 0 <= turn < len(history.Events).
		// Score difference always belongs to stated nickname.
		// Score diff refers to the difference to the next turn's cumulative score (not spread).
		// The protobuf does not dedicate one specific field for this purpose.
		which := playerIndex(history, history.Events[turn])
		scoreDiff := int64(cumes[turn+1][which] - cumes[turn][which])
		cumeBuf0 = cumeBuf0[:0]
		if scoreDiff >= 0 {
			cumeBuf0 = append(cumeBuf0, '+')
		}
		cumeBuf0 = strconv.AppendInt(cumeBuf0, scoreDiff, 10)
		pt := image.Pt((bd.PadLeft+canvasPalImg.Bounds().Dx()-bd.PadRight-len(cumeBuf0)*monospacedFontDimX)/2, textTop)
		startX := pt.X
		for _, ch := range cumeBuf0 {
			fastSpriteDrawSrc(canvasPalImg, pt, getSprite(bd.TextXSprite, rune(ch), ' '))
			pt.X += monospacedFontDimX
		}
		return image.Rect(startX, pt.Y, pt.X, pt.Y+monospacedFontDimY)
	}

	evts := history.Events
	if numEvents <= 0 {
		evts = evts[:0]
	} else if numEvents < len(evts) {
		evts = evts[:numEvents]
	}
	if !isAnimated {
		// When not animating, a TILE_PLACEMENT_MOVE that is canceled by PHONY_TILES_RETURNED is never drawn at all.
		lastPlaceIndex := -1
		setLastPlaceIndex := func(i int) {
			if lastPlaceIndex >= 0 {
				evt := evts[lastPlaceIndex]
				which := whoseTurn[lastPlaceIndex]
				sprites := tileSprite(which)
				patchImage(evt, func(r, c int, ml tilemapping.MachineLetter) {
					pt := image.Pt(boardOrigin.X+c*squareDim, boardOrigin.Y+r*squareDim)
					fastSpriteDrawOver(canvasPalImg, pt, getTileSprite(sprites, ml))
				})
			}
			lastPlaceIndex = i
		}
		for i, evt := range evts {
			switch evt.Type {
			case macondopb.GameEvent_TILE_PLACEMENT_MOVE:
				setLastPlaceIndex(i)
			case macondopb.GameEvent_PHONY_TILES_RETURNED:
				lastPlaceIndex = -1
			}
		}
		setLastPlaceIndex(-1)

		if ver2Board {
			paintCumes(len(evts))
			paintSpread(len(evts))
			flyingSpritesBuf = buildHomeRack(len(evts), flyingSpritesBuf[:0])
			for k := range flyingSpritesBuf {
				elt := &flyingSpritesBuf[k]
				pt := elt.pt0
				fastSpriteDrawOver(canvasPalImg, pt, elt.src)
			}
		}

		var buf bytes.Buffer
		var err error
		if wf.FileType == "png" {
			err = png.Encode(&buf, canvasPalImg)
		} else {
			// This might not be worth it. The PNG is smaller after switching from image.NRGBA to image.Paletted.
			err = gif.EncodeAll(&buf, &gif.GIF{
				Image: []*image.Paletted{canvasPalImg},
				Delay: []int{0},
				Config: image.Config{
					ColorModel: canvasPalImg.Palette,
					Width:      canvasPalImg.Bounds().Dx(),
					Height:     canvasPalImg.Bounds().Dy(),
				},
			})
		}
		if err != nil {
			return nil, err
		}
		return buf.Bytes(), nil
	}

	// The boardPalImg only contains header and the current board.
	boardPalImg := image.NewPaletted(canvasPalImg.Bounds(), bd.Colors)
	copy(boardPalImg.Pix, canvasPalImg.Pix)
	lastFramePalImg := image.NewPaletted(canvasPalImg.Bounds(), bd.Colors)
	// Since every frame uses the same palette, specifying it once here shrinks the output file.
	// Otherwise each frame encodes a copy of the palette.
	agif := &gif.GIF{
		Config: image.Config{
			ColorModel: canvasPalImg.Palette,
			Width:      canvasPalImg.Bounds().Dx(),
			Height:     canvasPalImg.Bounds().Dy(),
		},
	}
	// This is a gif, so the delay is in centiseconds.
	// Refer to https://www.biphelps.com/blog/The-Fastest-GIF-Does-Not-Exist for why 2 centiseconds is the minimum.
	addFrame := func(bounds image.Rectangle, delay int) {
		if len(agif.Delay) == 0 {
			// Always record the first frame completely.
			// This is a copy (we would be mutating lastFramePalImg later).
			frameDiffPalImg := image.NewPaletted(bounds, bd.Colors)
			fastDrawSrc(frameDiffPalImg, bounds, canvasPalImg, bounds.Min)
			fastDrawSrc(lastFramePalImg, bounds, canvasPalImg, bounds.Min)
			agif.Image = append(agif.Image, frameDiffPalImg)
			agif.Delay = append(agif.Delay, delay)
		} else {
			// Determine the bounds that have any changes.
			bounds = croppedBoundsDiff(canvasPalImg, bounds, lastFramePalImg, bounds.Min)
			if bounds.Empty() {
				// Nothing changes. just increase delay of previous frame.
				agif.Delay[len(agif.Delay)-1] += delay
			} else {
				// Make pixels that are the same as lastFramePalImg transparent. This is likelier to compress better, but not always.
				frameDiffPalImg := image.NewPaletted(bounds, bd.Colors)
				fastDrawSrc(frameDiffPalImg, bounds, canvasPalImg, bounds.Min)
				fastUndrawOver(frameDiffPalImg, bounds, lastFramePalImg, bounds.Min)
				fastDrawSrc(lastFramePalImg, bounds, canvasPalImg, bounds.Min)
				agif.Image = append(agif.Image, frameDiffPalImg)
				agif.Delay = append(agif.Delay, delay)
			}
		}
	}

	rect := canvasPalImg.Bounds()
	if ver2Board {
		lastPlaceIndex := -1
		for i, evt := range evts {
			flyingSpritesBuf = buildHomeRack(i, flyingSpritesBuf[:0])
			lenRack := len(flyingSpritesBuf)
			hasAnimation := true

			switch evt.Type {
			case macondopb.GameEvent_TILE_PLACEMENT_MOVE:
				// Place tiles from rack.
				lastPlaceIndex = i
				patchImage(evt, func(r, c int, ml tilemapping.MachineLetter) {
					pt := image.Pt(boardOrigin.X+c*squareDim, boardOrigin.Y+r*squareDim)
					ml = reblank(ml)
					for k := range flyingSpritesBuf {
						// This is quadratic, but rack length is small.
						if ml == flyingSpritesBuf[k].ml && flyingSpritesBuf[k].pt0 == flyingSpritesBuf[k].pt1 {
							flyingSpritesBuf[k].pt1 = pt
							break
						}
					}
				})
			case macondopb.GameEvent_PHONY_TILES_RETURNED:
				// Remove opponent's tiles.
				withdrawnEvt := evts[lastPlaceIndex]
				which := whoseTurn[lastPlaceIndex]
				sprites := tileSprite(which)
				numRet := 0
				patchImage(withdrawnEvt, func(r, c int, ml tilemapping.MachineLetter) { numRet++ })
				pt := image.Pt((bd.PadLeft+canvasPalImg.Bounds().Dx()-bd.PadRight-numRet*squareDim)/2, bd.PadTop)
				patchImage(withdrawnEvt, func(r, c int, ml tilemapping.MachineLetter) {
					ml = reblank(ml)
					flyingSpritesBuf = append(flyingSpritesBuf, flyingSprite{
						pt0: image.Pt(boardOrigin.X+c*squareDim, boardOrigin.Y+r*squareDim),
						pt1: pt, src: getTileSprite(sprites, ml), ml: ml})
					pt.X += squareDim
				})
			case macondopb.GameEvent_EXCHANGE:
				// Set aside unwanted tiles.
				// Only affect exchanged tiles found on rack.
				numRet := 0
				mls, err := tilemapping.ToMachineLetters(evt.Exchanged, bd.LetterDistribution.TileMapping()) // this allocates :-(
				if err != nil {
					mls = nil // cannot return error here :-(
				}
				for _, ml := range mls {
					for k := range flyingSpritesBuf {
						// This is quadratic, but rack length is small.
						if ml == flyingSpritesBuf[k].ml && flyingSpritesBuf[k].pt0 == flyingSpritesBuf[k].pt1 {
							flyingSpritesBuf[k].pt1.X++
							numRet++
							break
						}
					}
				}
				pt := image.Pt((bd.PadLeft+canvasPalImg.Bounds().Dx()-bd.PadRight-numRet*squareDim)/2, bd.PadTop)
				// Preserve sorting order.
				for k := range flyingSpritesBuf {
					if flyingSpritesBuf[k].pt0 != flyingSpritesBuf[k].pt1 {
						flyingSpritesBuf[k].pt1 = pt
						pt.X += squareDim
					}
				}
			default:
				hasAnimation = false
			}

			cumesRect := paintCumes(i)
			spreadRect := paintSpread(i)
			tilesRect := image.Rectangle{}
			// Slicing for [:lenRack] keep only tiles on rack and excludes tiles affected by PHONY_TILES_RETURNED.
			for k := range flyingSpritesBuf[:lenRack] {
				elt := &flyingSpritesBuf[k]
				pt := elt.pt0
				fastSpriteDrawOver(canvasPalImg, pt, elt.src)
				tilesRect = tilesRect.Union(image.Rect(pt.X, pt.Y, pt.X+squareDim, pt.Y+squareDim))
			}

			// Each event takes 50 centiseconds. The first 30 centiseconds is a still frame.
			// So: 30 centiseconds of still frame, then 10-step animation at 2 centiseconds each, for a total of 50 centiseconds.
			thisDelay := 30
			if isAnimatedB || isAnimatedC {
				// Version B delays for 70 centiseconds, then spends 30 centiseconds on the animation.
				// So: 70 centiseconds of still frame, then 5-step animation at 6 centiseconds each, for a total of 100 centiseconds.
				// Version C delays for 70 centiseconds, then spends 30 centiseconds on the animation.
				// So: 70 centiseconds of still frame, then 15-step animation at 2 centiseconds each, for a total of 100 centiseconds.
				thisDelay = 70
			}
			addFrame(rect.Union(cumesRect.Union(spreadRect).Union(tilesRect)), thisDelay)
			scoreDiffRect := paintScoreDiff(i)
			if hasAnimation {
				displacementRatio := displacementRatioVerA
				if isAnimatedB {
					displacementRatio = displacementRatioVerB
				} else if isAnimatedC {
					displacementRatio = displacementRatioVerC
				}
				// In version A, displacementRatio has 10 steps, and it should take 20 centiseconds here.
				// In version C, displacementRatio has 15 steps, and it should take 30 centiseconds here.
				thisDelay = 2
				if isAnimatedB {
					// In version B, displacementRatio has 5 steps, and it should take 30 centiseconds here.
					thisDelay = 6
				}
				// With animation, animate every 2 centiseconds.
				// When displacementRatio has 10 steps (len() == 11), this works out to be 20 centiseconds.

				// The boardPalImg layer persists to the next turn.
				// The canvasPalImg is the current canvas, and includes boardPalImg plus any temporary sprites.
				// Typically, we draw the temporary sprites on the canvas, while keeping track of the rectangles they encompass.
				// When adding a frame we draw the union of the bounds added by the current frame and by the previous frame,
				// because that previous frame will mostly be erased.

				// However, changes for PHONY_TILES_RETURNED (and later TILE_PLACEMENT_MOVE) persist.
				// So, those are first drawn on the board and then mirrored onto canvas instead.
				rect = image.Rectangle{}
				if evt.Type == macondopb.GameEvent_PHONY_TILES_RETURNED {
					patchImage(evts[lastPlaceIndex], func(r, c int, ml tilemapping.MachineLetter) {
						pt := image.Pt(boardOrigin.X+c*squareDim, boardOrigin.Y+r*squareDim)
						fastSpriteDrawSrc(boardPalImg, pt, getSprite(bd.BoardSprite, bd.BoardConfig[r][c], ' '))
						rect = rect.Union(image.Rect(pt.X, pt.Y, pt.X+squareDim, pt.Y+squareDim))
					})
					fastDrawSrc(canvasPalImg, rect, boardPalImg, rect.Min)
				}
				// The score diff is first unveiled in this frame.
				rect = rect.Union(scoreDiffRect.Union(tilesRect))
				for f := 1; f < len(displacementRatio); f++ {
					// Erase flying tiles.
					fastDrawSrc(canvasPalImg, tilesRect, boardPalImg, tilesRect.Min)
					// Apparently displacementRatio[0] is not used. It's ok. Helps avoid off-by-one errors.
					dpr := displacementRatio[f]
					tilesRect = image.Rectangle{}
					// Non-moving tiles are below.
					// Note that this is actually inefficient because we keep drawing the same non-moving tiles.
					// Maybe this could be sped up.
					for k := range flyingSpritesBuf {
						elt := &flyingSpritesBuf[k]
						if elt.pt0 == elt.pt1 {
							pt := elt.pt0
							fastSpriteDrawOver(canvasPalImg, pt, elt.src)
							// Do not immediately include this rect.
						}
					}
					// Moving tiles are above. This ordering matters in the few frames when they overlap.
					for k := range flyingSpritesBuf {
						elt := &flyingSpritesBuf[k]
						if elt.pt0 != elt.pt1 {
							pt := image.Pt(elt.pt0.X+int(math.RoundToEven(float64(elt.pt1.X-elt.pt0.X)*dpr)), elt.pt0.Y+int(math.RoundToEven(float64(elt.pt1.Y-elt.pt0.Y)*dpr)))
							fastSpriteDrawOver(canvasPalImg, pt, elt.src)
							tilesRect = tilesRect.Union(image.Rect(pt.X, pt.Y, pt.X+squareDim, pt.Y+squareDim))
						}
					}
					// Check if non-moving tiles need to be drawn. They tend to be further away from moving tiles, that this optimization is worth it.
					for k := range flyingSpritesBuf {
						elt := &flyingSpritesBuf[k]
						if elt.pt0 == elt.pt1 {
							pt := elt.pt0
							tilesRect = tilesRect.Union(croppedBoundsDiff(canvasPalImg, image.Rect(pt.X, pt.Y, pt.X+squareDim, pt.Y+squareDim), lastFramePalImg, pt))
						}
					}
					// tilesRect bounds the tiles in this frame only.
					// rect bounds the other changes (erasure of previous tilesRect, and adding score diff for the first frame).
					addFrame(rect.Union(tilesRect), thisDelay)
					rect = tilesRect
				}
				// Include non-moving tiles in tilesRect so they can be erased.
				for k := range flyingSpritesBuf {
					elt := &flyingSpritesBuf[k]
					if elt.pt0 == elt.pt1 {
						pt := elt.pt0
						tilesRect = tilesRect.Union(image.Rect(pt.X, pt.Y, pt.X+squareDim, pt.Y+squareDim))
					}
				}
			} else {
				// With no animation, the remaining 20 centiseconds is the same still frame, with the score diff.
				thisDelay = 20
				if isAnimatedB || isAnimatedC {
					// In versions B and C, this delay should be 30 centiseconds.
					thisDelay = 30
				}
				addFrame(scoreDiffRect, thisDelay)
			}
			// Erase stuffs.
			fastDrawSrc(canvasPalImg, cumesRect, boardPalImg, cumesRect.Min)
			fastDrawSrc(canvasPalImg, spreadRect, boardPalImg, spreadRect.Min)
			fastDrawSrc(canvasPalImg, tilesRect, boardPalImg, tilesRect.Min)
			fastDrawSrc(canvasPalImg, scoreDiffRect, boardPalImg, scoreDiffRect.Min)
			rect = cumesRect.Union(spreadRect).Union(tilesRect).Union(scoreDiffRect)

			if evt.Type == macondopb.GameEvent_TILE_PLACEMENT_MOVE {
				which := whoseTurn[i]
				sprites := tileSprite(which)
				rectBoard := image.Rectangle{}
				patchImage(evt, func(r, c int, ml tilemapping.MachineLetter) {
					pt := image.Pt(boardOrigin.X+c*squareDim, boardOrigin.Y+r*squareDim)
					fastSpriteDrawOver(boardPalImg, pt, getTileSprite(sprites, ml))
					rectBoard = rectBoard.Union(image.Rect(pt.X, pt.Y, pt.X+squareDim, pt.Y+squareDim))
				})
				fastDrawSrc(canvasPalImg, rectBoard, boardPalImg, rectBoard.Min)
				rect = rect.Union(rectBoard)
			}
		}

		// The final frame.
		rect = rect.Union(paintCumes(len(evts))).Union(paintSpread(len(evts)))
		flyingSpritesBuf = buildHomeRack(len(evts), flyingSpritesBuf[:0])
		for k := range flyingSpritesBuf {
			elt := &flyingSpritesBuf[k]
			pt := elt.pt0
			fastSpriteDrawOver(canvasPalImg, pt, elt.src)
			rect = rect.Union(image.Rect(pt.X, pt.Y, pt.X+squareDim, pt.Y+squareDim))
		}
	} else {
		thisDelay := 50
		if isAnimatedB || isAnimatedC {
			// Versions B and C delay for 100 centiseconds.
			thisDelay = 100
		}
		// In the original version, only TILE_PLACEMENT_MOVE and PHONY_TILES_RETURNED generate a frame.
		lastPlaceIndex := -1
		for i, evt := range evts {
			switch evt.Type {
			case macondopb.GameEvent_TILE_PLACEMENT_MOVE:
				addFrame(rect, thisDelay)
				rect = image.Rectangle{}
				lastPlaceIndex = i
				which := whoseTurn[lastPlaceIndex]
				sprites := tileSprite(which)
				patchImage(evt, func(r, c int, ml tilemapping.MachineLetter) {
					pt := image.Pt(boardOrigin.X+c*squareDim, boardOrigin.Y+r*squareDim)
					fastSpriteDrawOver(canvasPalImg, pt, getTileSprite(sprites, ml))
					rect = rect.Union(image.Rect(pt.X, pt.Y, pt.X+squareDim, pt.Y+squareDim))
				})
			case macondopb.GameEvent_PHONY_TILES_RETURNED:
				addFrame(rect, thisDelay)
				rect = image.Rectangle{}
				patchImage(evts[lastPlaceIndex], func(r, c int, ml tilemapping.MachineLetter) {
					pt := image.Pt(boardOrigin.X+c*squareDim, boardOrigin.Y+r*squareDim)
					fastSpriteDrawSrc(canvasPalImg, pt, getSprite(bd.BoardSprite, bd.BoardConfig[r][c], ' '))
					rect = rect.Union(image.Rect(pt.X, pt.Y, pt.X+squareDim, pt.Y+squareDim))
				})
			}
		}
	}

	// We want the final frame to stay for 2 sec (200 centiseconds).
	addFrame(rect, 200)

	// Chrome interprets Delay as the delay after the frame.
	// Mac Quick Look interprets Delay as the delay before the frame.
	// Solution: Use a transparent 1x1 frame to hold excess delay.
	minDelay := math.MaxInt
	for _, v := range agif.Delay {
		if v < minDelay {
			minDelay = v
		}
	}
	nFrames := len(agif.Delay)
	for _, v := range agif.Delay {
		if v != minDelay {
			nFrames++
		}
	}
	if nFrames != len(agif.Delay) {
		fillerTransparent1x1PalImg := image.NewPaletted(image.Rect(0, 0, 1, 1), bd.Colors)
		imgs := make([]*image.Paletted, 0, nFrames)
		delays := make([]int, 0, nFrames)
		for i, delay := range agif.Delay {
			imgs = append(imgs, agif.Image[i])
			delays = append(delays, minDelay)
			if delay != minDelay {
				imgs = append(imgs, fillerTransparent1x1PalImg)
				delays = append(delays, delay-minDelay)
			}
		}
		agif.Image = imgs
		agif.Delay = delays
	}

	var buf bytes.Buffer
	err := gif.EncodeAll(&buf, agif)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
