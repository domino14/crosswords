// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: badges.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addBadge = `-- name: AddBadge :exec
INSERT INTO badges (code, description)
VALUES ($1, $2)
`

type AddBadgeParams struct {
	Code        string
	Description string
}

func (q *Queries) AddBadge(ctx context.Context, arg AddBadgeParams) error {
	_, err := q.db.Exec(ctx, addBadge, arg.Code, arg.Description)
	return err
}

const addUserBadge = `-- name: AddUserBadge :exec
INSERT INTO user_badges (user_id, badge_id)
VALUES ((SELECT id FROM users where username = $1), (SELECT id from badges where code = $2))
`

type AddUserBadgeParams struct {
	Username pgtype.Text
	Code     string
}

func (q *Queries) AddUserBadge(ctx context.Context, arg AddUserBadgeParams) error {
	_, err := q.db.Exec(ctx, addUserBadge, arg.Username, arg.Code)
	return err
}

const getBadgeDescription = `-- name: GetBadgeDescription :one
SELECT description FROM badges
WHERE code = $1
`

func (q *Queries) GetBadgeDescription(ctx context.Context, code string) (string, error) {
	row := q.db.QueryRow(ctx, getBadgeDescription, code)
	var description string
	err := row.Scan(&description)
	return description, err
}

const getBadgesForUser = `-- name: GetBadgesForUser :many
SELECT badges.code FROM user_badges
JOIN badges on badges.id = user_badges.badge_id
WHERE user_badges.user_id = (SELECT id from users where uuid = $1)
`

func (q *Queries) GetBadgesForUser(ctx context.Context, uuid pgtype.Text) ([]string, error) {
	rows, err := q.db.Query(ctx, getBadgesForUser, uuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
