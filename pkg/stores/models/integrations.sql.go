// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: integrations.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addOrUpdateGlobalIntegration = `-- name: AddOrUpdateGlobalIntegration :exec
INSERT INTO integrations_global(integration_name, data)
VALUES ($1, $2)
ON CONFLICT (integration_name)
DO UPDATE SET data = EXCLUDED.data
`

type AddOrUpdateGlobalIntegrationParams struct {
	IntegrationName string
	Data            []byte
}

func (q *Queries) AddOrUpdateGlobalIntegration(ctx context.Context, arg AddOrUpdateGlobalIntegrationParams) error {
	_, err := q.db.Exec(ctx, addOrUpdateGlobalIntegration, arg.IntegrationName, arg.Data)
	return err
}

const addOrUpdateIntegration = `-- name: AddOrUpdateIntegration :one
INSERT INTO integrations(user_id, integration_name, data)
VALUES (
  (SELECT id FROM users WHERE users.uuid = $3),
  $1,
  $2
)
ON CONFLICT (user_id, integration_name)
DO UPDATE SET data = EXCLUDED.data
RETURNING integrations.uuid
`

type AddOrUpdateIntegrationParams struct {
	IntegrationName string
	Data            []byte
	UserUuid        pgtype.Text
}

func (q *Queries) AddOrUpdateIntegration(ctx context.Context, arg AddOrUpdateIntegrationParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, addOrUpdateIntegration, arg.IntegrationName, arg.Data, arg.UserUuid)
	var uuid uuid.UUID
	err := row.Scan(&uuid)
	return uuid, err
}

const getGlobalIntegrationData = `-- name: GetGlobalIntegrationData :one
SELECT data FROM integrations_global WHERE integration_name = $1
`

func (q *Queries) GetGlobalIntegrationData(ctx context.Context, integrationName string) ([]byte, error) {
	row := q.db.QueryRow(ctx, getGlobalIntegrationData, integrationName)
	var data []byte
	err := row.Scan(&data)
	return data, err
}

const getIntegrationData = `-- name: GetIntegrationData :one
SELECT data FROM integrations
WHERE user_id = (SELECT id from users where users.uuid = $2)
AND integration_name = $1
`

type GetIntegrationDataParams struct {
	IntegrationName string
	UserUuid        pgtype.Text
}

func (q *Queries) GetIntegrationData(ctx context.Context, arg GetIntegrationDataParams) ([]byte, error) {
	row := q.db.QueryRow(ctx, getIntegrationData, arg.IntegrationName, arg.UserUuid)
	var data []byte
	err := row.Scan(&data)
	return data, err
}

const getIntegrations = `-- name: GetIntegrations :many
SELECT uuid, integration_name FROM integrations
WHERE user_id = (SELECT id from users where users.uuid = $1)
`

type GetIntegrationsRow struct {
	Uuid            uuid.UUID
	IntegrationName string
}

func (q *Queries) GetIntegrations(ctx context.Context, userUuid pgtype.Text) ([]GetIntegrationsRow, error) {
	rows, err := q.db.Query(ctx, getIntegrations, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIntegrationsRow
	for rows.Next() {
		var i GetIntegrationsRow
		if err := rows.Scan(&i.Uuid, &i.IntegrationName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
