syntax = "proto3";
package game_service;

import "proto/ipc/omgwords.proto";
import "vendor/macondo/macondo.proto";

// Meta information about a game, including its players.
message GameInfoRequest { string game_id = 1; }

message GCGRequest { string game_id = 1; }
message GameHistoryRequest { string game_id = 1; }
message GameDocumentRequest { string game_id = 1; }

message GCGResponse { string gcg = 1; }
message GameHistoryResponse { macondo.GameHistory history = 1; }
message GameDocumentResponse { ipc.GameDocument document = 1; }

message RecentGamesRequest {
  string username = 1;
  int32 num_games = 2;
  int32 offset = 3;
}

message StreakInfoResponse {
  message SingleGameInfo {
    string game_id = 1;
    int32 winner = 3; // the index in `players` or -1 if no winner (tie)
  }

  message PlayerInfo {
    string nickname = 1;
    string uuid = 2; // player uuid needed for censoring
  }
  repeated SingleGameInfo streak = 1;
  repeated PlayerInfo playersInfo = 3; // XXX make this snake_case
}

message RematchStreakRequest { string original_request_id = 1; }

service GameMetadataService {
  rpc GetMetadata(GameInfoRequest) returns (ipc.GameInfoResponse);
  // GetGCG gets a GCG string for the given game ID.
  rpc GetGCG(GCGRequest) returns (GCGResponse);
  // GetGameHistory gets a GameHistory for the given game ID. GameHistory
  // is our internal representation of a game's state.
  rpc GetGameHistory(GameHistoryRequest) returns (GameHistoryResponse);
  // GetRecentGames gets recent games for a user.
  rpc GetRecentGames(RecentGamesRequest) returns (ipc.GameInfoResponses);
  rpc GetRematchStreak(RematchStreakRequest) returns (StreakInfoResponse);
  // GetGameDocument gets a Game Document. This will eventually obsolete
  // GetGameHistory. Does not work with annotated games for now.
  rpc GetGameDocument(GameDocumentRequest) returns (GameDocumentResponse);
}
