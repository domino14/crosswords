syntax = "proto3";
package game_service;
option go_package = "github.com/domino14/liwords/rpc/api/proto/game_service";

import "macondo/api/proto/macondo/macondo.proto";
import "api/proto/ipc/omgwords.proto";
import "google/protobuf/timestamp.proto";

// Meta information about a game, including its players.
message GameInfoRequest { string game_id = 1; }

// Meta information about the player of a particular game.
message PlayerInfo {
  string user_id = 1;
  string nickname = 2;
  string full_name = 3;
  string country_code = 4;
  // Rating for the particular mode of the game. String because it could be
  // provisional or some other strings.
  string rating = 5;
  string title = 6;
  // string avatar_url = 7; // the UserService now offers Avatar info
  bool is_bot = 8;
  // first is true if the player went first
  bool first = 9;
}

message GameInfoResponse {
  repeated PlayerInfo players = 1;
  string time_control_name = 4;
  string tournament_id = 6;
  // done - is game done?
  // bool done = 9;
  ipc.GameEndReason game_end_reason = 11;
  repeated int32 scores = 13;
  int32 winner = 14;
  google.protobuf.Timestamp created_at = 15;
  string game_id = 16;
  google.protobuf.Timestamp last_update = 18;

  ipc.GameRequest game_request = 19;
  string tournament_division = 20;
  int32 tournament_round = 21;
  // a game index within a round.
  int32 tournament_game_index = 22;
}

message GCGRequest { string game_id = 1; }
message GameHistoryRequest { string game_id = 1; }

message GCGResponse { string gcg = 1; }
message GameHistoryResponse { macondo.GameHistory history = 1; }

message GameInfoResponses { repeated GameInfoResponse game_info = 1; }

message RecentGamesRequest {
  string username = 1;
  int32 num_games = 2;
  int32 offset = 3;
}

message StreakInfoResponse {
  message SingleGameInfo {
    string game_id = 1;
    int32 winner = 3; // the index in `players` or -1 if no winner (tie)
  }

  message PlayerInfo {
    string nickname = 1;
    string uuid = 2; // player uuid needed for censoring
  }
  repeated SingleGameInfo streak = 1;
  repeated PlayerInfo playersInfo = 3;
}

message RematchStreakRequest { string original_request_id = 1; }

service GameMetadataService {
  rpc GetMetadata(GameInfoRequest) returns (GameInfoResponse);
  rpc GetGCG(GCGRequest) returns (GCGResponse);
  rpc GetGameHistory(GameHistoryRequest) returns (GameHistoryResponse);
  rpc GetRecentGames(RecentGamesRequest) returns (GameInfoResponses);
  rpc GetRematchStreak(RematchStreakRequest) returns (StreakInfoResponse);
}