syntax = "proto3";
package tournament_service;
option go_package =
    "github.com/domino14/liwords/rpc/api/proto/tournament_service";

import "api/proto/realtime/realtime.proto";
import "google/protobuf/timestamp.proto";

message StartRoundRequest {
  string tournament_id = 1;
  int32 round = 2;
}

enum TType {
  // A Standard tournament
  STANDARD = 0;
  // A new "clubhouse"
  CLUB = 1;
  // A club session
  CLUB_SESSION = 2;
}

message NewTournamentRequest {
  // If slug is not assigned, a random ID will be chosen.
  string slug = 1;
  string name = 2;
  string description = 3;
  repeated string director_ids = 4;

  TType type = 5;
}

message TournamentMetadataRequest {
  string id = 1;
  string name = 2;
  string description = 3;
  string slug = 4;
  TType type = 5;
}

message SingleRoundControls {
  int32 pairing_method = 1;
  int32 first_method = 2;
  int32 games_per_round = 3;
  int32 round = 4;
  int32 factor = 5;
  int32 initial_fontes = 6;
  int32 max_repeats = 7;
  bool allow_over_max_repeats = 8;
  int32 repeat_relative_weight = 9;
  int32 win_difference_relative_weight = 10;
}

message SingleRoundControlsRequest {
  string id = 1;
  string division = 2;
  int32 round = 3;
  SingleRoundControls round_controls = 4;
}

message TournamentControlsRequest {
  string id = 1;
  string division = 2;
  liwords.GameRequest game_request = 3;
  repeated SingleRoundControls round_controls = 4;
  int32 number_of_rounds = 5;
  google.protobuf.Timestamp start_time = 6;
}

message PairRoundRequest {
  string id = 1;
  string division = 2;
  int32 round = 3;
}

message TournamentPerson {
  string person_id = 1;
  int32 person_int = 2;
}

message TournamentPersons {
  string id = 1;
  string division = 2;
  repeated TournamentPerson persons = 3;
}

message TournamentDivisionRequest {
  string id = 1;
  string division = 2;
}

message TournamentPairingRequest {
  string id = 1;
  string division = 2;
  string player_one_id = 3;
  string player_two_id = 4;
  int32 round = 5;
}

// TournamentResultOverrideRequest is sent when a score needs to be edited
// or added by a director. Note that player one and player two need to be
// the players that went first and second, respectively; otherwise,
// we will not be able to accurately track firsts/seconds.
message TournamentResultOverrideRequest {
  string id = 1;
  string division = 2;
  string player_one_id = 3;
  string player_two_id = 4;
  int32 round = 5;
  int32 player_one_score = 6;
  int32 player_two_score = 7;
  liwords.TournamentGameResult player_one_result = 8;
  liwords.TournamentGameResult player_two_result = 9;
  liwords.GameEndReason game_end_reason = 10;
  bool amendment = 11;
  int32 game_index = 12;
}

message TournamentStartRoundRequest {
  string id = 1;
  string division = 2;
  int32 round = 3;
}

message TournamentResponse {}
message NewTournamentResponse {
  string id = 1;
  string slug = 2;
}

message GetTournamentMetadataRequest {
  // User must provide the ID, or the slug (but not both)
  string id = 1;
  string slug = 2;
}

message TournamentMetadataResponse {
  string name = 1;
  string description = 2;
  repeated string directors = 3;
  string slug = 4;
  string id = 5;
}

message RecentGamesRequest {
  // tournament id
  string id = 1;
  int32 num_games = 2;
  int32 offset = 3;
}

message RecentGamesResponse {
  repeated liwords.TournamentGameEndedEvent games = 1;
}

service TournamentService {
  rpc NewTournament(NewTournamentRequest) returns(NewTournamentResponse);
  rpc GetTournamentMetadata(GetTournamentMetadataRequest)
      returns(TournamentMetadataResponse);
  rpc SetTournamentMetadata(TournamentMetadataRequest)
      returns(TournamentResponse);
  rpc PairRound(PairRoundRequest) returns(TournamentResponse);
  rpc SetSingleRoundControls(SingleRoundControlsRequest)
      returns(TournamentResponse);
  rpc SetTournamentControls(TournamentControlsRequest)
      returns(TournamentResponse);
  rpc AddDirectors(TournamentPersons) returns(TournamentResponse);
  rpc RemoveDirectors(TournamentPersons) returns(TournamentResponse);
  rpc AddDivision(TournamentDivisionRequest) returns(TournamentResponse);
  rpc RemoveDivision(TournamentDivisionRequest) returns(TournamentResponse);
  rpc AddPlayers(TournamentPersons) returns(TournamentResponse);
  rpc RemovePlayers(TournamentPersons) returns(TournamentResponse);
  rpc SetPairing(TournamentPairingRequest) returns(TournamentResponse);
  rpc SetResult(TournamentResultOverrideRequest) returns(TournamentResponse);
  rpc StartRound(TournamentStartRoundRequest) returns(TournamentResponse);

  rpc RecentGames(RecentGamesRequest) returns(RecentGamesResponse);

  rpc CreateClubSession(NewClubSessionRequest) returns(ClubSessionResponse);
  rpc GetRecentClubSessions(RecentClubSessionsRequest)
      returns(ClubSessionsResponse);
}

message NewClubSessionRequest {
  // date is the date of the session
  google.protobuf.Timestamp date = 1;
  string club_id = 2;
}

message ClubSessionResponse {
  // Note that club sessions are tournaments in our backend. We return
  // the created tournament ID here:
  string tournament_id = 1;
  // slug will look like /club/{club_name}/{date}. It should be
  // case-insensitive.
  string slug = 2;
}

message RecentClubSessionsRequest {
  // club_id
  string id = 1;
  int32 count = 2;
  int32 offset = 3;
}

message ClubSessionsResponse { repeated ClubSessionResponse sessions = 1; }
