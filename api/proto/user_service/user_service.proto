syntax = "proto3";
package user_service;
option go_package = "github.com/domino14/liwords/rpc/api/proto/user_service";

import "api/proto/realtime/realtime.proto";

// User service contains an actual Twirp service for doing user-related things.
// For example, registering, changing passwords, logging in, logging out, and
// more. Instead of a RESTful API we will straight up use Twirp to make life
// easier! We will also use JSON for these requests, as bandwidth is not as
// important as for the `realtime.proto` file.

// UserLoginRequest is used for logging in.
message UserLoginRequest {
  string username = 1;
  string password = 2;
}

message ChangePasswordRequest {
  string old_password = 1;
  string new_password = 2;
}

// The server should also set the session ID in the header.
message LoginResponse {
  string message = 1;
  // I'm not sure if it's safe to do this (return session_id in the request
  // body). We will keep it blank but it might be useful for other interfaces,
  // such as a CLI-driven one, or a phone app, e.g, so keep this here for now.
  string session_id = 2;
}

message ChangePasswordResponse {}

message ResetPasswordRequestStep1 { string email = 1; }
message ResetPasswordRequestStep2 {
  string password = 1;
  string reset_code = 2;
}
message ResetPasswordResponse {}

// SocketTokenRequest requests a token in order to authenticate with the
// socket server
message SocketTokenRequest {}
message SocketTokenResponse {
  string token = 1;
  string cid = 2;
  string front_end_version = 3;
}

message UserLogoutRequest {}
message LogoutResponse {}

service AuthenticationService {
  rpc Login(UserLoginRequest) returns(LoginResponse);
  rpc Logout(UserLogoutRequest) returns(LogoutResponse);
  rpc GetSocketToken(SocketTokenRequest) returns(SocketTokenResponse);
  rpc ResetPasswordStep1(ResetPasswordRequestStep1)
      returns(ResetPasswordResponse);
  rpc ResetPasswordStep2(ResetPasswordRequestStep2)
      returns(ResetPasswordResponse);
  rpc ChangePassword(ChangePasswordRequest) returns(ChangePasswordResponse);
}

message UserRegistrationRequest {
  string username = 1;
  string password = 2;
  string email = 3;
  string registration_code = 4;
}

message RegistrationResponse { string message = 1; }

service RegistrationService {
  rpc Register(UserRegistrationRequest) returns(RegistrationResponse);
}

message RatingsRequest { string username = 1; }

// We just send the raw JSON from the db here for ease. Let the front-end
// figure out how to display it.
message RatingsResponse { string json = 1; }

message StatsRequest { string username = 1; }

// See ratings JSON note above.
message StatsResponse { string json = 1; }

message ProfileRequest { string username = 1; }

message ProfileResponse {
  string first_name = 1;
  string last_name = 2;
  string country_code = 3;
  string title = 4;
  string about = 5;
  string ratings_json = 6;
  string stats_json = 7;
  string user_id = 8;
}

service ProfileService {
  rpc GetRatings(RatingsRequest) returns(RatingsResponse);
  rpc GetStats(StatsRequest) returns(StatsResponse);
  rpc GetProfile(ProfileRequest) returns(ProfileResponse);
}

// Autocomplete

message UsernameSearchRequest { string prefix = 1; }
message UsernameSearchResponse { repeated BasicUser users = 2; }
service AutocompleteService {
  rpc GetCompletion(UsernameSearchRequest) returns(UsernameSearchResponse);
}

// Follows and Blocks

message AddFollowRequest { string uuid = 1; }
message RemoveFollowRequest { string uuid = 1; }
message GetFollowsRequest {}

message AddBlockRequest { string uuid = 1; }
message RemoveBlockRequest { string uuid = 1; }
message GetBlocksRequest {}
message GetFullBlocksRequest {}

message OKResponse {}

message BasicUser {
  string uuid = 1;
  string username = 2;
}

message GetActiveChatChannelsRequest {
  int32 number = 1;
  int32 offset = 2;
  // If a tournament_id is provided, we get active chat channels (private
  // message channels) in addition to the given tournament channel.
  string tournament_id = 3;
}

message ActiveChatChannels {
  message Channel {
    string name = 1;
    string display_name = 2;
    // last_update is a unix timestamp, in seconds.
    int64 last_update = 3;
    bool has_update = 4;
    string last_message = 5;
  }
  repeated Channel channels = 1;
}

message GetChatsRequest { string channel = 1; }

message GetFollowsResponse { repeated BasicUser users = 1; }
message GetBlocksResponse { repeated BasicUser users = 1; }
// XXX: We should eventually obsolete this and handle blocks purely on
// the backend but we need to write a lot of hard code for that.
message GetFullBlocksResponse { repeated string user_ids = 1; }

// Yeah I know
service SocializeService {
  rpc AddFollow(AddFollowRequest) returns(OKResponse);
  rpc RemoveFollow(RemoveFollowRequest) returns(OKResponse);
  rpc GetFollows(GetFollowsRequest) returns(GetFollowsResponse);

  rpc AddBlock(AddBlockRequest) returns(OKResponse);
  rpc RemoveBlock(RemoveBlockRequest) returns(OKResponse);
  rpc GetBlocks(GetBlocksRequest) returns(GetBlocksResponse);
  // GetFullBlocks gets players who blocked us AND players we've blocked
  // together.
  rpc GetFullBlocks(GetFullBlocksRequest) returns(GetFullBlocksResponse);
  rpc GetActiveChatChannels(GetActiveChatChannelsRequest)
      returns(ActiveChatChannels);
  rpc GetChatsForChannel(GetChatsRequest) returns(liwords.ChatMessages);
}
